
FreeRTOS_Template.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004860  08000238  08000238  00001238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08004a98  08004a98  00005a98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08004b14  08004b14  00005b14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  08004b18  08004b18  00005b18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         00000014  20000000  08004b1c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00001ff0  20000014  08004b30  00006014  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  20002004  08004b30  00007004  2**0
                  ALLOC
  8 .ARM.attributes 00000036  00000000  00000000  00006014  2**0
                  CONTENTS, READONLY
  9 .debug_info   00012af4  00000000  00000000  0000604a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00002aaa  00000000  00000000  00018b3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001368  00000000  00000000  0001b5e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 00000ee6  00000000  00000000  0001c950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00031c07  00000000  00000000  0001d836  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00015179  00000000  00000000  0004f43d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00148b2c  00000000  00000000  000645b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  001ad0e2  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00005028  00000000  00000000  001ad128  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000069  00000000  00000000  001b2150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	@ (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	@ (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	@ (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	f3af 8000 	nop.w
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	20000014 	.word	0x20000014
 8000254:	00000000 	.word	0x00000000
 8000258:	08004a80 	.word	0x08004a80

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	@ (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	@ (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	@ (8000274 <frame_dummy+0x18>)
 8000266:	f3af 8000 	nop.w
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	20000018 	.word	0x20000018
 8000274:	08004a80 	.word	0x08004a80

08000278 <MX_ICACHE_Init>:

/* USER CODE END 0 */

/* ICACHE init function */
void MX_ICACHE_Init(void)
{
 8000278:	b580      	push	{r7, lr}
 800027a:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 800027c:	2000      	movs	r0, #0
 800027e:	f000 fb17 	bl	80008b0 <HAL_ICACHE_ConfigAssociativityMode>
 8000282:	4603      	mov	r3, r0
 8000284:	2b00      	cmp	r3, #0
 8000286:	d001      	beq.n	800028c <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8000288:	f000 f872 	bl	8000370 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 800028c:	f000 fb30 	bl	80008f0 <HAL_ICACHE_Enable>
 8000290:	4603      	mov	r3, r0
 8000292:	2b00      	cmp	r3, #0
 8000294:	d001      	beq.n	800029a <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 8000296:	f000 f86b 	bl	8000370 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 800029a:	bf00      	nop
 800029c:	bd80      	pop	{r7, pc}

0800029e <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800029e:	b580      	push	{r7, lr}
 80002a0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002a2:	f000 f97d 	bl	80005a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002a6:	f000 f808 	bl	80002ba <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_ICACHE_Init();
 80002aa:	f7ff ffe5 	bl	8000278 <MX_ICACHE_Init>
  /* USER CODE BEGIN 2 */
  app_system_configure();
 80002ae:	f004 fb31 	bl	8004914 <app_system_configure>
  app_system_start();
 80002b2:	f004 fb3b 	bl	800492c <app_system_start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002b6:	bf00      	nop
 80002b8:	e7fd      	b.n	80002b6 <main+0x18>

080002ba <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002ba:	b580      	push	{r7, lr}
 80002bc:	b09e      	sub	sp, #120	@ 0x78
 80002be:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002c0:	f107 0318 	add.w	r3, r7, #24
 80002c4:	2260      	movs	r2, #96	@ 0x60
 80002c6:	2100      	movs	r1, #0
 80002c8:	4618      	mov	r0, r3
 80002ca:	f004 fb9f 	bl	8004a0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002ce:	463b      	mov	r3, r7
 80002d0:	2200      	movs	r2, #0
 80002d2:	601a      	str	r2, [r3, #0]
 80002d4:	605a      	str	r2, [r3, #4]
 80002d6:	609a      	str	r2, [r3, #8]
 80002d8:	60da      	str	r2, [r3, #12]
 80002da:	611a      	str	r2, [r3, #16]
 80002dc:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE4) != HAL_OK)
 80002de:	2000      	movs	r0, #0
 80002e0:	f000 fb16 	bl	8000910 <HAL_PWREx_ControlVoltageScaling>
 80002e4:	4603      	mov	r3, r0
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	d001      	beq.n	80002ee <SystemClock_Config+0x34>
  {
    Error_Handler();
 80002ea:	f000 f841 	bl	8000370 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80002ee:	2310      	movs	r3, #16
 80002f0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80002f2:	2301      	movs	r3, #1
 80002f4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80002f6:	2310      	movs	r3, #16
 80002f8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_4;
 80002fa:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80002fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000300:	2300      	movs	r3, #0
 8000302:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000304:	f107 0318 	add.w	r3, r7, #24
 8000308:	4618      	mov	r0, r3
 800030a:	f000 fb8d 	bl	8000a28 <HAL_RCC_OscConfig>
 800030e:	4603      	mov	r3, r0
 8000310:	2b00      	cmp	r3, #0
 8000312:	d001      	beq.n	8000318 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000314:	f000 f82c 	bl	8000370 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000318:	231f      	movs	r3, #31
 800031a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800031c:	2300      	movs	r3, #0
 800031e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000320:	2300      	movs	r3, #0
 8000322:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000324:	2300      	movs	r3, #0
 8000326:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000328:	2300      	movs	r3, #0
 800032a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 800032c:	2300      	movs	r3, #0
 800032e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000330:	463b      	mov	r3, r7
 8000332:	2100      	movs	r1, #0
 8000334:	4618      	mov	r0, r3
 8000336:	f001 fa53 	bl	80017e0 <HAL_RCC_ClockConfig>
 800033a:	4603      	mov	r3, r0
 800033c:	2b00      	cmp	r3, #0
 800033e:	d001      	beq.n	8000344 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000340:	f000 f816 	bl	8000370 <Error_Handler>
  }
}
 8000344:	bf00      	nop
 8000346:	3778      	adds	r7, #120	@ 0x78
 8000348:	46bd      	mov	sp, r7
 800034a:	bd80      	pop	{r7, pc}

0800034c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800034c:	b580      	push	{r7, lr}
 800034e:	b082      	sub	sp, #8
 8000350:	af00      	add	r7, sp, #0
 8000352:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	4a04      	ldr	r2, [pc, #16]	@ (800036c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800035a:	4293      	cmp	r3, r2
 800035c:	d101      	bne.n	8000362 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800035e:	f000 f94f 	bl	8000600 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000362:	bf00      	nop
 8000364:	3708      	adds	r7, #8
 8000366:	46bd      	mov	sp, r7
 8000368:	bd80      	pop	{r7, pc}
 800036a:	bf00      	nop
 800036c:	40001400 	.word	0x40001400

08000370 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000370:	b480      	push	{r7}
 8000372:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000374:	b672      	cpsid	i
}
 8000376:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000378:	bf00      	nop
 800037a:	e7fd      	b.n	8000378 <Error_Handler+0x8>

0800037c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800037c:	b480      	push	{r7}
 800037e:	b083      	sub	sp, #12
 8000380:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000382:	4b0a      	ldr	r3, [pc, #40]	@ (80003ac <HAL_MspInit+0x30>)
 8000384:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000388:	4a08      	ldr	r2, [pc, #32]	@ (80003ac <HAL_MspInit+0x30>)
 800038a:	f043 0304 	orr.w	r3, r3, #4
 800038e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8000392:	4b06      	ldr	r3, [pc, #24]	@ (80003ac <HAL_MspInit+0x30>)
 8000394:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000398:	f003 0304 	and.w	r3, r3, #4
 800039c:	607b      	str	r3, [r7, #4]
 800039e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003a0:	bf00      	nop
 80003a2:	370c      	adds	r7, #12
 80003a4:	46bd      	mov	sp, r7
 80003a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003aa:	4770      	bx	lr
 80003ac:	46020c00 	.word	0x46020c00

080003b0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b08e      	sub	sp, #56	@ 0x38
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80003b8:	2300      	movs	r3, #0
 80003ba:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t              uwPrescalerValue = 0;
 80003bc:	2300      	movs	r3, #0
 80003be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 80003c0:	4b2e      	ldr	r3, [pc, #184]	@ (800047c <HAL_InitTick+0xcc>)
 80003c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80003c6:	4a2d      	ldr	r2, [pc, #180]	@ (800047c <HAL_InitTick+0xcc>)
 80003c8:	f043 0320 	orr.w	r3, r3, #32
 80003cc:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80003d0:	4b2a      	ldr	r3, [pc, #168]	@ (800047c <HAL_InitTick+0xcc>)
 80003d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80003d6:	f003 0320 	and.w	r3, r3, #32
 80003da:	60fb      	str	r3, [r7, #12]
 80003dc:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80003de:	f107 0210 	add.w	r2, r7, #16
 80003e2:	f107 0314 	add.w	r3, r7, #20
 80003e6:	4611      	mov	r1, r2
 80003e8:	4618      	mov	r0, r3
 80003ea:	f001 fd1b 	bl	8001e24 <HAL_RCC_GetClockConfig>

  /* Compute TIM7 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80003ee:	f001 fd05 	bl	8001dfc <HAL_RCC_GetPCLK1Freq>
 80003f2:	6338      	str	r0, [r7, #48]	@ 0x30

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80003f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80003f6:	4a22      	ldr	r2, [pc, #136]	@ (8000480 <HAL_InitTick+0xd0>)
 80003f8:	fba2 2303 	umull	r2, r3, r2, r3
 80003fc:	0c9b      	lsrs	r3, r3, #18
 80003fe:	3b01      	subs	r3, #1
 8000400:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8000402:	4b20      	ldr	r3, [pc, #128]	@ (8000484 <HAL_InitTick+0xd4>)
 8000404:	4a20      	ldr	r2, [pc, #128]	@ (8000488 <HAL_InitTick+0xd8>)
 8000406:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8000408:	4b1e      	ldr	r3, [pc, #120]	@ (8000484 <HAL_InitTick+0xd4>)
 800040a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800040e:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8000410:	4a1c      	ldr	r2, [pc, #112]	@ (8000484 <HAL_InitTick+0xd4>)
 8000412:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000414:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8000416:	4b1b      	ldr	r3, [pc, #108]	@ (8000484 <HAL_InitTick+0xd4>)
 8000418:	2200      	movs	r2, #0
 800041a:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800041c:	4b19      	ldr	r3, [pc, #100]	@ (8000484 <HAL_InitTick+0xd4>)
 800041e:	2200      	movs	r2, #0
 8000420:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim7);
 8000422:	4818      	ldr	r0, [pc, #96]	@ (8000484 <HAL_InitTick+0xd4>)
 8000424:	f001 fdbc 	bl	8001fa0 <HAL_TIM_Base_Init>
 8000428:	4603      	mov	r3, r0
 800042a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  if (status == HAL_OK)
 800042e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000432:	2b00      	cmp	r3, #0
 8000434:	d118      	bne.n	8000468 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim7);
 8000436:	4813      	ldr	r0, [pc, #76]	@ (8000484 <HAL_InitTick+0xd4>)
 8000438:	f001 fe14 	bl	8002064 <HAL_TIM_Base_Start_IT>
 800043c:	4603      	mov	r3, r0
 800043e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if (status == HAL_OK)
 8000442:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000446:	2b00      	cmp	r3, #0
 8000448:	d10e      	bne.n	8000468 <HAL_InitTick+0xb8>
    {
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	2b0f      	cmp	r3, #15
 800044e:	d808      	bhi.n	8000462 <HAL_InitTick+0xb2>
      {
        /* Enable the TIM7 global Interrupt */
        HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority, 0U);
 8000450:	2200      	movs	r2, #0
 8000452:	6879      	ldr	r1, [r7, #4]
 8000454:	2032      	movs	r0, #50	@ 0x32
 8000456:	f000 f9ab 	bl	80007b0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800045a:	4a0c      	ldr	r2, [pc, #48]	@ (800048c <HAL_InitTick+0xdc>)
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	6013      	str	r3, [r2, #0]
 8000460:	e002      	b.n	8000468 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8000462:	2301      	movs	r3, #1
 8000464:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
      }
    }
  }

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000468:	2032      	movs	r0, #50	@ 0x32
 800046a:	f000 f9bb 	bl	80007e4 <HAL_NVIC_EnableIRQ>

 /* Return function status */
  return status;
 800046e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 8000472:	4618      	mov	r0, r3
 8000474:	3738      	adds	r7, #56	@ 0x38
 8000476:	46bd      	mov	sp, r7
 8000478:	bd80      	pop	{r7, pc}
 800047a:	bf00      	nop
 800047c:	46020c00 	.word	0x46020c00
 8000480:	431bde83 	.word	0x431bde83
 8000484:	20000030 	.word	0x20000030
 8000488:	40001400 	.word	0x40001400
 800048c:	20000004 	.word	0x20000004

08000490 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000490:	b480      	push	{r7}
 8000492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000494:	bf00      	nop
 8000496:	e7fd      	b.n	8000494 <NMI_Handler+0x4>

08000498 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000498:	b480      	push	{r7}
 800049a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800049c:	bf00      	nop
 800049e:	e7fd      	b.n	800049c <HardFault_Handler+0x4>

080004a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004a0:	b480      	push	{r7}
 80004a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004a4:	bf00      	nop
 80004a6:	e7fd      	b.n	80004a4 <MemManage_Handler+0x4>

080004a8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004a8:	b480      	push	{r7}
 80004aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004ac:	bf00      	nop
 80004ae:	e7fd      	b.n	80004ac <BusFault_Handler+0x4>

080004b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004b0:	b480      	push	{r7}
 80004b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004b4:	bf00      	nop
 80004b6:	e7fd      	b.n	80004b4 <UsageFault_Handler+0x4>

080004b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004b8:	b480      	push	{r7}
 80004ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004bc:	bf00      	nop
 80004be:	46bd      	mov	sp, r7
 80004c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c4:	4770      	bx	lr
	...

080004c8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80004cc:	4802      	ldr	r0, [pc, #8]	@ (80004d8 <TIM7_IRQHandler+0x10>)
 80004ce:	f001 fe69 	bl	80021a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80004d2:	bf00      	nop
 80004d4:	bd80      	pop	{r7, pc}
 80004d6:	bf00      	nop
 80004d8:	20000030 	.word	0x20000030

080004dc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80004dc:	b480      	push	{r7}
 80004de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80004e0:	4b18      	ldr	r3, [pc, #96]	@ (8000544 <SystemInit+0x68>)
 80004e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80004e6:	4a17      	ldr	r2, [pc, #92]	@ (8000544 <SystemInit+0x68>)
 80004e8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80004ec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 80004f0:	4b15      	ldr	r3, [pc, #84]	@ (8000548 <SystemInit+0x6c>)
 80004f2:	2201      	movs	r2, #1
 80004f4:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 80004f6:	4b14      	ldr	r3, [pc, #80]	@ (8000548 <SystemInit+0x6c>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 80004fc:	4b12      	ldr	r3, [pc, #72]	@ (8000548 <SystemInit+0x6c>)
 80004fe:	2200      	movs	r2, #0
 8000500:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8000502:	4b11      	ldr	r3, [pc, #68]	@ (8000548 <SystemInit+0x6c>)
 8000504:	2200      	movs	r2, #0
 8000506:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8000508:	4b0f      	ldr	r3, [pc, #60]	@ (8000548 <SystemInit+0x6c>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	4a0e      	ldr	r2, [pc, #56]	@ (8000548 <SystemInit+0x6c>)
 800050e:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 8000512:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 8000516:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8000518:	4b0b      	ldr	r3, [pc, #44]	@ (8000548 <SystemInit+0x6c>)
 800051a:	2200      	movs	r2, #0
 800051c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 800051e:	4b0a      	ldr	r3, [pc, #40]	@ (8000548 <SystemInit+0x6c>)
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	4a09      	ldr	r2, [pc, #36]	@ (8000548 <SystemInit+0x6c>)
 8000524:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000528:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 800052a:	4b07      	ldr	r3, [pc, #28]	@ (8000548 <SystemInit+0x6c>)
 800052c:	2200      	movs	r2, #0
 800052e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000530:	4b04      	ldr	r3, [pc, #16]	@ (8000544 <SystemInit+0x68>)
 8000532:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000536:	609a      	str	r2, [r3, #8]
  #endif
}
 8000538:	bf00      	nop
 800053a:	46bd      	mov	sp, r7
 800053c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop
 8000544:	e000ed00 	.word	0xe000ed00
 8000548:	46020c00 	.word	0x46020c00

0800054c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 800054c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000584 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000550:	f7ff ffc4 	bl	80004dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000554:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000556:	e003      	b.n	8000560 <LoopCopyDataInit>

08000558 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000558:	4b0b      	ldr	r3, [pc, #44]	@ (8000588 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800055a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800055c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800055e:	3104      	adds	r1, #4

08000560 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000560:	480a      	ldr	r0, [pc, #40]	@ (800058c <LoopForever+0xa>)
	ldr	r3, =_edata
 8000562:	4b0b      	ldr	r3, [pc, #44]	@ (8000590 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000564:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000566:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000568:	d3f6      	bcc.n	8000558 <CopyDataInit>
	ldr	r2, =_sbss
 800056a:	4a0a      	ldr	r2, [pc, #40]	@ (8000594 <LoopForever+0x12>)
	b	LoopFillZerobss
 800056c:	e002      	b.n	8000574 <LoopFillZerobss>

0800056e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800056e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000570:	f842 3b04 	str.w	r3, [r2], #4

08000574 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000574:	4b08      	ldr	r3, [pc, #32]	@ (8000598 <LoopForever+0x16>)
	cmp	r2, r3
 8000576:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000578:	d3f9      	bcc.n	800056e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800057a:	f004 fa4f 	bl	8004a1c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800057e:	f7ff fe8e 	bl	800029e <main>

08000582 <LoopForever>:

LoopForever:
    b LoopForever
 8000582:	e7fe      	b.n	8000582 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8000584:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 8000588:	08004b1c 	.word	0x08004b1c
	ldr	r0, =_sdata
 800058c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000590:	20000014 	.word	0x20000014
	ldr	r2, =_sbss
 8000594:	20000014 	.word	0x20000014
	ldr	r3, = _ebss
 8000598:	20002004 	.word	0x20002004

0800059c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800059c:	e7fe      	b.n	800059c <ADC1_IRQHandler>
	...

080005a0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005a4:	4b12      	ldr	r3, [pc, #72]	@ (80005f0 <HAL_Init+0x50>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	4a11      	ldr	r2, [pc, #68]	@ (80005f0 <HAL_Init+0x50>)
 80005aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80005ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005b0:	2003      	movs	r0, #3
 80005b2:	f000 f8f2 	bl	800079a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80005b6:	f001 fb05 	bl	8001bc4 <HAL_RCC_GetSysClockFreq>
 80005ba:	4602      	mov	r2, r0
 80005bc:	4b0d      	ldr	r3, [pc, #52]	@ (80005f4 <HAL_Init+0x54>)
 80005be:	6a1b      	ldr	r3, [r3, #32]
 80005c0:	f003 030f 	and.w	r3, r3, #15
 80005c4:	490c      	ldr	r1, [pc, #48]	@ (80005f8 <HAL_Init+0x58>)
 80005c6:	5ccb      	ldrb	r3, [r1, r3]
 80005c8:	fa22 f303 	lsr.w	r3, r2, r3
 80005cc:	4a0b      	ldr	r2, [pc, #44]	@ (80005fc <HAL_Init+0x5c>)
 80005ce:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80005d0:	2004      	movs	r0, #4
 80005d2:	f000 f915 	bl	8000800 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80005d6:	200f      	movs	r0, #15
 80005d8:	f7ff feea 	bl	80003b0 <HAL_InitTick>
 80005dc:	4603      	mov	r3, r0
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d001      	beq.n	80005e6 <HAL_Init+0x46>
  {
    return HAL_ERROR;
 80005e2:	2301      	movs	r3, #1
 80005e4:	e002      	b.n	80005ec <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80005e6:	f7ff fec9 	bl	800037c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005ea:	2300      	movs	r3, #0
}
 80005ec:	4618      	mov	r0, r3
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	40022000 	.word	0x40022000
 80005f4:	46020c00 	.word	0x46020c00
 80005f8:	08004abc 	.word	0x08004abc
 80005fc:	20000000 	.word	0x20000000

08000600 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000600:	b480      	push	{r7}
 8000602:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000604:	4b06      	ldr	r3, [pc, #24]	@ (8000620 <HAL_IncTick+0x20>)
 8000606:	781b      	ldrb	r3, [r3, #0]
 8000608:	461a      	mov	r2, r3
 800060a:	4b06      	ldr	r3, [pc, #24]	@ (8000624 <HAL_IncTick+0x24>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	4413      	add	r3, r2
 8000610:	4a04      	ldr	r2, [pc, #16]	@ (8000624 <HAL_IncTick+0x24>)
 8000612:	6013      	str	r3, [r2, #0]
}
 8000614:	bf00      	nop
 8000616:	46bd      	mov	sp, r7
 8000618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061c:	4770      	bx	lr
 800061e:	bf00      	nop
 8000620:	20000008 	.word	0x20000008
 8000624:	2000007c 	.word	0x2000007c

08000628 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000628:	b480      	push	{r7}
 800062a:	af00      	add	r7, sp, #0
  return uwTick;
 800062c:	4b03      	ldr	r3, [pc, #12]	@ (800063c <HAL_GetTick+0x14>)
 800062e:	681b      	ldr	r3, [r3, #0]
}
 8000630:	4618      	mov	r0, r3
 8000632:	46bd      	mov	sp, r7
 8000634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000638:	4770      	bx	lr
 800063a:	bf00      	nop
 800063c:	2000007c 	.word	0x2000007c

08000640 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000640:	b480      	push	{r7}
 8000642:	b085      	sub	sp, #20
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	f003 0307 	and.w	r3, r3, #7
 800064e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000650:	4b0c      	ldr	r3, [pc, #48]	@ (8000684 <__NVIC_SetPriorityGrouping+0x44>)
 8000652:	68db      	ldr	r3, [r3, #12]
 8000654:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000656:	68ba      	ldr	r2, [r7, #8]
 8000658:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800065c:	4013      	ands	r3, r2
 800065e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000660:	68fb      	ldr	r3, [r7, #12]
 8000662:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000664:	68bb      	ldr	r3, [r7, #8]
 8000666:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000668:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800066c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000670:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000672:	4a04      	ldr	r2, [pc, #16]	@ (8000684 <__NVIC_SetPriorityGrouping+0x44>)
 8000674:	68bb      	ldr	r3, [r7, #8]
 8000676:	60d3      	str	r3, [r2, #12]
}
 8000678:	bf00      	nop
 800067a:	3714      	adds	r7, #20
 800067c:	46bd      	mov	sp, r7
 800067e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000682:	4770      	bx	lr
 8000684:	e000ed00 	.word	0xe000ed00

08000688 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000688:	b480      	push	{r7}
 800068a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800068c:	4b04      	ldr	r3, [pc, #16]	@ (80006a0 <__NVIC_GetPriorityGrouping+0x18>)
 800068e:	68db      	ldr	r3, [r3, #12]
 8000690:	0a1b      	lsrs	r3, r3, #8
 8000692:	f003 0307 	and.w	r3, r3, #7
}
 8000696:	4618      	mov	r0, r3
 8000698:	46bd      	mov	sp, r7
 800069a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069e:	4770      	bx	lr
 80006a0:	e000ed00 	.word	0xe000ed00

080006a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006a4:	b480      	push	{r7}
 80006a6:	b083      	sub	sp, #12
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	4603      	mov	r3, r0
 80006ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	db0b      	blt.n	80006ce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006b6:	79fb      	ldrb	r3, [r7, #7]
 80006b8:	f003 021f 	and.w	r2, r3, #31
 80006bc:	4907      	ldr	r1, [pc, #28]	@ (80006dc <__NVIC_EnableIRQ+0x38>)
 80006be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006c2:	095b      	lsrs	r3, r3, #5
 80006c4:	2001      	movs	r0, #1
 80006c6:	fa00 f202 	lsl.w	r2, r0, r2
 80006ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80006ce:	bf00      	nop
 80006d0:	370c      	adds	r7, #12
 80006d2:	46bd      	mov	sp, r7
 80006d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d8:	4770      	bx	lr
 80006da:	bf00      	nop
 80006dc:	e000e100 	.word	0xe000e100

080006e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006e0:	b480      	push	{r7}
 80006e2:	b083      	sub	sp, #12
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	4603      	mov	r3, r0
 80006e8:	6039      	str	r1, [r7, #0]
 80006ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	db0a      	blt.n	800070a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006f4:	683b      	ldr	r3, [r7, #0]
 80006f6:	b2da      	uxtb	r2, r3
 80006f8:	490c      	ldr	r1, [pc, #48]	@ (800072c <__NVIC_SetPriority+0x4c>)
 80006fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006fe:	0112      	lsls	r2, r2, #4
 8000700:	b2d2      	uxtb	r2, r2
 8000702:	440b      	add	r3, r1
 8000704:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000708:	e00a      	b.n	8000720 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800070a:	683b      	ldr	r3, [r7, #0]
 800070c:	b2da      	uxtb	r2, r3
 800070e:	4908      	ldr	r1, [pc, #32]	@ (8000730 <__NVIC_SetPriority+0x50>)
 8000710:	79fb      	ldrb	r3, [r7, #7]
 8000712:	f003 030f 	and.w	r3, r3, #15
 8000716:	3b04      	subs	r3, #4
 8000718:	0112      	lsls	r2, r2, #4
 800071a:	b2d2      	uxtb	r2, r2
 800071c:	440b      	add	r3, r1
 800071e:	761a      	strb	r2, [r3, #24]
}
 8000720:	bf00      	nop
 8000722:	370c      	adds	r7, #12
 8000724:	46bd      	mov	sp, r7
 8000726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072a:	4770      	bx	lr
 800072c:	e000e100 	.word	0xe000e100
 8000730:	e000ed00 	.word	0xe000ed00

08000734 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000734:	b480      	push	{r7}
 8000736:	b089      	sub	sp, #36	@ 0x24
 8000738:	af00      	add	r7, sp, #0
 800073a:	60f8      	str	r0, [r7, #12]
 800073c:	60b9      	str	r1, [r7, #8]
 800073e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000740:	68fb      	ldr	r3, [r7, #12]
 8000742:	f003 0307 	and.w	r3, r3, #7
 8000746:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000748:	69fb      	ldr	r3, [r7, #28]
 800074a:	f1c3 0307 	rsb	r3, r3, #7
 800074e:	2b04      	cmp	r3, #4
 8000750:	bf28      	it	cs
 8000752:	2304      	movcs	r3, #4
 8000754:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000756:	69fb      	ldr	r3, [r7, #28]
 8000758:	3304      	adds	r3, #4
 800075a:	2b06      	cmp	r3, #6
 800075c:	d902      	bls.n	8000764 <NVIC_EncodePriority+0x30>
 800075e:	69fb      	ldr	r3, [r7, #28]
 8000760:	3b03      	subs	r3, #3
 8000762:	e000      	b.n	8000766 <NVIC_EncodePriority+0x32>
 8000764:	2300      	movs	r3, #0
 8000766:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000768:	f04f 32ff 	mov.w	r2, #4294967295
 800076c:	69bb      	ldr	r3, [r7, #24]
 800076e:	fa02 f303 	lsl.w	r3, r2, r3
 8000772:	43da      	mvns	r2, r3
 8000774:	68bb      	ldr	r3, [r7, #8]
 8000776:	401a      	ands	r2, r3
 8000778:	697b      	ldr	r3, [r7, #20]
 800077a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800077c:	f04f 31ff 	mov.w	r1, #4294967295
 8000780:	697b      	ldr	r3, [r7, #20]
 8000782:	fa01 f303 	lsl.w	r3, r1, r3
 8000786:	43d9      	mvns	r1, r3
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800078c:	4313      	orrs	r3, r2
         );
}
 800078e:	4618      	mov	r0, r3
 8000790:	3724      	adds	r7, #36	@ 0x24
 8000792:	46bd      	mov	sp, r7
 8000794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000798:	4770      	bx	lr

0800079a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800079a:	b580      	push	{r7, lr}
 800079c:	b082      	sub	sp, #8
 800079e:	af00      	add	r7, sp, #0
 80007a0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007a2:	6878      	ldr	r0, [r7, #4]
 80007a4:	f7ff ff4c 	bl	8000640 <__NVIC_SetPriorityGrouping>
}
 80007a8:	bf00      	nop
 80007aa:	3708      	adds	r7, #8
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}

080007b0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b086      	sub	sp, #24
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	4603      	mov	r3, r0
 80007b8:	60b9      	str	r1, [r7, #8]
 80007ba:	607a      	str	r2, [r7, #4]
 80007bc:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80007be:	f7ff ff63 	bl	8000688 <__NVIC_GetPriorityGrouping>
 80007c2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007c4:	687a      	ldr	r2, [r7, #4]
 80007c6:	68b9      	ldr	r1, [r7, #8]
 80007c8:	6978      	ldr	r0, [r7, #20]
 80007ca:	f7ff ffb3 	bl	8000734 <NVIC_EncodePriority>
 80007ce:	4602      	mov	r2, r0
 80007d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007d4:	4611      	mov	r1, r2
 80007d6:	4618      	mov	r0, r3
 80007d8:	f7ff ff82 	bl	80006e0 <__NVIC_SetPriority>
}
 80007dc:	bf00      	nop
 80007de:	3718      	adds	r7, #24
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}

080007e4 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b082      	sub	sp, #8
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	4603      	mov	r3, r0
 80007ec:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80007ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007f2:	4618      	mov	r0, r3
 80007f4:	f7ff ff56 	bl	80006a4 <__NVIC_EnableIRQ>
}
 80007f8:	bf00      	nop
 80007fa:	3708      	adds	r7, #8
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}

08000800 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000800:	b480      	push	{r7}
 8000802:	b083      	sub	sp, #12
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	2b04      	cmp	r3, #4
 800080c:	d844      	bhi.n	8000898 <HAL_SYSTICK_CLKSourceConfig+0x98>
 800080e:	a201      	add	r2, pc, #4	@ (adr r2, 8000814 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8000810:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000814:	08000837 	.word	0x08000837
 8000818:	08000855 	.word	0x08000855
 800081c:	08000877 	.word	0x08000877
 8000820:	08000899 	.word	0x08000899
 8000824:	08000829 	.word	0x08000829
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8000828:	4b1f      	ldr	r3, [pc, #124]	@ (80008a8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	4a1e      	ldr	r2, [pc, #120]	@ (80008a8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800082e:	f043 0304 	orr.w	r3, r3, #4
 8000832:	6013      	str	r3, [r2, #0]
      break;
 8000834:	e031      	b.n	800089a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8000836:	4b1c      	ldr	r3, [pc, #112]	@ (80008a8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	4a1b      	ldr	r2, [pc, #108]	@ (80008a8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800083c:	f023 0304 	bic.w	r3, r3, #4
 8000840:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 8000842:	4b1a      	ldr	r3, [pc, #104]	@ (80008ac <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000844:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000848:	4a18      	ldr	r2, [pc, #96]	@ (80008ac <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800084a:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800084e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8000852:	e022      	b.n	800089a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8000854:	4b14      	ldr	r3, [pc, #80]	@ (80008a8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	4a13      	ldr	r2, [pc, #76]	@ (80008a8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800085a:	f023 0304 	bic.w	r3, r3, #4
 800085e:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 8000860:	4b12      	ldr	r3, [pc, #72]	@ (80008ac <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000862:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000866:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800086a:	4a10      	ldr	r2, [pc, #64]	@ (80008ac <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800086c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000870:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8000874:	e011      	b.n	800089a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8000876:	4b0c      	ldr	r3, [pc, #48]	@ (80008a8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	4a0b      	ldr	r2, [pc, #44]	@ (80008a8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800087c:	f023 0304 	bic.w	r3, r3, #4
 8000880:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 8000882:	4b0a      	ldr	r3, [pc, #40]	@ (80008ac <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000884:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000888:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800088c:	4a07      	ldr	r2, [pc, #28]	@ (80008ac <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800088e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000892:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8000896:	e000      	b.n	800089a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8000898:	bf00      	nop
  }
}
 800089a:	bf00      	nop
 800089c:	370c      	adds	r7, #12
 800089e:	46bd      	mov	sp, r7
 80008a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a4:	4770      	bx	lr
 80008a6:	bf00      	nop
 80008a8:	e000e010 	.word	0xe000e010
 80008ac:	46020c00 	.word	0x46020c00

080008b0 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 80008b0:	b480      	push	{r7}
 80008b2:	b085      	sub	sp, #20
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80008b8:	2300      	movs	r3, #0
 80008ba:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 80008bc:	4b0b      	ldr	r3, [pc, #44]	@ (80008ec <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	f003 0301 	and.w	r3, r3, #1
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d002      	beq.n	80008ce <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 80008c8:	2301      	movs	r3, #1
 80008ca:	73fb      	strb	r3, [r7, #15]
 80008cc:	e007      	b.n	80008de <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 80008ce:	4b07      	ldr	r3, [pc, #28]	@ (80008ec <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	f023 0204 	bic.w	r2, r3, #4
 80008d6:	4905      	ldr	r1, [pc, #20]	@ (80008ec <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	4313      	orrs	r3, r2
 80008dc:	600b      	str	r3, [r1, #0]
  }

  return status;
 80008de:	7bfb      	ldrb	r3, [r7, #15]
}
 80008e0:	4618      	mov	r0, r3
 80008e2:	3714      	adds	r7, #20
 80008e4:	46bd      	mov	sp, r7
 80008e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ea:	4770      	bx	lr
 80008ec:	40030400 	.word	0x40030400

080008f0 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 80008f4:	4b05      	ldr	r3, [pc, #20]	@ (800090c <HAL_ICACHE_Enable+0x1c>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	4a04      	ldr	r2, [pc, #16]	@ (800090c <HAL_ICACHE_Enable+0x1c>)
 80008fa:	f043 0301 	orr.w	r3, r3, #1
 80008fe:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8000900:	2300      	movs	r3, #0
}
 8000902:	4618      	mov	r0, r3
 8000904:	46bd      	mov	sp, r7
 8000906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090a:	4770      	bx	lr
 800090c:	40030400 	.word	0x40030400

08000910 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000910:	b480      	push	{r7}
 8000912:	b085      	sub	sp, #20
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8000918:	4b39      	ldr	r3, [pc, #228]	@ (8000a00 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800091a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800091c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000920:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8000922:	68ba      	ldr	r2, [r7, #8]
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	429a      	cmp	r2, r3
 8000928:	d10b      	bne.n	8000942 <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000930:	d905      	bls.n	800093e <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8000932:	4b33      	ldr	r3, [pc, #204]	@ (8000a00 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8000934:	68db      	ldr	r3, [r3, #12]
 8000936:	4a32      	ldr	r2, [pc, #200]	@ (8000a00 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8000938:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800093c:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 800093e:	2300      	movs	r3, #0
 8000940:	e057      	b.n	80009f2 <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000948:	d90a      	bls.n	8000960 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 800094a:	4b2d      	ldr	r3, [pc, #180]	@ (8000a00 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800094c:	68db      	ldr	r3, [r3, #12]
 800094e:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	4313      	orrs	r3, r2
 8000956:	4a2a      	ldr	r2, [pc, #168]	@ (8000a00 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8000958:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800095c:	60d3      	str	r3, [r2, #12]
 800095e:	e007      	b.n	8000970 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8000960:	4b27      	ldr	r3, [pc, #156]	@ (8000a00 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8000962:	68db      	ldr	r3, [r3, #12]
 8000964:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8000968:	4925      	ldr	r1, [pc, #148]	@ (8000a00 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	4313      	orrs	r3, r2
 800096e:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8000970:	4b24      	ldr	r3, [pc, #144]	@ (8000a04 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	4a24      	ldr	r2, [pc, #144]	@ (8000a08 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8000976:	fba2 2303 	umull	r2, r3, r2, r3
 800097a:	099b      	lsrs	r3, r3, #6
 800097c:	2232      	movs	r2, #50	@ 0x32
 800097e:	fb02 f303 	mul.w	r3, r2, r3
 8000982:	4a21      	ldr	r2, [pc, #132]	@ (8000a08 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8000984:	fba2 2303 	umull	r2, r3, r2, r3
 8000988:	099b      	lsrs	r3, r3, #6
 800098a:	3301      	adds	r3, #1
 800098c:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800098e:	e002      	b.n	8000996 <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	3b01      	subs	r3, #1
 8000994:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8000996:	4b1a      	ldr	r3, [pc, #104]	@ (8000a00 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8000998:	68db      	ldr	r3, [r3, #12]
 800099a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d102      	bne.n	80009a8 <HAL_PWREx_ControlVoltageScaling+0x98>
 80009a2:	68fb      	ldr	r3, [r7, #12]
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d1f3      	bne.n	8000990 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 80009a8:	68fb      	ldr	r3, [r7, #12]
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d01b      	beq.n	80009e6 <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80009ae:	4b15      	ldr	r3, [pc, #84]	@ (8000a04 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	4a15      	ldr	r2, [pc, #84]	@ (8000a08 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80009b4:	fba2 2303 	umull	r2, r3, r2, r3
 80009b8:	099b      	lsrs	r3, r3, #6
 80009ba:	2232      	movs	r2, #50	@ 0x32
 80009bc:	fb02 f303 	mul.w	r3, r2, r3
 80009c0:	4a11      	ldr	r2, [pc, #68]	@ (8000a08 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80009c2:	fba2 2303 	umull	r2, r3, r2, r3
 80009c6:	099b      	lsrs	r3, r3, #6
 80009c8:	3301      	adds	r3, #1
 80009ca:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 80009cc:	e002      	b.n	80009d4 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 80009ce:	68fb      	ldr	r3, [r7, #12]
 80009d0:	3b01      	subs	r3, #1
 80009d2:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 80009d4:	4b0a      	ldr	r3, [pc, #40]	@ (8000a00 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80009d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80009d8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d102      	bne.n	80009e6 <HAL_PWREx_ControlVoltageScaling+0xd6>
 80009e0:	68fb      	ldr	r3, [r7, #12]
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d1f3      	bne.n	80009ce <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 80009e6:	68fb      	ldr	r3, [r7, #12]
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d101      	bne.n	80009f0 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 80009ec:	2303      	movs	r3, #3
 80009ee:	e000      	b.n	80009f2 <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 80009f0:	2300      	movs	r3, #0
}
 80009f2:	4618      	mov	r0, r3
 80009f4:	3714      	adds	r7, #20
 80009f6:	46bd      	mov	sp, r7
 80009f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop
 8000a00:	46020800 	.word	0x46020800
 8000a04:	20000000 	.word	0x20000000
 8000a08:	10624dd3 	.word	0x10624dd3

08000a0c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8000a10:	4b04      	ldr	r3, [pc, #16]	@ (8000a24 <HAL_PWREx_GetVoltageRange+0x18>)
 8000a12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000a14:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 8000a18:	4618      	mov	r0, r3
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a20:	4770      	bx	lr
 8000a22:	bf00      	nop
 8000a24:	46020800 	.word	0x46020800

08000a28 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b08e      	sub	sp, #56	@ 0x38
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8000a30:	2300      	movs	r3, #0
 8000a32:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d102      	bne.n	8000a42 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	f000 bec8 	b.w	80017d2 <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000a42:	4b99      	ldr	r3, [pc, #612]	@ (8000ca8 <HAL_RCC_OscConfig+0x280>)
 8000a44:	69db      	ldr	r3, [r3, #28]
 8000a46:	f003 030c 	and.w	r3, r3, #12
 8000a4a:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000a4c:	4b96      	ldr	r3, [pc, #600]	@ (8000ca8 <HAL_RCC_OscConfig+0x280>)
 8000a4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000a50:	f003 0303 	and.w	r3, r3, #3
 8000a54:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	f003 0310 	and.w	r3, r3, #16
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	f000 816c 	beq.w	8000d3c <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8000a64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d007      	beq.n	8000a7a <HAL_RCC_OscConfig+0x52>
 8000a6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000a6c:	2b0c      	cmp	r3, #12
 8000a6e:	f040 80de 	bne.w	8000c2e <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000a72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000a74:	2b01      	cmp	r3, #1
 8000a76:	f040 80da 	bne.w	8000c2e <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	69db      	ldr	r3, [r3, #28]
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d102      	bne.n	8000a88 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 8000a82:	2301      	movs	r3, #1
 8000a84:	f000 bea5 	b.w	80017d2 <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000a8c:	4b86      	ldr	r3, [pc, #536]	@ (8000ca8 <HAL_RCC_OscConfig+0x280>)
 8000a8e:	689b      	ldr	r3, [r3, #8]
 8000a90:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d004      	beq.n	8000aa2 <HAL_RCC_OscConfig+0x7a>
 8000a98:	4b83      	ldr	r3, [pc, #524]	@ (8000ca8 <HAL_RCC_OscConfig+0x280>)
 8000a9a:	689b      	ldr	r3, [r3, #8]
 8000a9c:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8000aa0:	e005      	b.n	8000aae <HAL_RCC_OscConfig+0x86>
 8000aa2:	4b81      	ldr	r3, [pc, #516]	@ (8000ca8 <HAL_RCC_OscConfig+0x280>)
 8000aa4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000aa8:	041b      	lsls	r3, r3, #16
 8000aaa:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8000aae:	4293      	cmp	r3, r2
 8000ab0:	d255      	bcs.n	8000b5e <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8000ab2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d10a      	bne.n	8000ace <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000abc:	4618      	mov	r0, r3
 8000abe:	f001 f9e9 	bl	8001e94 <RCC_SetFlashLatencyFromMSIRange>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d002      	beq.n	8000ace <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 8000ac8:	2301      	movs	r3, #1
 8000aca:	f000 be82 	b.w	80017d2 <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8000ace:	4b76      	ldr	r3, [pc, #472]	@ (8000ca8 <HAL_RCC_OscConfig+0x280>)
 8000ad0:	689b      	ldr	r3, [r3, #8]
 8000ad2:	4a75      	ldr	r2, [pc, #468]	@ (8000ca8 <HAL_RCC_OscConfig+0x280>)
 8000ad4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000ad8:	6093      	str	r3, [r2, #8]
 8000ada:	4b73      	ldr	r3, [pc, #460]	@ (8000ca8 <HAL_RCC_OscConfig+0x280>)
 8000adc:	689b      	ldr	r3, [r3, #8]
 8000ade:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ae6:	4970      	ldr	r1, [pc, #448]	@ (8000ca8 <HAL_RCC_OscConfig+0x280>)
 8000ae8:	4313      	orrs	r3, r2
 8000aea:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000af0:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8000af4:	d309      	bcc.n	8000b0a <HAL_RCC_OscConfig+0xe2>
 8000af6:	4b6c      	ldr	r3, [pc, #432]	@ (8000ca8 <HAL_RCC_OscConfig+0x280>)
 8000af8:	68db      	ldr	r3, [r3, #12]
 8000afa:	f023 021f 	bic.w	r2, r3, #31
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	6a1b      	ldr	r3, [r3, #32]
 8000b02:	4969      	ldr	r1, [pc, #420]	@ (8000ca8 <HAL_RCC_OscConfig+0x280>)
 8000b04:	4313      	orrs	r3, r2
 8000b06:	60cb      	str	r3, [r1, #12]
 8000b08:	e07e      	b.n	8000c08 <HAL_RCC_OscConfig+0x1e0>
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	da0a      	bge.n	8000b28 <HAL_RCC_OscConfig+0x100>
 8000b12:	4b65      	ldr	r3, [pc, #404]	@ (8000ca8 <HAL_RCC_OscConfig+0x280>)
 8000b14:	68db      	ldr	r3, [r3, #12]
 8000b16:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	6a1b      	ldr	r3, [r3, #32]
 8000b1e:	015b      	lsls	r3, r3, #5
 8000b20:	4961      	ldr	r1, [pc, #388]	@ (8000ca8 <HAL_RCC_OscConfig+0x280>)
 8000b22:	4313      	orrs	r3, r2
 8000b24:	60cb      	str	r3, [r1, #12]
 8000b26:	e06f      	b.n	8000c08 <HAL_RCC_OscConfig+0x1e0>
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b2c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000b30:	d30a      	bcc.n	8000b48 <HAL_RCC_OscConfig+0x120>
 8000b32:	4b5d      	ldr	r3, [pc, #372]	@ (8000ca8 <HAL_RCC_OscConfig+0x280>)
 8000b34:	68db      	ldr	r3, [r3, #12]
 8000b36:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	6a1b      	ldr	r3, [r3, #32]
 8000b3e:	029b      	lsls	r3, r3, #10
 8000b40:	4959      	ldr	r1, [pc, #356]	@ (8000ca8 <HAL_RCC_OscConfig+0x280>)
 8000b42:	4313      	orrs	r3, r2
 8000b44:	60cb      	str	r3, [r1, #12]
 8000b46:	e05f      	b.n	8000c08 <HAL_RCC_OscConfig+0x1e0>
 8000b48:	4b57      	ldr	r3, [pc, #348]	@ (8000ca8 <HAL_RCC_OscConfig+0x280>)
 8000b4a:	68db      	ldr	r3, [r3, #12]
 8000b4c:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	6a1b      	ldr	r3, [r3, #32]
 8000b54:	03db      	lsls	r3, r3, #15
 8000b56:	4954      	ldr	r1, [pc, #336]	@ (8000ca8 <HAL_RCC_OscConfig+0x280>)
 8000b58:	4313      	orrs	r3, r2
 8000b5a:	60cb      	str	r3, [r1, #12]
 8000b5c:	e054      	b.n	8000c08 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8000b5e:	4b52      	ldr	r3, [pc, #328]	@ (8000ca8 <HAL_RCC_OscConfig+0x280>)
 8000b60:	689b      	ldr	r3, [r3, #8]
 8000b62:	4a51      	ldr	r2, [pc, #324]	@ (8000ca8 <HAL_RCC_OscConfig+0x280>)
 8000b64:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000b68:	6093      	str	r3, [r2, #8]
 8000b6a:	4b4f      	ldr	r3, [pc, #316]	@ (8000ca8 <HAL_RCC_OscConfig+0x280>)
 8000b6c:	689b      	ldr	r3, [r3, #8]
 8000b6e:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b76:	494c      	ldr	r1, [pc, #304]	@ (8000ca8 <HAL_RCC_OscConfig+0x280>)
 8000b78:	4313      	orrs	r3, r2
 8000b7a:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b80:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8000b84:	d309      	bcc.n	8000b9a <HAL_RCC_OscConfig+0x172>
 8000b86:	4b48      	ldr	r3, [pc, #288]	@ (8000ca8 <HAL_RCC_OscConfig+0x280>)
 8000b88:	68db      	ldr	r3, [r3, #12]
 8000b8a:	f023 021f 	bic.w	r2, r3, #31
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	6a1b      	ldr	r3, [r3, #32]
 8000b92:	4945      	ldr	r1, [pc, #276]	@ (8000ca8 <HAL_RCC_OscConfig+0x280>)
 8000b94:	4313      	orrs	r3, r2
 8000b96:	60cb      	str	r3, [r1, #12]
 8000b98:	e028      	b.n	8000bec <HAL_RCC_OscConfig+0x1c4>
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	da0a      	bge.n	8000bb8 <HAL_RCC_OscConfig+0x190>
 8000ba2:	4b41      	ldr	r3, [pc, #260]	@ (8000ca8 <HAL_RCC_OscConfig+0x280>)
 8000ba4:	68db      	ldr	r3, [r3, #12]
 8000ba6:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	6a1b      	ldr	r3, [r3, #32]
 8000bae:	015b      	lsls	r3, r3, #5
 8000bb0:	493d      	ldr	r1, [pc, #244]	@ (8000ca8 <HAL_RCC_OscConfig+0x280>)
 8000bb2:	4313      	orrs	r3, r2
 8000bb4:	60cb      	str	r3, [r1, #12]
 8000bb6:	e019      	b.n	8000bec <HAL_RCC_OscConfig+0x1c4>
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000bbc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000bc0:	d30a      	bcc.n	8000bd8 <HAL_RCC_OscConfig+0x1b0>
 8000bc2:	4b39      	ldr	r3, [pc, #228]	@ (8000ca8 <HAL_RCC_OscConfig+0x280>)
 8000bc4:	68db      	ldr	r3, [r3, #12]
 8000bc6:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	6a1b      	ldr	r3, [r3, #32]
 8000bce:	029b      	lsls	r3, r3, #10
 8000bd0:	4935      	ldr	r1, [pc, #212]	@ (8000ca8 <HAL_RCC_OscConfig+0x280>)
 8000bd2:	4313      	orrs	r3, r2
 8000bd4:	60cb      	str	r3, [r1, #12]
 8000bd6:	e009      	b.n	8000bec <HAL_RCC_OscConfig+0x1c4>
 8000bd8:	4b33      	ldr	r3, [pc, #204]	@ (8000ca8 <HAL_RCC_OscConfig+0x280>)
 8000bda:	68db      	ldr	r3, [r3, #12]
 8000bdc:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	6a1b      	ldr	r3, [r3, #32]
 8000be4:	03db      	lsls	r3, r3, #15
 8000be6:	4930      	ldr	r1, [pc, #192]	@ (8000ca8 <HAL_RCC_OscConfig+0x280>)
 8000be8:	4313      	orrs	r3, r2
 8000bea:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8000bec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d10a      	bne.n	8000c08 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f001 f94c 	bl	8001e94 <RCC_SetFlashLatencyFromMSIRange>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d002      	beq.n	8000c08 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 8000c02:	2301      	movs	r3, #1
 8000c04:	f000 bde5 	b.w	80017d2 <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8000c08:	f001 f8de 	bl	8001dc8 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000c0c:	4b27      	ldr	r3, [pc, #156]	@ (8000cac <HAL_RCC_OscConfig+0x284>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	4618      	mov	r0, r3
 8000c12:	f7ff fbcd 	bl	80003b0 <HAL_InitTick>
 8000c16:	4603      	mov	r3, r0
 8000c18:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 8000c1c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	f000 808a 	beq.w	8000d3a <HAL_RCC_OscConfig+0x312>
        {
          return status;
 8000c26:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000c2a:	f000 bdd2 	b.w	80017d2 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	69db      	ldr	r3, [r3, #28]
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d066      	beq.n	8000d04 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8000c36:	4b1c      	ldr	r3, [pc, #112]	@ (8000ca8 <HAL_RCC_OscConfig+0x280>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	4a1b      	ldr	r2, [pc, #108]	@ (8000ca8 <HAL_RCC_OscConfig+0x280>)
 8000c3c:	f043 0301 	orr.w	r3, r3, #1
 8000c40:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8000c42:	f7ff fcf1 	bl	8000628 <HAL_GetTick>
 8000c46:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8000c48:	e009      	b.n	8000c5e <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000c4a:	f7ff fced 	bl	8000628 <HAL_GetTick>
 8000c4e:	4602      	mov	r2, r0
 8000c50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000c52:	1ad3      	subs	r3, r2, r3
 8000c54:	2b02      	cmp	r3, #2
 8000c56:	d902      	bls.n	8000c5e <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 8000c58:	2303      	movs	r3, #3
 8000c5a:	f000 bdba 	b.w	80017d2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8000c5e:	4b12      	ldr	r3, [pc, #72]	@ (8000ca8 <HAL_RCC_OscConfig+0x280>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	f003 0304 	and.w	r3, r3, #4
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d0ef      	beq.n	8000c4a <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8000c6a:	4b0f      	ldr	r3, [pc, #60]	@ (8000ca8 <HAL_RCC_OscConfig+0x280>)
 8000c6c:	689b      	ldr	r3, [r3, #8]
 8000c6e:	4a0e      	ldr	r2, [pc, #56]	@ (8000ca8 <HAL_RCC_OscConfig+0x280>)
 8000c70:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000c74:	6093      	str	r3, [r2, #8]
 8000c76:	4b0c      	ldr	r3, [pc, #48]	@ (8000ca8 <HAL_RCC_OscConfig+0x280>)
 8000c78:	689b      	ldr	r3, [r3, #8]
 8000c7a:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c82:	4909      	ldr	r1, [pc, #36]	@ (8000ca8 <HAL_RCC_OscConfig+0x280>)
 8000c84:	4313      	orrs	r3, r2
 8000c86:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c8c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8000c90:	d30e      	bcc.n	8000cb0 <HAL_RCC_OscConfig+0x288>
 8000c92:	4b05      	ldr	r3, [pc, #20]	@ (8000ca8 <HAL_RCC_OscConfig+0x280>)
 8000c94:	68db      	ldr	r3, [r3, #12]
 8000c96:	f023 021f 	bic.w	r2, r3, #31
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	6a1b      	ldr	r3, [r3, #32]
 8000c9e:	4902      	ldr	r1, [pc, #8]	@ (8000ca8 <HAL_RCC_OscConfig+0x280>)
 8000ca0:	4313      	orrs	r3, r2
 8000ca2:	60cb      	str	r3, [r1, #12]
 8000ca4:	e04a      	b.n	8000d3c <HAL_RCC_OscConfig+0x314>
 8000ca6:	bf00      	nop
 8000ca8:	46020c00 	.word	0x46020c00
 8000cac:	20000004 	.word	0x20000004
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	da0a      	bge.n	8000cce <HAL_RCC_OscConfig+0x2a6>
 8000cb8:	4b98      	ldr	r3, [pc, #608]	@ (8000f1c <HAL_RCC_OscConfig+0x4f4>)
 8000cba:	68db      	ldr	r3, [r3, #12]
 8000cbc:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	6a1b      	ldr	r3, [r3, #32]
 8000cc4:	015b      	lsls	r3, r3, #5
 8000cc6:	4995      	ldr	r1, [pc, #596]	@ (8000f1c <HAL_RCC_OscConfig+0x4f4>)
 8000cc8:	4313      	orrs	r3, r2
 8000cca:	60cb      	str	r3, [r1, #12]
 8000ccc:	e036      	b.n	8000d3c <HAL_RCC_OscConfig+0x314>
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000cd2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000cd6:	d30a      	bcc.n	8000cee <HAL_RCC_OscConfig+0x2c6>
 8000cd8:	4b90      	ldr	r3, [pc, #576]	@ (8000f1c <HAL_RCC_OscConfig+0x4f4>)
 8000cda:	68db      	ldr	r3, [r3, #12]
 8000cdc:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	6a1b      	ldr	r3, [r3, #32]
 8000ce4:	029b      	lsls	r3, r3, #10
 8000ce6:	498d      	ldr	r1, [pc, #564]	@ (8000f1c <HAL_RCC_OscConfig+0x4f4>)
 8000ce8:	4313      	orrs	r3, r2
 8000cea:	60cb      	str	r3, [r1, #12]
 8000cec:	e026      	b.n	8000d3c <HAL_RCC_OscConfig+0x314>
 8000cee:	4b8b      	ldr	r3, [pc, #556]	@ (8000f1c <HAL_RCC_OscConfig+0x4f4>)
 8000cf0:	68db      	ldr	r3, [r3, #12]
 8000cf2:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	6a1b      	ldr	r3, [r3, #32]
 8000cfa:	03db      	lsls	r3, r3, #15
 8000cfc:	4987      	ldr	r1, [pc, #540]	@ (8000f1c <HAL_RCC_OscConfig+0x4f4>)
 8000cfe:	4313      	orrs	r3, r2
 8000d00:	60cb      	str	r3, [r1, #12]
 8000d02:	e01b      	b.n	8000d3c <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8000d04:	4b85      	ldr	r3, [pc, #532]	@ (8000f1c <HAL_RCC_OscConfig+0x4f4>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	4a84      	ldr	r2, [pc, #528]	@ (8000f1c <HAL_RCC_OscConfig+0x4f4>)
 8000d0a:	f023 0301 	bic.w	r3, r3, #1
 8000d0e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8000d10:	f7ff fc8a 	bl	8000628 <HAL_GetTick>
 8000d14:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8000d16:	e009      	b.n	8000d2c <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000d18:	f7ff fc86 	bl	8000628 <HAL_GetTick>
 8000d1c:	4602      	mov	r2, r0
 8000d1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d20:	1ad3      	subs	r3, r2, r3
 8000d22:	2b02      	cmp	r3, #2
 8000d24:	d902      	bls.n	8000d2c <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 8000d26:	2303      	movs	r3, #3
 8000d28:	f000 bd53 	b.w	80017d2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8000d2c:	4b7b      	ldr	r3, [pc, #492]	@ (8000f1c <HAL_RCC_OscConfig+0x4f4>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	f003 0304 	and.w	r3, r3, #4
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d1ef      	bne.n	8000d18 <HAL_RCC_OscConfig+0x2f0>
 8000d38:	e000      	b.n	8000d3c <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8000d3a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	f003 0301 	and.w	r3, r3, #1
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	f000 808b 	beq.w	8000e60 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8000d4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000d4c:	2b08      	cmp	r3, #8
 8000d4e:	d005      	beq.n	8000d5c <HAL_RCC_OscConfig+0x334>
 8000d50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000d52:	2b0c      	cmp	r3, #12
 8000d54:	d109      	bne.n	8000d6a <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000d56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000d58:	2b03      	cmp	r3, #3
 8000d5a:	d106      	bne.n	8000d6a <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	685b      	ldr	r3, [r3, #4]
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d17d      	bne.n	8000e60 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8000d64:	2301      	movs	r3, #1
 8000d66:	f000 bd34 	b.w	80017d2 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	685b      	ldr	r3, [r3, #4]
 8000d6e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000d72:	d106      	bne.n	8000d82 <HAL_RCC_OscConfig+0x35a>
 8000d74:	4b69      	ldr	r3, [pc, #420]	@ (8000f1c <HAL_RCC_OscConfig+0x4f4>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4a68      	ldr	r2, [pc, #416]	@ (8000f1c <HAL_RCC_OscConfig+0x4f4>)
 8000d7a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000d7e:	6013      	str	r3, [r2, #0]
 8000d80:	e041      	b.n	8000e06 <HAL_RCC_OscConfig+0x3de>
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	685b      	ldr	r3, [r3, #4]
 8000d86:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000d8a:	d112      	bne.n	8000db2 <HAL_RCC_OscConfig+0x38a>
 8000d8c:	4b63      	ldr	r3, [pc, #396]	@ (8000f1c <HAL_RCC_OscConfig+0x4f4>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4a62      	ldr	r2, [pc, #392]	@ (8000f1c <HAL_RCC_OscConfig+0x4f4>)
 8000d92:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000d96:	6013      	str	r3, [r2, #0]
 8000d98:	4b60      	ldr	r3, [pc, #384]	@ (8000f1c <HAL_RCC_OscConfig+0x4f4>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4a5f      	ldr	r2, [pc, #380]	@ (8000f1c <HAL_RCC_OscConfig+0x4f4>)
 8000d9e:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8000da2:	6013      	str	r3, [r2, #0]
 8000da4:	4b5d      	ldr	r3, [pc, #372]	@ (8000f1c <HAL_RCC_OscConfig+0x4f4>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	4a5c      	ldr	r2, [pc, #368]	@ (8000f1c <HAL_RCC_OscConfig+0x4f4>)
 8000daa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000dae:	6013      	str	r3, [r2, #0]
 8000db0:	e029      	b.n	8000e06 <HAL_RCC_OscConfig+0x3de>
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	685b      	ldr	r3, [r3, #4]
 8000db6:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8000dba:	d112      	bne.n	8000de2 <HAL_RCC_OscConfig+0x3ba>
 8000dbc:	4b57      	ldr	r3, [pc, #348]	@ (8000f1c <HAL_RCC_OscConfig+0x4f4>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4a56      	ldr	r2, [pc, #344]	@ (8000f1c <HAL_RCC_OscConfig+0x4f4>)
 8000dc2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000dc6:	6013      	str	r3, [r2, #0]
 8000dc8:	4b54      	ldr	r3, [pc, #336]	@ (8000f1c <HAL_RCC_OscConfig+0x4f4>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4a53      	ldr	r2, [pc, #332]	@ (8000f1c <HAL_RCC_OscConfig+0x4f4>)
 8000dce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000dd2:	6013      	str	r3, [r2, #0]
 8000dd4:	4b51      	ldr	r3, [pc, #324]	@ (8000f1c <HAL_RCC_OscConfig+0x4f4>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a50      	ldr	r2, [pc, #320]	@ (8000f1c <HAL_RCC_OscConfig+0x4f4>)
 8000dda:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000dde:	6013      	str	r3, [r2, #0]
 8000de0:	e011      	b.n	8000e06 <HAL_RCC_OscConfig+0x3de>
 8000de2:	4b4e      	ldr	r3, [pc, #312]	@ (8000f1c <HAL_RCC_OscConfig+0x4f4>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	4a4d      	ldr	r2, [pc, #308]	@ (8000f1c <HAL_RCC_OscConfig+0x4f4>)
 8000de8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000dec:	6013      	str	r3, [r2, #0]
 8000dee:	4b4b      	ldr	r3, [pc, #300]	@ (8000f1c <HAL_RCC_OscConfig+0x4f4>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	4a4a      	ldr	r2, [pc, #296]	@ (8000f1c <HAL_RCC_OscConfig+0x4f4>)
 8000df4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000df8:	6013      	str	r3, [r2, #0]
 8000dfa:	4b48      	ldr	r3, [pc, #288]	@ (8000f1c <HAL_RCC_OscConfig+0x4f4>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	4a47      	ldr	r2, [pc, #284]	@ (8000f1c <HAL_RCC_OscConfig+0x4f4>)
 8000e00:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8000e04:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	685b      	ldr	r3, [r3, #4]
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d014      	beq.n	8000e38 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 8000e0e:	f7ff fc0b 	bl	8000628 <HAL_GetTick>
 8000e12:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000e14:	e009      	b.n	8000e2a <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e16:	f7ff fc07 	bl	8000628 <HAL_GetTick>
 8000e1a:	4602      	mov	r2, r0
 8000e1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e1e:	1ad3      	subs	r3, r2, r3
 8000e20:	2b64      	cmp	r3, #100	@ 0x64
 8000e22:	d902      	bls.n	8000e2a <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 8000e24:	2303      	movs	r3, #3
 8000e26:	f000 bcd4 	b.w	80017d2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000e2a:	4b3c      	ldr	r3, [pc, #240]	@ (8000f1c <HAL_RCC_OscConfig+0x4f4>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d0ef      	beq.n	8000e16 <HAL_RCC_OscConfig+0x3ee>
 8000e36:	e013      	b.n	8000e60 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8000e38:	f7ff fbf6 	bl	8000628 <HAL_GetTick>
 8000e3c:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000e3e:	e009      	b.n	8000e54 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e40:	f7ff fbf2 	bl	8000628 <HAL_GetTick>
 8000e44:	4602      	mov	r2, r0
 8000e46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e48:	1ad3      	subs	r3, r2, r3
 8000e4a:	2b64      	cmp	r3, #100	@ 0x64
 8000e4c:	d902      	bls.n	8000e54 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8000e4e:	2303      	movs	r3, #3
 8000e50:	f000 bcbf 	b.w	80017d2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000e54:	4b31      	ldr	r3, [pc, #196]	@ (8000f1c <HAL_RCC_OscConfig+0x4f4>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d1ef      	bne.n	8000e40 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	f003 0302 	and.w	r3, r3, #2
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d05f      	beq.n	8000f2c <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8000e6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000e6e:	2b04      	cmp	r3, #4
 8000e70:	d005      	beq.n	8000e7e <HAL_RCC_OscConfig+0x456>
 8000e72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000e74:	2b0c      	cmp	r3, #12
 8000e76:	d114      	bne.n	8000ea2 <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000e78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e7a:	2b02      	cmp	r3, #2
 8000e7c:	d111      	bne.n	8000ea2 <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	68db      	ldr	r3, [r3, #12]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d102      	bne.n	8000e8c <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 8000e86:	2301      	movs	r3, #1
 8000e88:	f000 bca3 	b.w	80017d2 <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8000e8c:	4b23      	ldr	r3, [pc, #140]	@ (8000f1c <HAL_RCC_OscConfig+0x4f4>)
 8000e8e:	691b      	ldr	r3, [r3, #16]
 8000e90:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	691b      	ldr	r3, [r3, #16]
 8000e98:	041b      	lsls	r3, r3, #16
 8000e9a:	4920      	ldr	r1, [pc, #128]	@ (8000f1c <HAL_RCC_OscConfig+0x4f4>)
 8000e9c:	4313      	orrs	r3, r2
 8000e9e:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8000ea0:	e044      	b.n	8000f2c <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	68db      	ldr	r3, [r3, #12]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d024      	beq.n	8000ef4 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8000eaa:	4b1c      	ldr	r3, [pc, #112]	@ (8000f1c <HAL_RCC_OscConfig+0x4f4>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	4a1b      	ldr	r2, [pc, #108]	@ (8000f1c <HAL_RCC_OscConfig+0x4f4>)
 8000eb0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000eb4:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8000eb6:	f7ff fbb7 	bl	8000628 <HAL_GetTick>
 8000eba:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000ebc:	e009      	b.n	8000ed2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000ebe:	f7ff fbb3 	bl	8000628 <HAL_GetTick>
 8000ec2:	4602      	mov	r2, r0
 8000ec4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000ec6:	1ad3      	subs	r3, r2, r3
 8000ec8:	2b02      	cmp	r3, #2
 8000eca:	d902      	bls.n	8000ed2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8000ecc:	2303      	movs	r3, #3
 8000ece:	f000 bc80 	b.w	80017d2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000ed2:	4b12      	ldr	r3, [pc, #72]	@ (8000f1c <HAL_RCC_OscConfig+0x4f4>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d0ef      	beq.n	8000ebe <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8000ede:	4b0f      	ldr	r3, [pc, #60]	@ (8000f1c <HAL_RCC_OscConfig+0x4f4>)
 8000ee0:	691b      	ldr	r3, [r3, #16]
 8000ee2:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	691b      	ldr	r3, [r3, #16]
 8000eea:	041b      	lsls	r3, r3, #16
 8000eec:	490b      	ldr	r1, [pc, #44]	@ (8000f1c <HAL_RCC_OscConfig+0x4f4>)
 8000eee:	4313      	orrs	r3, r2
 8000ef0:	610b      	str	r3, [r1, #16]
 8000ef2:	e01b      	b.n	8000f2c <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8000ef4:	4b09      	ldr	r3, [pc, #36]	@ (8000f1c <HAL_RCC_OscConfig+0x4f4>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4a08      	ldr	r2, [pc, #32]	@ (8000f1c <HAL_RCC_OscConfig+0x4f4>)
 8000efa:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000efe:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8000f00:	f7ff fb92 	bl	8000628 <HAL_GetTick>
 8000f04:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000f06:	e00b      	b.n	8000f20 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f08:	f7ff fb8e 	bl	8000628 <HAL_GetTick>
 8000f0c:	4602      	mov	r2, r0
 8000f0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f10:	1ad3      	subs	r3, r2, r3
 8000f12:	2b02      	cmp	r3, #2
 8000f14:	d904      	bls.n	8000f20 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 8000f16:	2303      	movs	r3, #3
 8000f18:	f000 bc5b 	b.w	80017d2 <HAL_RCC_OscConfig+0xdaa>
 8000f1c:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000f20:	4baf      	ldr	r3, [pc, #700]	@ (80011e0 <HAL_RCC_OscConfig+0x7b8>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d1ed      	bne.n	8000f08 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	f003 0308 	and.w	r3, r3, #8
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	f000 80c8 	beq.w	80010ca <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f40:	4ba7      	ldr	r3, [pc, #668]	@ (80011e0 <HAL_RCC_OscConfig+0x7b8>)
 8000f42:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000f46:	f003 0304 	and.w	r3, r3, #4
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d111      	bne.n	8000f72 <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f4e:	4ba4      	ldr	r3, [pc, #656]	@ (80011e0 <HAL_RCC_OscConfig+0x7b8>)
 8000f50:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000f54:	4aa2      	ldr	r2, [pc, #648]	@ (80011e0 <HAL_RCC_OscConfig+0x7b8>)
 8000f56:	f043 0304 	orr.w	r3, r3, #4
 8000f5a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8000f5e:	4ba0      	ldr	r3, [pc, #640]	@ (80011e0 <HAL_RCC_OscConfig+0x7b8>)
 8000f60:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000f64:	f003 0304 	and.w	r3, r3, #4
 8000f68:	617b      	str	r3, [r7, #20]
 8000f6a:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8000f72:	4b9c      	ldr	r3, [pc, #624]	@ (80011e4 <HAL_RCC_OscConfig+0x7bc>)
 8000f74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f76:	f003 0301 	and.w	r3, r3, #1
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d119      	bne.n	8000fb2 <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8000f7e:	4b99      	ldr	r3, [pc, #612]	@ (80011e4 <HAL_RCC_OscConfig+0x7bc>)
 8000f80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f82:	4a98      	ldr	r2, [pc, #608]	@ (80011e4 <HAL_RCC_OscConfig+0x7bc>)
 8000f84:	f043 0301 	orr.w	r3, r3, #1
 8000f88:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000f8a:	f7ff fb4d 	bl	8000628 <HAL_GetTick>
 8000f8e:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8000f90:	e009      	b.n	8000fa6 <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f92:	f7ff fb49 	bl	8000628 <HAL_GetTick>
 8000f96:	4602      	mov	r2, r0
 8000f98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f9a:	1ad3      	subs	r3, r2, r3
 8000f9c:	2b02      	cmp	r3, #2
 8000f9e:	d902      	bls.n	8000fa6 <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8000fa0:	2303      	movs	r3, #3
 8000fa2:	f000 bc16 	b.w	80017d2 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8000fa6:	4b8f      	ldr	r3, [pc, #572]	@ (80011e4 <HAL_RCC_OscConfig+0x7bc>)
 8000fa8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000faa:	f003 0301 	and.w	r3, r3, #1
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d0ef      	beq.n	8000f92 <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	695b      	ldr	r3, [r3, #20]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d05f      	beq.n	800107a <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8000fba:	4b89      	ldr	r3, [pc, #548]	@ (80011e0 <HAL_RCC_OscConfig+0x7b8>)
 8000fbc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000fc0:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	699a      	ldr	r2, [r3, #24]
 8000fc6:	6a3b      	ldr	r3, [r7, #32]
 8000fc8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fcc:	429a      	cmp	r2, r3
 8000fce:	d037      	beq.n	8001040 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8000fd0:	6a3b      	ldr	r3, [r7, #32]
 8000fd2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d006      	beq.n	8000fe8 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8000fda:	6a3b      	ldr	r3, [r7, #32]
 8000fdc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d101      	bne.n	8000fe8 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	e3f4      	b.n	80017d2 <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8000fe8:	6a3b      	ldr	r3, [r7, #32]
 8000fea:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d01b      	beq.n	800102a <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 8000ff2:	4b7b      	ldr	r3, [pc, #492]	@ (80011e0 <HAL_RCC_OscConfig+0x7b8>)
 8000ff4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000ff8:	4a79      	ldr	r2, [pc, #484]	@ (80011e0 <HAL_RCC_OscConfig+0x7b8>)
 8000ffa:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8000ffe:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 8001002:	f7ff fb11 	bl	8000628 <HAL_GetTick>
 8001006:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001008:	e008      	b.n	800101c <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800100a:	f7ff fb0d 	bl	8000628 <HAL_GetTick>
 800100e:	4602      	mov	r2, r0
 8001010:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001012:	1ad3      	subs	r3, r2, r3
 8001014:	2b05      	cmp	r3, #5
 8001016:	d901      	bls.n	800101c <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 8001018:	2303      	movs	r3, #3
 800101a:	e3da      	b.n	80017d2 <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800101c:	4b70      	ldr	r3, [pc, #448]	@ (80011e0 <HAL_RCC_OscConfig+0x7b8>)
 800101e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001022:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001026:	2b00      	cmp	r3, #0
 8001028:	d1ef      	bne.n	800100a <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 800102a:	4b6d      	ldr	r3, [pc, #436]	@ (80011e0 <HAL_RCC_OscConfig+0x7b8>)
 800102c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001030:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	699b      	ldr	r3, [r3, #24]
 8001038:	4969      	ldr	r1, [pc, #420]	@ (80011e0 <HAL_RCC_OscConfig+0x7b8>)
 800103a:	4313      	orrs	r3, r2
 800103c:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8001040:	4b67      	ldr	r3, [pc, #412]	@ (80011e0 <HAL_RCC_OscConfig+0x7b8>)
 8001042:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001046:	4a66      	ldr	r2, [pc, #408]	@ (80011e0 <HAL_RCC_OscConfig+0x7b8>)
 8001048:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800104c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8001050:	f7ff faea 	bl	8000628 <HAL_GetTick>
 8001054:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8001056:	e008      	b.n	800106a <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001058:	f7ff fae6 	bl	8000628 <HAL_GetTick>
 800105c:	4602      	mov	r2, r0
 800105e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001060:	1ad3      	subs	r3, r2, r3
 8001062:	2b05      	cmp	r3, #5
 8001064:	d901      	bls.n	800106a <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 8001066:	2303      	movs	r3, #3
 8001068:	e3b3      	b.n	80017d2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800106a:	4b5d      	ldr	r3, [pc, #372]	@ (80011e0 <HAL_RCC_OscConfig+0x7b8>)
 800106c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001070:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001074:	2b00      	cmp	r3, #0
 8001076:	d0ef      	beq.n	8001058 <HAL_RCC_OscConfig+0x630>
 8001078:	e01b      	b.n	80010b2 <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 800107a:	4b59      	ldr	r3, [pc, #356]	@ (80011e0 <HAL_RCC_OscConfig+0x7b8>)
 800107c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001080:	4a57      	ldr	r2, [pc, #348]	@ (80011e0 <HAL_RCC_OscConfig+0x7b8>)
 8001082:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8001086:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 800108a:	f7ff facd 	bl	8000628 <HAL_GetTick>
 800108e:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001090:	e008      	b.n	80010a4 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001092:	f7ff fac9 	bl	8000628 <HAL_GetTick>
 8001096:	4602      	mov	r2, r0
 8001098:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800109a:	1ad3      	subs	r3, r2, r3
 800109c:	2b05      	cmp	r3, #5
 800109e:	d901      	bls.n	80010a4 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 80010a0:	2303      	movs	r3, #3
 80010a2:	e396      	b.n	80017d2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80010a4:	4b4e      	ldr	r3, [pc, #312]	@ (80011e0 <HAL_RCC_OscConfig+0x7b8>)
 80010a6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80010aa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d1ef      	bne.n	8001092 <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80010b2:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80010b6:	2b01      	cmp	r3, #1
 80010b8:	d107      	bne.n	80010ca <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80010ba:	4b49      	ldr	r3, [pc, #292]	@ (80011e0 <HAL_RCC_OscConfig+0x7b8>)
 80010bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80010c0:	4a47      	ldr	r2, [pc, #284]	@ (80011e0 <HAL_RCC_OscConfig+0x7b8>)
 80010c2:	f023 0304 	bic.w	r3, r3, #4
 80010c6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f003 0304 	and.w	r3, r3, #4
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	f000 8111 	beq.w	80012fa <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 80010d8:	2300      	movs	r3, #0
 80010da:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80010de:	4b40      	ldr	r3, [pc, #256]	@ (80011e0 <HAL_RCC_OscConfig+0x7b8>)
 80010e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80010e4:	f003 0304 	and.w	r3, r3, #4
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d111      	bne.n	8001110 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80010ec:	4b3c      	ldr	r3, [pc, #240]	@ (80011e0 <HAL_RCC_OscConfig+0x7b8>)
 80010ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80010f2:	4a3b      	ldr	r2, [pc, #236]	@ (80011e0 <HAL_RCC_OscConfig+0x7b8>)
 80010f4:	f043 0304 	orr.w	r3, r3, #4
 80010f8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80010fc:	4b38      	ldr	r3, [pc, #224]	@ (80011e0 <HAL_RCC_OscConfig+0x7b8>)
 80010fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001102:	f003 0304 	and.w	r3, r3, #4
 8001106:	613b      	str	r3, [r7, #16]
 8001108:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 800110a:	2301      	movs	r3, #1
 800110c:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001110:	4b34      	ldr	r3, [pc, #208]	@ (80011e4 <HAL_RCC_OscConfig+0x7bc>)
 8001112:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001114:	f003 0301 	and.w	r3, r3, #1
 8001118:	2b00      	cmp	r3, #0
 800111a:	d118      	bne.n	800114e <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800111c:	4b31      	ldr	r3, [pc, #196]	@ (80011e4 <HAL_RCC_OscConfig+0x7bc>)
 800111e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001120:	4a30      	ldr	r2, [pc, #192]	@ (80011e4 <HAL_RCC_OscConfig+0x7bc>)
 8001122:	f043 0301 	orr.w	r3, r3, #1
 8001126:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001128:	f7ff fa7e 	bl	8000628 <HAL_GetTick>
 800112c:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800112e:	e008      	b.n	8001142 <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001130:	f7ff fa7a 	bl	8000628 <HAL_GetTick>
 8001134:	4602      	mov	r2, r0
 8001136:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001138:	1ad3      	subs	r3, r2, r3
 800113a:	2b02      	cmp	r3, #2
 800113c:	d901      	bls.n	8001142 <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 800113e:	2303      	movs	r3, #3
 8001140:	e347      	b.n	80017d2 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001142:	4b28      	ldr	r3, [pc, #160]	@ (80011e4 <HAL_RCC_OscConfig+0x7bc>)
 8001144:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001146:	f003 0301 	and.w	r3, r3, #1
 800114a:	2b00      	cmp	r3, #0
 800114c:	d0f0      	beq.n	8001130 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	689b      	ldr	r3, [r3, #8]
 8001152:	f003 0301 	and.w	r3, r3, #1
 8001156:	2b00      	cmp	r3, #0
 8001158:	d01f      	beq.n	800119a <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	689b      	ldr	r3, [r3, #8]
 800115e:	f003 0304 	and.w	r3, r3, #4
 8001162:	2b00      	cmp	r3, #0
 8001164:	d010      	beq.n	8001188 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001166:	4b1e      	ldr	r3, [pc, #120]	@ (80011e0 <HAL_RCC_OscConfig+0x7b8>)
 8001168:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800116c:	4a1c      	ldr	r2, [pc, #112]	@ (80011e0 <HAL_RCC_OscConfig+0x7b8>)
 800116e:	f043 0304 	orr.w	r3, r3, #4
 8001172:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001176:	4b1a      	ldr	r3, [pc, #104]	@ (80011e0 <HAL_RCC_OscConfig+0x7b8>)
 8001178:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800117c:	4a18      	ldr	r2, [pc, #96]	@ (80011e0 <HAL_RCC_OscConfig+0x7b8>)
 800117e:	f043 0301 	orr.w	r3, r3, #1
 8001182:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001186:	e018      	b.n	80011ba <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001188:	4b15      	ldr	r3, [pc, #84]	@ (80011e0 <HAL_RCC_OscConfig+0x7b8>)
 800118a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800118e:	4a14      	ldr	r2, [pc, #80]	@ (80011e0 <HAL_RCC_OscConfig+0x7b8>)
 8001190:	f043 0301 	orr.w	r3, r3, #1
 8001194:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001198:	e00f      	b.n	80011ba <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800119a:	4b11      	ldr	r3, [pc, #68]	@ (80011e0 <HAL_RCC_OscConfig+0x7b8>)
 800119c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80011a0:	4a0f      	ldr	r2, [pc, #60]	@ (80011e0 <HAL_RCC_OscConfig+0x7b8>)
 80011a2:	f023 0301 	bic.w	r3, r3, #1
 80011a6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80011aa:	4b0d      	ldr	r3, [pc, #52]	@ (80011e0 <HAL_RCC_OscConfig+0x7b8>)
 80011ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80011b0:	4a0b      	ldr	r2, [pc, #44]	@ (80011e0 <HAL_RCC_OscConfig+0x7b8>)
 80011b2:	f023 0304 	bic.w	r3, r3, #4
 80011b6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	689b      	ldr	r3, [r3, #8]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d057      	beq.n	8001272 <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 80011c2:	f7ff fa31 	bl	8000628 <HAL_GetTick>
 80011c6:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80011c8:	e00e      	b.n	80011e8 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011ca:	f7ff fa2d 	bl	8000628 <HAL_GetTick>
 80011ce:	4602      	mov	r2, r0
 80011d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80011d2:	1ad3      	subs	r3, r2, r3
 80011d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80011d8:	4293      	cmp	r3, r2
 80011da:	d905      	bls.n	80011e8 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 80011dc:	2303      	movs	r3, #3
 80011de:	e2f8      	b.n	80017d2 <HAL_RCC_OscConfig+0xdaa>
 80011e0:	46020c00 	.word	0x46020c00
 80011e4:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80011e8:	4b9c      	ldr	r3, [pc, #624]	@ (800145c <HAL_RCC_OscConfig+0xa34>)
 80011ea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80011ee:	f003 0302 	and.w	r3, r3, #2
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d0e9      	beq.n	80011ca <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	689b      	ldr	r3, [r3, #8]
 80011fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d01b      	beq.n	800123a <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001202:	4b96      	ldr	r3, [pc, #600]	@ (800145c <HAL_RCC_OscConfig+0xa34>)
 8001204:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001208:	4a94      	ldr	r2, [pc, #592]	@ (800145c <HAL_RCC_OscConfig+0xa34>)
 800120a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800120e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001212:	e00a      	b.n	800122a <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001214:	f7ff fa08 	bl	8000628 <HAL_GetTick>
 8001218:	4602      	mov	r2, r0
 800121a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800121c:	1ad3      	subs	r3, r2, r3
 800121e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001222:	4293      	cmp	r3, r2
 8001224:	d901      	bls.n	800122a <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 8001226:	2303      	movs	r3, #3
 8001228:	e2d3      	b.n	80017d2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800122a:	4b8c      	ldr	r3, [pc, #560]	@ (800145c <HAL_RCC_OscConfig+0xa34>)
 800122c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001230:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001234:	2b00      	cmp	r3, #0
 8001236:	d0ed      	beq.n	8001214 <HAL_RCC_OscConfig+0x7ec>
 8001238:	e053      	b.n	80012e2 <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800123a:	4b88      	ldr	r3, [pc, #544]	@ (800145c <HAL_RCC_OscConfig+0xa34>)
 800123c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001240:	4a86      	ldr	r2, [pc, #536]	@ (800145c <HAL_RCC_OscConfig+0xa34>)
 8001242:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001246:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800124a:	e00a      	b.n	8001262 <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800124c:	f7ff f9ec 	bl	8000628 <HAL_GetTick>
 8001250:	4602      	mov	r2, r0
 8001252:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001254:	1ad3      	subs	r3, r2, r3
 8001256:	f241 3288 	movw	r2, #5000	@ 0x1388
 800125a:	4293      	cmp	r3, r2
 800125c:	d901      	bls.n	8001262 <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 800125e:	2303      	movs	r3, #3
 8001260:	e2b7      	b.n	80017d2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001262:	4b7e      	ldr	r3, [pc, #504]	@ (800145c <HAL_RCC_OscConfig+0xa34>)
 8001264:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001268:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800126c:	2b00      	cmp	r3, #0
 800126e:	d1ed      	bne.n	800124c <HAL_RCC_OscConfig+0x824>
 8001270:	e037      	b.n	80012e2 <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8001272:	f7ff f9d9 	bl	8000628 <HAL_GetTick>
 8001276:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001278:	e00a      	b.n	8001290 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800127a:	f7ff f9d5 	bl	8000628 <HAL_GetTick>
 800127e:	4602      	mov	r2, r0
 8001280:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001282:	1ad3      	subs	r3, r2, r3
 8001284:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001288:	4293      	cmp	r3, r2
 800128a:	d901      	bls.n	8001290 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 800128c:	2303      	movs	r3, #3
 800128e:	e2a0      	b.n	80017d2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001290:	4b72      	ldr	r3, [pc, #456]	@ (800145c <HAL_RCC_OscConfig+0xa34>)
 8001292:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001296:	f003 0302 	and.w	r3, r3, #2
 800129a:	2b00      	cmp	r3, #0
 800129c:	d1ed      	bne.n	800127a <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 800129e:	4b6f      	ldr	r3, [pc, #444]	@ (800145c <HAL_RCC_OscConfig+0xa34>)
 80012a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80012a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d01a      	beq.n	80012e2 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80012ac:	4b6b      	ldr	r3, [pc, #428]	@ (800145c <HAL_RCC_OscConfig+0xa34>)
 80012ae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80012b2:	4a6a      	ldr	r2, [pc, #424]	@ (800145c <HAL_RCC_OscConfig+0xa34>)
 80012b4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80012b8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80012bc:	e00a      	b.n	80012d4 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012be:	f7ff f9b3 	bl	8000628 <HAL_GetTick>
 80012c2:	4602      	mov	r2, r0
 80012c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80012c6:	1ad3      	subs	r3, r2, r3
 80012c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80012cc:	4293      	cmp	r3, r2
 80012ce:	d901      	bls.n	80012d4 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 80012d0:	2303      	movs	r3, #3
 80012d2:	e27e      	b.n	80017d2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80012d4:	4b61      	ldr	r3, [pc, #388]	@ (800145c <HAL_RCC_OscConfig+0xa34>)
 80012d6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80012da:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d1ed      	bne.n	80012be <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80012e2:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80012e6:	2b01      	cmp	r3, #1
 80012e8:	d107      	bne.n	80012fa <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80012ea:	4b5c      	ldr	r3, [pc, #368]	@ (800145c <HAL_RCC_OscConfig+0xa34>)
 80012ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80012f0:	4a5a      	ldr	r2, [pc, #360]	@ (800145c <HAL_RCC_OscConfig+0xa34>)
 80012f2:	f023 0304 	bic.w	r3, r3, #4
 80012f6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f003 0320 	and.w	r3, r3, #32
 8001302:	2b00      	cmp	r3, #0
 8001304:	d036      	beq.n	8001374 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800130a:	2b00      	cmp	r3, #0
 800130c:	d019      	beq.n	8001342 <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 800130e:	4b53      	ldr	r3, [pc, #332]	@ (800145c <HAL_RCC_OscConfig+0xa34>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4a52      	ldr	r2, [pc, #328]	@ (800145c <HAL_RCC_OscConfig+0xa34>)
 8001314:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001318:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800131a:	f7ff f985 	bl	8000628 <HAL_GetTick>
 800131e:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001320:	e008      	b.n	8001334 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001322:	f7ff f981 	bl	8000628 <HAL_GetTick>
 8001326:	4602      	mov	r2, r0
 8001328:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800132a:	1ad3      	subs	r3, r2, r3
 800132c:	2b02      	cmp	r3, #2
 800132e:	d901      	bls.n	8001334 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 8001330:	2303      	movs	r3, #3
 8001332:	e24e      	b.n	80017d2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001334:	4b49      	ldr	r3, [pc, #292]	@ (800145c <HAL_RCC_OscConfig+0xa34>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800133c:	2b00      	cmp	r3, #0
 800133e:	d0f0      	beq.n	8001322 <HAL_RCC_OscConfig+0x8fa>
 8001340:	e018      	b.n	8001374 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8001342:	4b46      	ldr	r3, [pc, #280]	@ (800145c <HAL_RCC_OscConfig+0xa34>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4a45      	ldr	r2, [pc, #276]	@ (800145c <HAL_RCC_OscConfig+0xa34>)
 8001348:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800134c:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800134e:	f7ff f96b 	bl	8000628 <HAL_GetTick>
 8001352:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001354:	e008      	b.n	8001368 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001356:	f7ff f967 	bl	8000628 <HAL_GetTick>
 800135a:	4602      	mov	r2, r0
 800135c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800135e:	1ad3      	subs	r3, r2, r3
 8001360:	2b02      	cmp	r3, #2
 8001362:	d901      	bls.n	8001368 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 8001364:	2303      	movs	r3, #3
 8001366:	e234      	b.n	80017d2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001368:	4b3c      	ldr	r3, [pc, #240]	@ (800145c <HAL_RCC_OscConfig+0xa34>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001370:	2b00      	cmp	r3, #0
 8001372:	d1f0      	bne.n	8001356 <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800137c:	2b00      	cmp	r3, #0
 800137e:	d036      	beq.n	80013ee <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001384:	2b00      	cmp	r3, #0
 8001386:	d019      	beq.n	80013bc <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8001388:	4b34      	ldr	r3, [pc, #208]	@ (800145c <HAL_RCC_OscConfig+0xa34>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a33      	ldr	r2, [pc, #204]	@ (800145c <HAL_RCC_OscConfig+0xa34>)
 800138e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001392:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8001394:	f7ff f948 	bl	8000628 <HAL_GetTick>
 8001398:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800139a:	e008      	b.n	80013ae <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 800139c:	f7ff f944 	bl	8000628 <HAL_GetTick>
 80013a0:	4602      	mov	r2, r0
 80013a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80013a4:	1ad3      	subs	r3, r2, r3
 80013a6:	2b02      	cmp	r3, #2
 80013a8:	d901      	bls.n	80013ae <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 80013aa:	2303      	movs	r3, #3
 80013ac:	e211      	b.n	80017d2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 80013ae:	4b2b      	ldr	r3, [pc, #172]	@ (800145c <HAL_RCC_OscConfig+0xa34>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d0f0      	beq.n	800139c <HAL_RCC_OscConfig+0x974>
 80013ba:	e018      	b.n	80013ee <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 80013bc:	4b27      	ldr	r3, [pc, #156]	@ (800145c <HAL_RCC_OscConfig+0xa34>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a26      	ldr	r2, [pc, #152]	@ (800145c <HAL_RCC_OscConfig+0xa34>)
 80013c2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80013c6:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80013c8:	f7ff f92e 	bl	8000628 <HAL_GetTick>
 80013cc:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 80013ce:	e008      	b.n	80013e2 <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 80013d0:	f7ff f92a 	bl	8000628 <HAL_GetTick>
 80013d4:	4602      	mov	r2, r0
 80013d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80013d8:	1ad3      	subs	r3, r2, r3
 80013da:	2b02      	cmp	r3, #2
 80013dc:	d901      	bls.n	80013e2 <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 80013de:	2303      	movs	r3, #3
 80013e0:	e1f7      	b.n	80017d2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 80013e2:	4b1e      	ldr	r3, [pc, #120]	@ (800145c <HAL_RCC_OscConfig+0xa34>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d1f0      	bne.n	80013d0 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d07f      	beq.n	80014fa <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d062      	beq.n	80014c8 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8001402:	4b16      	ldr	r3, [pc, #88]	@ (800145c <HAL_RCC_OscConfig+0xa34>)
 8001404:	689b      	ldr	r3, [r3, #8]
 8001406:	4a15      	ldr	r2, [pc, #84]	@ (800145c <HAL_RCC_OscConfig+0xa34>)
 8001408:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800140c:	6093      	str	r3, [r2, #8]
 800140e:	4b13      	ldr	r3, [pc, #76]	@ (800145c <HAL_RCC_OscConfig+0xa34>)
 8001410:	689b      	ldr	r3, [r3, #8]
 8001412:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800141a:	4910      	ldr	r1, [pc, #64]	@ (800145c <HAL_RCC_OscConfig+0xa34>)
 800141c:	4313      	orrs	r3, r2
 800141e:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001424:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8001428:	d309      	bcc.n	800143e <HAL_RCC_OscConfig+0xa16>
 800142a:	4b0c      	ldr	r3, [pc, #48]	@ (800145c <HAL_RCC_OscConfig+0xa34>)
 800142c:	68db      	ldr	r3, [r3, #12]
 800142e:	f023 021f 	bic.w	r2, r3, #31
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6a1b      	ldr	r3, [r3, #32]
 8001436:	4909      	ldr	r1, [pc, #36]	@ (800145c <HAL_RCC_OscConfig+0xa34>)
 8001438:	4313      	orrs	r3, r2
 800143a:	60cb      	str	r3, [r1, #12]
 800143c:	e02a      	b.n	8001494 <HAL_RCC_OscConfig+0xa6c>
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001442:	2b00      	cmp	r3, #0
 8001444:	da0c      	bge.n	8001460 <HAL_RCC_OscConfig+0xa38>
 8001446:	4b05      	ldr	r3, [pc, #20]	@ (800145c <HAL_RCC_OscConfig+0xa34>)
 8001448:	68db      	ldr	r3, [r3, #12]
 800144a:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6a1b      	ldr	r3, [r3, #32]
 8001452:	015b      	lsls	r3, r3, #5
 8001454:	4901      	ldr	r1, [pc, #4]	@ (800145c <HAL_RCC_OscConfig+0xa34>)
 8001456:	4313      	orrs	r3, r2
 8001458:	60cb      	str	r3, [r1, #12]
 800145a:	e01b      	b.n	8001494 <HAL_RCC_OscConfig+0xa6c>
 800145c:	46020c00 	.word	0x46020c00
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001464:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001468:	d30a      	bcc.n	8001480 <HAL_RCC_OscConfig+0xa58>
 800146a:	4ba1      	ldr	r3, [pc, #644]	@ (80016f0 <HAL_RCC_OscConfig+0xcc8>)
 800146c:	68db      	ldr	r3, [r3, #12]
 800146e:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	6a1b      	ldr	r3, [r3, #32]
 8001476:	029b      	lsls	r3, r3, #10
 8001478:	499d      	ldr	r1, [pc, #628]	@ (80016f0 <HAL_RCC_OscConfig+0xcc8>)
 800147a:	4313      	orrs	r3, r2
 800147c:	60cb      	str	r3, [r1, #12]
 800147e:	e009      	b.n	8001494 <HAL_RCC_OscConfig+0xa6c>
 8001480:	4b9b      	ldr	r3, [pc, #620]	@ (80016f0 <HAL_RCC_OscConfig+0xcc8>)
 8001482:	68db      	ldr	r3, [r3, #12]
 8001484:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6a1b      	ldr	r3, [r3, #32]
 800148c:	03db      	lsls	r3, r3, #15
 800148e:	4998      	ldr	r1, [pc, #608]	@ (80016f0 <HAL_RCC_OscConfig+0xcc8>)
 8001490:	4313      	orrs	r3, r2
 8001492:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8001494:	4b96      	ldr	r3, [pc, #600]	@ (80016f0 <HAL_RCC_OscConfig+0xcc8>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a95      	ldr	r2, [pc, #596]	@ (80016f0 <HAL_RCC_OscConfig+0xcc8>)
 800149a:	f043 0310 	orr.w	r3, r3, #16
 800149e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80014a0:	f7ff f8c2 	bl	8000628 <HAL_GetTick>
 80014a4:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 80014a6:	e008      	b.n	80014ba <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 80014a8:	f7ff f8be 	bl	8000628 <HAL_GetTick>
 80014ac:	4602      	mov	r2, r0
 80014ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80014b0:	1ad3      	subs	r3, r2, r3
 80014b2:	2b02      	cmp	r3, #2
 80014b4:	d901      	bls.n	80014ba <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 80014b6:	2303      	movs	r3, #3
 80014b8:	e18b      	b.n	80017d2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 80014ba:	4b8d      	ldr	r3, [pc, #564]	@ (80016f0 <HAL_RCC_OscConfig+0xcc8>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f003 0320 	and.w	r3, r3, #32
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d0f0      	beq.n	80014a8 <HAL_RCC_OscConfig+0xa80>
 80014c6:	e018      	b.n	80014fa <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 80014c8:	4b89      	ldr	r3, [pc, #548]	@ (80016f0 <HAL_RCC_OscConfig+0xcc8>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a88      	ldr	r2, [pc, #544]	@ (80016f0 <HAL_RCC_OscConfig+0xcc8>)
 80014ce:	f023 0310 	bic.w	r3, r3, #16
 80014d2:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80014d4:	f7ff f8a8 	bl	8000628 <HAL_GetTick>
 80014d8:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 80014da:	e008      	b.n	80014ee <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 80014dc:	f7ff f8a4 	bl	8000628 <HAL_GetTick>
 80014e0:	4602      	mov	r2, r0
 80014e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80014e4:	1ad3      	subs	r3, r2, r3
 80014e6:	2b02      	cmp	r3, #2
 80014e8:	d901      	bls.n	80014ee <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 80014ea:	2303      	movs	r3, #3
 80014ec:	e171      	b.n	80017d2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 80014ee:	4b80      	ldr	r3, [pc, #512]	@ (80016f0 <HAL_RCC_OscConfig+0xcc8>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f003 0320 	and.w	r3, r3, #32
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d1f0      	bne.n	80014dc <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80014fe:	2b00      	cmp	r3, #0
 8001500:	f000 8166 	beq.w	80017d0 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 8001504:	2300      	movs	r3, #0
 8001506:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800150a:	4b79      	ldr	r3, [pc, #484]	@ (80016f0 <HAL_RCC_OscConfig+0xcc8>)
 800150c:	69db      	ldr	r3, [r3, #28]
 800150e:	f003 030c 	and.w	r3, r3, #12
 8001512:	2b0c      	cmp	r3, #12
 8001514:	f000 80f2 	beq.w	80016fc <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800151c:	2b02      	cmp	r3, #2
 800151e:	f040 80c5 	bne.w	80016ac <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8001522:	4b73      	ldr	r3, [pc, #460]	@ (80016f0 <HAL_RCC_OscConfig+0xcc8>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4a72      	ldr	r2, [pc, #456]	@ (80016f0 <HAL_RCC_OscConfig+0xcc8>)
 8001528:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800152c:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800152e:	f7ff f87b 	bl	8000628 <HAL_GetTick>
 8001532:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001534:	e008      	b.n	8001548 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001536:	f7ff f877 	bl	8000628 <HAL_GetTick>
 800153a:	4602      	mov	r2, r0
 800153c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800153e:	1ad3      	subs	r3, r2, r3
 8001540:	2b02      	cmp	r3, #2
 8001542:	d901      	bls.n	8001548 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 8001544:	2303      	movs	r3, #3
 8001546:	e144      	b.n	80017d2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001548:	4b69      	ldr	r3, [pc, #420]	@ (80016f0 <HAL_RCC_OscConfig+0xcc8>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001550:	2b00      	cmp	r3, #0
 8001552:	d1f0      	bne.n	8001536 <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001554:	4b66      	ldr	r3, [pc, #408]	@ (80016f0 <HAL_RCC_OscConfig+0xcc8>)
 8001556:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800155a:	f003 0304 	and.w	r3, r3, #4
 800155e:	2b00      	cmp	r3, #0
 8001560:	d111      	bne.n	8001586 <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 8001562:	4b63      	ldr	r3, [pc, #396]	@ (80016f0 <HAL_RCC_OscConfig+0xcc8>)
 8001564:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001568:	4a61      	ldr	r2, [pc, #388]	@ (80016f0 <HAL_RCC_OscConfig+0xcc8>)
 800156a:	f043 0304 	orr.w	r3, r3, #4
 800156e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8001572:	4b5f      	ldr	r3, [pc, #380]	@ (80016f0 <HAL_RCC_OscConfig+0xcc8>)
 8001574:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001578:	f003 0304 	and.w	r3, r3, #4
 800157c:	60fb      	str	r3, [r7, #12]
 800157e:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8001580:	2301      	movs	r3, #1
 8001582:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8001586:	4b5b      	ldr	r3, [pc, #364]	@ (80016f4 <HAL_RCC_OscConfig+0xccc>)
 8001588:	68db      	ldr	r3, [r3, #12]
 800158a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800158e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8001592:	d102      	bne.n	800159a <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 8001594:	2301      	movs	r3, #1
 8001596:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800159a:	4b56      	ldr	r3, [pc, #344]	@ (80016f4 <HAL_RCC_OscConfig+0xccc>)
 800159c:	68db      	ldr	r3, [r3, #12]
 800159e:	4a55      	ldr	r2, [pc, #340]	@ (80016f4 <HAL_RCC_OscConfig+0xccc>)
 80015a0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80015a4:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 80015a6:	4b52      	ldr	r3, [pc, #328]	@ (80016f0 <HAL_RCC_OscConfig+0xcc8>)
 80015a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015aa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80015ae:	f023 0303 	bic.w	r3, r3, #3
 80015b2:	687a      	ldr	r2, [r7, #4]
 80015b4:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 80015b6:	687a      	ldr	r2, [r7, #4]
 80015b8:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80015ba:	3a01      	subs	r2, #1
 80015bc:	0212      	lsls	r2, r2, #8
 80015be:	4311      	orrs	r1, r2
 80015c0:	687a      	ldr	r2, [r7, #4]
 80015c2:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80015c4:	430a      	orrs	r2, r1
 80015c6:	494a      	ldr	r1, [pc, #296]	@ (80016f0 <HAL_RCC_OscConfig+0xcc8>)
 80015c8:	4313      	orrs	r3, r2
 80015ca:	628b      	str	r3, [r1, #40]	@ 0x28
 80015cc:	4b48      	ldr	r3, [pc, #288]	@ (80016f0 <HAL_RCC_OscConfig+0xcc8>)
 80015ce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80015d0:	4b49      	ldr	r3, [pc, #292]	@ (80016f8 <HAL_RCC_OscConfig+0xcd0>)
 80015d2:	4013      	ands	r3, r2
 80015d4:	687a      	ldr	r2, [r7, #4]
 80015d6:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80015d8:	3a01      	subs	r2, #1
 80015da:	f3c2 0108 	ubfx	r1, r2, #0, #9
 80015de:	687a      	ldr	r2, [r7, #4]
 80015e0:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80015e2:	3a01      	subs	r2, #1
 80015e4:	0252      	lsls	r2, r2, #9
 80015e6:	b292      	uxth	r2, r2
 80015e8:	4311      	orrs	r1, r2
 80015ea:	687a      	ldr	r2, [r7, #4]
 80015ec:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80015ee:	3a01      	subs	r2, #1
 80015f0:	0412      	lsls	r2, r2, #16
 80015f2:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 80015f6:	4311      	orrs	r1, r2
 80015f8:	687a      	ldr	r2, [r7, #4]
 80015fa:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80015fc:	3a01      	subs	r2, #1
 80015fe:	0612      	lsls	r2, r2, #24
 8001600:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8001604:	430a      	orrs	r2, r1
 8001606:	493a      	ldr	r1, [pc, #232]	@ (80016f0 <HAL_RCC_OscConfig+0xcc8>)
 8001608:	4313      	orrs	r3, r2
 800160a:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 800160c:	4b38      	ldr	r3, [pc, #224]	@ (80016f0 <HAL_RCC_OscConfig+0xcc8>)
 800160e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001610:	4a37      	ldr	r2, [pc, #220]	@ (80016f0 <HAL_RCC_OscConfig+0xcc8>)
 8001612:	f023 0310 	bic.w	r3, r3, #16
 8001616:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800161c:	4a34      	ldr	r2, [pc, #208]	@ (80016f0 <HAL_RCC_OscConfig+0xcc8>)
 800161e:	00db      	lsls	r3, r3, #3
 8001620:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8001622:	4b33      	ldr	r3, [pc, #204]	@ (80016f0 <HAL_RCC_OscConfig+0xcc8>)
 8001624:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001626:	4a32      	ldr	r2, [pc, #200]	@ (80016f0 <HAL_RCC_OscConfig+0xcc8>)
 8001628:	f043 0310 	orr.w	r3, r3, #16
 800162c:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 800162e:	4b30      	ldr	r3, [pc, #192]	@ (80016f0 <HAL_RCC_OscConfig+0xcc8>)
 8001630:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001632:	f023 020c 	bic.w	r2, r3, #12
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800163a:	492d      	ldr	r1, [pc, #180]	@ (80016f0 <HAL_RCC_OscConfig+0xcc8>)
 800163c:	4313      	orrs	r3, r2
 800163e:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 8001640:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001644:	2b01      	cmp	r3, #1
 8001646:	d105      	bne.n	8001654 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8001648:	4b2a      	ldr	r3, [pc, #168]	@ (80016f4 <HAL_RCC_OscConfig+0xccc>)
 800164a:	68db      	ldr	r3, [r3, #12]
 800164c:	4a29      	ldr	r2, [pc, #164]	@ (80016f4 <HAL_RCC_OscConfig+0xccc>)
 800164e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001652:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8001654:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8001658:	2b01      	cmp	r3, #1
 800165a:	d107      	bne.n	800166c <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 800165c:	4b24      	ldr	r3, [pc, #144]	@ (80016f0 <HAL_RCC_OscConfig+0xcc8>)
 800165e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001662:	4a23      	ldr	r2, [pc, #140]	@ (80016f0 <HAL_RCC_OscConfig+0xcc8>)
 8001664:	f023 0304 	bic.w	r3, r3, #4
 8001668:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 800166c:	4b20      	ldr	r3, [pc, #128]	@ (80016f0 <HAL_RCC_OscConfig+0xcc8>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a1f      	ldr	r2, [pc, #124]	@ (80016f0 <HAL_RCC_OscConfig+0xcc8>)
 8001672:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001676:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8001678:	f7fe ffd6 	bl	8000628 <HAL_GetTick>
 800167c:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800167e:	e008      	b.n	8001692 <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001680:	f7fe ffd2 	bl	8000628 <HAL_GetTick>
 8001684:	4602      	mov	r2, r0
 8001686:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001688:	1ad3      	subs	r3, r2, r3
 800168a:	2b02      	cmp	r3, #2
 800168c:	d901      	bls.n	8001692 <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 800168e:	2303      	movs	r3, #3
 8001690:	e09f      	b.n	80017d2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8001692:	4b17      	ldr	r3, [pc, #92]	@ (80016f0 <HAL_RCC_OscConfig+0xcc8>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800169a:	2b00      	cmp	r3, #0
 800169c:	d0f0      	beq.n	8001680 <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800169e:	4b14      	ldr	r3, [pc, #80]	@ (80016f0 <HAL_RCC_OscConfig+0xcc8>)
 80016a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016a2:	4a13      	ldr	r2, [pc, #76]	@ (80016f0 <HAL_RCC_OscConfig+0xcc8>)
 80016a4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80016a8:	6293      	str	r3, [r2, #40]	@ 0x28
 80016aa:	e091      	b.n	80017d0 <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 80016ac:	4b10      	ldr	r3, [pc, #64]	@ (80016f0 <HAL_RCC_OscConfig+0xcc8>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a0f      	ldr	r2, [pc, #60]	@ (80016f0 <HAL_RCC_OscConfig+0xcc8>)
 80016b2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80016b6:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80016b8:	f7fe ffb6 	bl	8000628 <HAL_GetTick>
 80016bc:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80016be:	e008      	b.n	80016d2 <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016c0:	f7fe ffb2 	bl	8000628 <HAL_GetTick>
 80016c4:	4602      	mov	r2, r0
 80016c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80016c8:	1ad3      	subs	r3, r2, r3
 80016ca:	2b02      	cmp	r3, #2
 80016cc:	d901      	bls.n	80016d2 <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 80016ce:	2303      	movs	r3, #3
 80016d0:	e07f      	b.n	80017d2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80016d2:	4b07      	ldr	r3, [pc, #28]	@ (80016f0 <HAL_RCC_OscConfig+0xcc8>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d1f0      	bne.n	80016c0 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 80016de:	4b04      	ldr	r3, [pc, #16]	@ (80016f0 <HAL_RCC_OscConfig+0xcc8>)
 80016e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016e2:	4a03      	ldr	r2, [pc, #12]	@ (80016f0 <HAL_RCC_OscConfig+0xcc8>)
 80016e4:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 80016e8:	f023 0303 	bic.w	r3, r3, #3
 80016ec:	6293      	str	r3, [r2, #40]	@ 0x28
 80016ee:	e06f      	b.n	80017d0 <HAL_RCC_OscConfig+0xda8>
 80016f0:	46020c00 	.word	0x46020c00
 80016f4:	46020800 	.word	0x46020800
 80016f8:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 80016fc:	4b37      	ldr	r3, [pc, #220]	@ (80017dc <HAL_RCC_OscConfig+0xdb4>)
 80016fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001700:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001702:	4b36      	ldr	r3, [pc, #216]	@ (80017dc <HAL_RCC_OscConfig+0xdb4>)
 8001704:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001706:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800170c:	2b01      	cmp	r3, #1
 800170e:	d039      	beq.n	8001784 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8001710:	69fb      	ldr	r3, [r7, #28]
 8001712:	f003 0203 	and.w	r2, r3, #3
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800171a:	429a      	cmp	r2, r3
 800171c:	d132      	bne.n	8001784 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 800171e:	69fb      	ldr	r3, [r7, #28]
 8001720:	0a1b      	lsrs	r3, r3, #8
 8001722:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800172a:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 800172c:	429a      	cmp	r2, r3
 800172e:	d129      	bne.n	8001784 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8001730:	69fb      	ldr	r3, [r7, #28]
 8001732:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800173a:	429a      	cmp	r2, r3
 800173c:	d122      	bne.n	8001784 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800173e:	69bb      	ldr	r3, [r7, #24]
 8001740:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001748:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 800174a:	429a      	cmp	r2, r3
 800174c:	d11a      	bne.n	8001784 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 800174e:	69bb      	ldr	r3, [r7, #24]
 8001750:	0a5b      	lsrs	r3, r3, #9
 8001752:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800175a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800175c:	429a      	cmp	r2, r3
 800175e:	d111      	bne.n	8001784 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8001760:	69bb      	ldr	r3, [r7, #24]
 8001762:	0c1b      	lsrs	r3, r3, #16
 8001764:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800176c:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800176e:	429a      	cmp	r2, r3
 8001770:	d108      	bne.n	8001784 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8001772:	69bb      	ldr	r3, [r7, #24]
 8001774:	0e1b      	lsrs	r3, r3, #24
 8001776:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800177e:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001780:	429a      	cmp	r2, r3
 8001782:	d001      	beq.n	8001788 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 8001784:	2301      	movs	r3, #1
 8001786:	e024      	b.n	80017d2 <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8001788:	4b14      	ldr	r3, [pc, #80]	@ (80017dc <HAL_RCC_OscConfig+0xdb4>)
 800178a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800178c:	08db      	lsrs	r3, r3, #3
 800178e:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8001796:	429a      	cmp	r2, r3
 8001798:	d01a      	beq.n	80017d0 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 800179a:	4b10      	ldr	r3, [pc, #64]	@ (80017dc <HAL_RCC_OscConfig+0xdb4>)
 800179c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800179e:	4a0f      	ldr	r2, [pc, #60]	@ (80017dc <HAL_RCC_OscConfig+0xdb4>)
 80017a0:	f023 0310 	bic.w	r3, r3, #16
 80017a4:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017a6:	f7fe ff3f 	bl	8000628 <HAL_GetTick>
 80017aa:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 80017ac:	bf00      	nop
 80017ae:	f7fe ff3b 	bl	8000628 <HAL_GetTick>
 80017b2:	4602      	mov	r2, r0
 80017b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d0f9      	beq.n	80017ae <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017be:	4a07      	ldr	r2, [pc, #28]	@ (80017dc <HAL_RCC_OscConfig+0xdb4>)
 80017c0:	00db      	lsls	r3, r3, #3
 80017c2:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 80017c4:	4b05      	ldr	r3, [pc, #20]	@ (80017dc <HAL_RCC_OscConfig+0xdb4>)
 80017c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017c8:	4a04      	ldr	r2, [pc, #16]	@ (80017dc <HAL_RCC_OscConfig+0xdb4>)
 80017ca:	f043 0310 	orr.w	r3, r3, #16
 80017ce:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 80017d0:	2300      	movs	r3, #0
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	3738      	adds	r7, #56	@ 0x38
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	46020c00 	.word	0x46020c00

080017e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b086      	sub	sp, #24
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
 80017e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d101      	bne.n	80017f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017f0:	2301      	movs	r3, #1
 80017f2:	e1d9      	b.n	8001ba8 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80017f4:	4b9b      	ldr	r3, [pc, #620]	@ (8001a64 <HAL_RCC_ClockConfig+0x284>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f003 030f 	and.w	r3, r3, #15
 80017fc:	683a      	ldr	r2, [r7, #0]
 80017fe:	429a      	cmp	r2, r3
 8001800:	d910      	bls.n	8001824 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001802:	4b98      	ldr	r3, [pc, #608]	@ (8001a64 <HAL_RCC_ClockConfig+0x284>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f023 020f 	bic.w	r2, r3, #15
 800180a:	4996      	ldr	r1, [pc, #600]	@ (8001a64 <HAL_RCC_ClockConfig+0x284>)
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	4313      	orrs	r3, r2
 8001810:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001812:	4b94      	ldr	r3, [pc, #592]	@ (8001a64 <HAL_RCC_ClockConfig+0x284>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f003 030f 	and.w	r3, r3, #15
 800181a:	683a      	ldr	r2, [r7, #0]
 800181c:	429a      	cmp	r2, r3
 800181e:	d001      	beq.n	8001824 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001820:	2301      	movs	r3, #1
 8001822:	e1c1      	b.n	8001ba8 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f003 0310 	and.w	r3, r3, #16
 800182c:	2b00      	cmp	r3, #0
 800182e:	d010      	beq.n	8001852 <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	695a      	ldr	r2, [r3, #20]
 8001834:	4b8c      	ldr	r3, [pc, #560]	@ (8001a68 <HAL_RCC_ClockConfig+0x288>)
 8001836:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001838:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800183c:	429a      	cmp	r2, r3
 800183e:	d908      	bls.n	8001852 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8001840:	4b89      	ldr	r3, [pc, #548]	@ (8001a68 <HAL_RCC_ClockConfig+0x288>)
 8001842:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001844:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	695b      	ldr	r3, [r3, #20]
 800184c:	4986      	ldr	r1, [pc, #536]	@ (8001a68 <HAL_RCC_ClockConfig+0x288>)
 800184e:	4313      	orrs	r3, r2
 8001850:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f003 0308 	and.w	r3, r3, #8
 800185a:	2b00      	cmp	r3, #0
 800185c:	d012      	beq.n	8001884 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	691a      	ldr	r2, [r3, #16]
 8001862:	4b81      	ldr	r3, [pc, #516]	@ (8001a68 <HAL_RCC_ClockConfig+0x288>)
 8001864:	6a1b      	ldr	r3, [r3, #32]
 8001866:	091b      	lsrs	r3, r3, #4
 8001868:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800186c:	429a      	cmp	r2, r3
 800186e:	d909      	bls.n	8001884 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8001870:	4b7d      	ldr	r3, [pc, #500]	@ (8001a68 <HAL_RCC_ClockConfig+0x288>)
 8001872:	6a1b      	ldr	r3, [r3, #32]
 8001874:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	691b      	ldr	r3, [r3, #16]
 800187c:	011b      	lsls	r3, r3, #4
 800187e:	497a      	ldr	r1, [pc, #488]	@ (8001a68 <HAL_RCC_ClockConfig+0x288>)
 8001880:	4313      	orrs	r3, r2
 8001882:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f003 0304 	and.w	r3, r3, #4
 800188c:	2b00      	cmp	r3, #0
 800188e:	d010      	beq.n	80018b2 <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	68da      	ldr	r2, [r3, #12]
 8001894:	4b74      	ldr	r3, [pc, #464]	@ (8001a68 <HAL_RCC_ClockConfig+0x288>)
 8001896:	6a1b      	ldr	r3, [r3, #32]
 8001898:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800189c:	429a      	cmp	r2, r3
 800189e:	d908      	bls.n	80018b2 <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 80018a0:	4b71      	ldr	r3, [pc, #452]	@ (8001a68 <HAL_RCC_ClockConfig+0x288>)
 80018a2:	6a1b      	ldr	r3, [r3, #32]
 80018a4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	68db      	ldr	r3, [r3, #12]
 80018ac:	496e      	ldr	r1, [pc, #440]	@ (8001a68 <HAL_RCC_ClockConfig+0x288>)
 80018ae:	4313      	orrs	r3, r2
 80018b0:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f003 0302 	and.w	r3, r3, #2
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d010      	beq.n	80018e0 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	689a      	ldr	r2, [r3, #8]
 80018c2:	4b69      	ldr	r3, [pc, #420]	@ (8001a68 <HAL_RCC_ClockConfig+0x288>)
 80018c4:	6a1b      	ldr	r3, [r3, #32]
 80018c6:	f003 030f 	and.w	r3, r3, #15
 80018ca:	429a      	cmp	r2, r3
 80018cc:	d908      	bls.n	80018e0 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 80018ce:	4b66      	ldr	r3, [pc, #408]	@ (8001a68 <HAL_RCC_ClockConfig+0x288>)
 80018d0:	6a1b      	ldr	r3, [r3, #32]
 80018d2:	f023 020f 	bic.w	r2, r3, #15
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	689b      	ldr	r3, [r3, #8]
 80018da:	4963      	ldr	r1, [pc, #396]	@ (8001a68 <HAL_RCC_ClockConfig+0x288>)
 80018dc:	4313      	orrs	r3, r2
 80018de:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f003 0301 	and.w	r3, r3, #1
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	f000 80d2 	beq.w	8001a92 <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 80018ee:	2300      	movs	r3, #0
 80018f0:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	2b03      	cmp	r3, #3
 80018f8:	d143      	bne.n	8001982 <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018fa:	4b5b      	ldr	r3, [pc, #364]	@ (8001a68 <HAL_RCC_ClockConfig+0x288>)
 80018fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001900:	f003 0304 	and.w	r3, r3, #4
 8001904:	2b00      	cmp	r3, #0
 8001906:	d110      	bne.n	800192a <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001908:	4b57      	ldr	r3, [pc, #348]	@ (8001a68 <HAL_RCC_ClockConfig+0x288>)
 800190a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800190e:	4a56      	ldr	r2, [pc, #344]	@ (8001a68 <HAL_RCC_ClockConfig+0x288>)
 8001910:	f043 0304 	orr.w	r3, r3, #4
 8001914:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8001918:	4b53      	ldr	r3, [pc, #332]	@ (8001a68 <HAL_RCC_ClockConfig+0x288>)
 800191a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800191e:	f003 0304 	and.w	r3, r3, #4
 8001922:	60bb      	str	r3, [r7, #8]
 8001924:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 8001926:	2301      	movs	r3, #1
 8001928:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 800192a:	f7fe fe7d 	bl	8000628 <HAL_GetTick>
 800192e:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8001930:	4b4e      	ldr	r3, [pc, #312]	@ (8001a6c <HAL_RCC_ClockConfig+0x28c>)
 8001932:	68db      	ldr	r3, [r3, #12]
 8001934:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001938:	2b00      	cmp	r3, #0
 800193a:	d00f      	beq.n	800195c <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 800193c:	e008      	b.n	8001950 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 800193e:	f7fe fe73 	bl	8000628 <HAL_GetTick>
 8001942:	4602      	mov	r2, r0
 8001944:	693b      	ldr	r3, [r7, #16]
 8001946:	1ad3      	subs	r3, r2, r3
 8001948:	2b02      	cmp	r3, #2
 800194a:	d901      	bls.n	8001950 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 800194c:	2303      	movs	r3, #3
 800194e:	e12b      	b.n	8001ba8 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8001950:	4b46      	ldr	r3, [pc, #280]	@ (8001a6c <HAL_RCC_ClockConfig+0x28c>)
 8001952:	68db      	ldr	r3, [r3, #12]
 8001954:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001958:	2b00      	cmp	r3, #0
 800195a:	d0f0      	beq.n	800193e <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800195c:	7dfb      	ldrb	r3, [r7, #23]
 800195e:	2b01      	cmp	r3, #1
 8001960:	d107      	bne.n	8001972 <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001962:	4b41      	ldr	r3, [pc, #260]	@ (8001a68 <HAL_RCC_ClockConfig+0x288>)
 8001964:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001968:	4a3f      	ldr	r2, [pc, #252]	@ (8001a68 <HAL_RCC_ClockConfig+0x288>)
 800196a:	f023 0304 	bic.w	r3, r3, #4
 800196e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8001972:	4b3d      	ldr	r3, [pc, #244]	@ (8001a68 <HAL_RCC_ClockConfig+0x288>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800197a:	2b00      	cmp	r3, #0
 800197c:	d121      	bne.n	80019c2 <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 800197e:	2301      	movs	r3, #1
 8001980:	e112      	b.n	8001ba8 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	2b02      	cmp	r3, #2
 8001988:	d107      	bne.n	800199a <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800198a:	4b37      	ldr	r3, [pc, #220]	@ (8001a68 <HAL_RCC_ClockConfig+0x288>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001992:	2b00      	cmp	r3, #0
 8001994:	d115      	bne.n	80019c2 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8001996:	2301      	movs	r3, #1
 8001998:	e106      	b.n	8001ba8 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d107      	bne.n	80019b2 <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80019a2:	4b31      	ldr	r3, [pc, #196]	@ (8001a68 <HAL_RCC_ClockConfig+0x288>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f003 0304 	and.w	r3, r3, #4
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d109      	bne.n	80019c2 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80019ae:	2301      	movs	r3, #1
 80019b0:	e0fa      	b.n	8001ba8 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019b2:	4b2d      	ldr	r3, [pc, #180]	@ (8001a68 <HAL_RCC_ClockConfig+0x288>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d101      	bne.n	80019c2 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80019be:	2301      	movs	r3, #1
 80019c0:	e0f2      	b.n	8001ba8 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 80019c2:	4b29      	ldr	r3, [pc, #164]	@ (8001a68 <HAL_RCC_ClockConfig+0x288>)
 80019c4:	69db      	ldr	r3, [r3, #28]
 80019c6:	f023 0203 	bic.w	r2, r3, #3
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	4926      	ldr	r1, [pc, #152]	@ (8001a68 <HAL_RCC_ClockConfig+0x288>)
 80019d0:	4313      	orrs	r3, r2
 80019d2:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 80019d4:	f7fe fe28 	bl	8000628 <HAL_GetTick>
 80019d8:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	2b03      	cmp	r3, #3
 80019e0:	d112      	bne.n	8001a08 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019e2:	e00a      	b.n	80019fa <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019e4:	f7fe fe20 	bl	8000628 <HAL_GetTick>
 80019e8:	4602      	mov	r2, r0
 80019ea:	693b      	ldr	r3, [r7, #16]
 80019ec:	1ad3      	subs	r3, r2, r3
 80019ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d901      	bls.n	80019fa <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 80019f6:	2303      	movs	r3, #3
 80019f8:	e0d6      	b.n	8001ba8 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019fa:	4b1b      	ldr	r3, [pc, #108]	@ (8001a68 <HAL_RCC_ClockConfig+0x288>)
 80019fc:	69db      	ldr	r3, [r3, #28]
 80019fe:	f003 030c 	and.w	r3, r3, #12
 8001a02:	2b0c      	cmp	r3, #12
 8001a04:	d1ee      	bne.n	80019e4 <HAL_RCC_ClockConfig+0x204>
 8001a06:	e044      	b.n	8001a92 <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	2b02      	cmp	r3, #2
 8001a0e:	d112      	bne.n	8001a36 <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a10:	e00a      	b.n	8001a28 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a12:	f7fe fe09 	bl	8000628 <HAL_GetTick>
 8001a16:	4602      	mov	r2, r0
 8001a18:	693b      	ldr	r3, [r7, #16]
 8001a1a:	1ad3      	subs	r3, r2, r3
 8001a1c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d901      	bls.n	8001a28 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001a24:	2303      	movs	r3, #3
 8001a26:	e0bf      	b.n	8001ba8 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a28:	4b0f      	ldr	r3, [pc, #60]	@ (8001a68 <HAL_RCC_ClockConfig+0x288>)
 8001a2a:	69db      	ldr	r3, [r3, #28]
 8001a2c:	f003 030c 	and.w	r3, r3, #12
 8001a30:	2b08      	cmp	r3, #8
 8001a32:	d1ee      	bne.n	8001a12 <HAL_RCC_ClockConfig+0x232>
 8001a34:	e02d      	b.n	8001a92 <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d123      	bne.n	8001a86 <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001a3e:	e00a      	b.n	8001a56 <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a40:	f7fe fdf2 	bl	8000628 <HAL_GetTick>
 8001a44:	4602      	mov	r2, r0
 8001a46:	693b      	ldr	r3, [r7, #16]
 8001a48:	1ad3      	subs	r3, r2, r3
 8001a4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d901      	bls.n	8001a56 <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 8001a52:	2303      	movs	r3, #3
 8001a54:	e0a8      	b.n	8001ba8 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001a56:	4b04      	ldr	r3, [pc, #16]	@ (8001a68 <HAL_RCC_ClockConfig+0x288>)
 8001a58:	69db      	ldr	r3, [r3, #28]
 8001a5a:	f003 030c 	and.w	r3, r3, #12
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d1ee      	bne.n	8001a40 <HAL_RCC_ClockConfig+0x260>
 8001a62:	e016      	b.n	8001a92 <HAL_RCC_ClockConfig+0x2b2>
 8001a64:	40022000 	.word	0x40022000
 8001a68:	46020c00 	.word	0x46020c00
 8001a6c:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a70:	f7fe fdda 	bl	8000628 <HAL_GetTick>
 8001a74:	4602      	mov	r2, r0
 8001a76:	693b      	ldr	r3, [r7, #16]
 8001a78:	1ad3      	subs	r3, r2, r3
 8001a7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d901      	bls.n	8001a86 <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8001a82:	2303      	movs	r3, #3
 8001a84:	e090      	b.n	8001ba8 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a86:	4b4a      	ldr	r3, [pc, #296]	@ (8001bb0 <HAL_RCC_ClockConfig+0x3d0>)
 8001a88:	69db      	ldr	r3, [r3, #28]
 8001a8a:	f003 030c 	and.w	r3, r3, #12
 8001a8e:	2b04      	cmp	r3, #4
 8001a90:	d1ee      	bne.n	8001a70 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f003 0302 	and.w	r3, r3, #2
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d010      	beq.n	8001ac0 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	689a      	ldr	r2, [r3, #8]
 8001aa2:	4b43      	ldr	r3, [pc, #268]	@ (8001bb0 <HAL_RCC_ClockConfig+0x3d0>)
 8001aa4:	6a1b      	ldr	r3, [r3, #32]
 8001aa6:	f003 030f 	and.w	r3, r3, #15
 8001aaa:	429a      	cmp	r2, r3
 8001aac:	d208      	bcs.n	8001ac0 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8001aae:	4b40      	ldr	r3, [pc, #256]	@ (8001bb0 <HAL_RCC_ClockConfig+0x3d0>)
 8001ab0:	6a1b      	ldr	r3, [r3, #32]
 8001ab2:	f023 020f 	bic.w	r2, r3, #15
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	689b      	ldr	r3, [r3, #8]
 8001aba:	493d      	ldr	r1, [pc, #244]	@ (8001bb0 <HAL_RCC_ClockConfig+0x3d0>)
 8001abc:	4313      	orrs	r3, r2
 8001abe:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ac0:	4b3c      	ldr	r3, [pc, #240]	@ (8001bb4 <HAL_RCC_ClockConfig+0x3d4>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f003 030f 	and.w	r3, r3, #15
 8001ac8:	683a      	ldr	r2, [r7, #0]
 8001aca:	429a      	cmp	r2, r3
 8001acc:	d210      	bcs.n	8001af0 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ace:	4b39      	ldr	r3, [pc, #228]	@ (8001bb4 <HAL_RCC_ClockConfig+0x3d4>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f023 020f 	bic.w	r2, r3, #15
 8001ad6:	4937      	ldr	r1, [pc, #220]	@ (8001bb4 <HAL_RCC_ClockConfig+0x3d4>)
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	4313      	orrs	r3, r2
 8001adc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ade:	4b35      	ldr	r3, [pc, #212]	@ (8001bb4 <HAL_RCC_ClockConfig+0x3d4>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f003 030f 	and.w	r3, r3, #15
 8001ae6:	683a      	ldr	r2, [r7, #0]
 8001ae8:	429a      	cmp	r2, r3
 8001aea:	d001      	beq.n	8001af0 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8001aec:	2301      	movs	r3, #1
 8001aee:	e05b      	b.n	8001ba8 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f003 0304 	and.w	r3, r3, #4
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d010      	beq.n	8001b1e <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	68da      	ldr	r2, [r3, #12]
 8001b00:	4b2b      	ldr	r3, [pc, #172]	@ (8001bb0 <HAL_RCC_ClockConfig+0x3d0>)
 8001b02:	6a1b      	ldr	r3, [r3, #32]
 8001b04:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001b08:	429a      	cmp	r2, r3
 8001b0a:	d208      	bcs.n	8001b1e <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8001b0c:	4b28      	ldr	r3, [pc, #160]	@ (8001bb0 <HAL_RCC_ClockConfig+0x3d0>)
 8001b0e:	6a1b      	ldr	r3, [r3, #32]
 8001b10:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	68db      	ldr	r3, [r3, #12]
 8001b18:	4925      	ldr	r1, [pc, #148]	@ (8001bb0 <HAL_RCC_ClockConfig+0x3d0>)
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f003 0308 	and.w	r3, r3, #8
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d012      	beq.n	8001b50 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	691a      	ldr	r2, [r3, #16]
 8001b2e:	4b20      	ldr	r3, [pc, #128]	@ (8001bb0 <HAL_RCC_ClockConfig+0x3d0>)
 8001b30:	6a1b      	ldr	r3, [r3, #32]
 8001b32:	091b      	lsrs	r3, r3, #4
 8001b34:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	d209      	bcs.n	8001b50 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8001b3c:	4b1c      	ldr	r3, [pc, #112]	@ (8001bb0 <HAL_RCC_ClockConfig+0x3d0>)
 8001b3e:	6a1b      	ldr	r3, [r3, #32]
 8001b40:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	691b      	ldr	r3, [r3, #16]
 8001b48:	011b      	lsls	r3, r3, #4
 8001b4a:	4919      	ldr	r1, [pc, #100]	@ (8001bb0 <HAL_RCC_ClockConfig+0x3d0>)
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f003 0310 	and.w	r3, r3, #16
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d010      	beq.n	8001b7e <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	695a      	ldr	r2, [r3, #20]
 8001b60:	4b13      	ldr	r3, [pc, #76]	@ (8001bb0 <HAL_RCC_ClockConfig+0x3d0>)
 8001b62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b64:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001b68:	429a      	cmp	r2, r3
 8001b6a:	d208      	bcs.n	8001b7e <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8001b6c:	4b10      	ldr	r3, [pc, #64]	@ (8001bb0 <HAL_RCC_ClockConfig+0x3d0>)
 8001b6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b70:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	695b      	ldr	r3, [r3, #20]
 8001b78:	490d      	ldr	r1, [pc, #52]	@ (8001bb0 <HAL_RCC_ClockConfig+0x3d0>)
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8001b7e:	f000 f821 	bl	8001bc4 <HAL_RCC_GetSysClockFreq>
 8001b82:	4602      	mov	r2, r0
 8001b84:	4b0a      	ldr	r3, [pc, #40]	@ (8001bb0 <HAL_RCC_ClockConfig+0x3d0>)
 8001b86:	6a1b      	ldr	r3, [r3, #32]
 8001b88:	f003 030f 	and.w	r3, r3, #15
 8001b8c:	490a      	ldr	r1, [pc, #40]	@ (8001bb8 <HAL_RCC_ClockConfig+0x3d8>)
 8001b8e:	5ccb      	ldrb	r3, [r1, r3]
 8001b90:	fa22 f303 	lsr.w	r3, r2, r3
 8001b94:	4a09      	ldr	r2, [pc, #36]	@ (8001bbc <HAL_RCC_ClockConfig+0x3dc>)
 8001b96:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001b98:	4b09      	ldr	r3, [pc, #36]	@ (8001bc0 <HAL_RCC_ClockConfig+0x3e0>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f7fe fc07 	bl	80003b0 <HAL_InitTick>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	73fb      	strb	r3, [r7, #15]

  return status;
 8001ba6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	3718      	adds	r7, #24
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	46020c00 	.word	0x46020c00
 8001bb4:	40022000 	.word	0x40022000
 8001bb8:	08004abc 	.word	0x08004abc
 8001bbc:	20000000 	.word	0x20000000
 8001bc0:	20000004 	.word	0x20000004

08001bc4 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b08b      	sub	sp, #44	@ 0x2c
 8001bc8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001bd2:	4b78      	ldr	r3, [pc, #480]	@ (8001db4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8001bd4:	69db      	ldr	r3, [r3, #28]
 8001bd6:	f003 030c 	and.w	r3, r3, #12
 8001bda:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001bdc:	4b75      	ldr	r3, [pc, #468]	@ (8001db4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8001bde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001be0:	f003 0303 	and.w	r3, r3, #3
 8001be4:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001be6:	69bb      	ldr	r3, [r7, #24]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d005      	beq.n	8001bf8 <HAL_RCC_GetSysClockFreq+0x34>
 8001bec:	69bb      	ldr	r3, [r7, #24]
 8001bee:	2b0c      	cmp	r3, #12
 8001bf0:	d121      	bne.n	8001c36 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	2b01      	cmp	r3, #1
 8001bf6:	d11e      	bne.n	8001c36 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8001bf8:	4b6e      	ldr	r3, [pc, #440]	@ (8001db4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d107      	bne.n	8001c14 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8001c04:	4b6b      	ldr	r3, [pc, #428]	@ (8001db4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8001c06:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001c0a:	0b1b      	lsrs	r3, r3, #12
 8001c0c:	f003 030f 	and.w	r3, r3, #15
 8001c10:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c12:	e005      	b.n	8001c20 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8001c14:	4b67      	ldr	r3, [pc, #412]	@ (8001db4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8001c16:	689b      	ldr	r3, [r3, #8]
 8001c18:	0f1b      	lsrs	r3, r3, #28
 8001c1a:	f003 030f 	and.w	r3, r3, #15
 8001c1e:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001c20:	4a65      	ldr	r2, [pc, #404]	@ (8001db8 <HAL_RCC_GetSysClockFreq+0x1f4>)
 8001c22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c28:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001c2a:	69bb      	ldr	r3, [r7, #24]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d110      	bne.n	8001c52 <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001c30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c32:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001c34:	e00d      	b.n	8001c52 <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c36:	4b5f      	ldr	r3, [pc, #380]	@ (8001db4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8001c38:	69db      	ldr	r3, [r3, #28]
 8001c3a:	f003 030c 	and.w	r3, r3, #12
 8001c3e:	2b04      	cmp	r3, #4
 8001c40:	d102      	bne.n	8001c48 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001c42:	4b5e      	ldr	r3, [pc, #376]	@ (8001dbc <HAL_RCC_GetSysClockFreq+0x1f8>)
 8001c44:	623b      	str	r3, [r7, #32]
 8001c46:	e004      	b.n	8001c52 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c48:	69bb      	ldr	r3, [r7, #24]
 8001c4a:	2b08      	cmp	r3, #8
 8001c4c:	d101      	bne.n	8001c52 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001c4e:	4b5b      	ldr	r3, [pc, #364]	@ (8001dbc <HAL_RCC_GetSysClockFreq+0x1f8>)
 8001c50:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c52:	69bb      	ldr	r3, [r7, #24]
 8001c54:	2b0c      	cmp	r3, #12
 8001c56:	f040 80a5 	bne.w	8001da4 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8001c5a:	4b56      	ldr	r3, [pc, #344]	@ (8001db4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8001c5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c5e:	f003 0303 	and.w	r3, r3, #3
 8001c62:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8001c64:	4b53      	ldr	r3, [pc, #332]	@ (8001db4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8001c66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c68:	0a1b      	lsrs	r3, r3, #8
 8001c6a:	f003 030f 	and.w	r3, r3, #15
 8001c6e:	3301      	adds	r3, #1
 8001c70:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8001c72:	4b50      	ldr	r3, [pc, #320]	@ (8001db4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8001c74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c76:	091b      	lsrs	r3, r3, #4
 8001c78:	f003 0301 	and.w	r3, r3, #1
 8001c7c:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8001c7e:	4b4d      	ldr	r3, [pc, #308]	@ (8001db4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8001c80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c82:	08db      	lsrs	r3, r3, #3
 8001c84:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001c88:	68ba      	ldr	r2, [r7, #8]
 8001c8a:	fb02 f303 	mul.w	r3, r2, r3
 8001c8e:	ee07 3a90 	vmov	s15, r3
 8001c92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c96:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	2b02      	cmp	r3, #2
 8001c9e:	d003      	beq.n	8001ca8 <HAL_RCC_GetSysClockFreq+0xe4>
 8001ca0:	693b      	ldr	r3, [r7, #16]
 8001ca2:	2b03      	cmp	r3, #3
 8001ca4:	d022      	beq.n	8001cec <HAL_RCC_GetSysClockFreq+0x128>
 8001ca6:	e043      	b.n	8001d30 <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	ee07 3a90 	vmov	s15, r3
 8001cae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001cb2:	eddf 6a43 	vldr	s13, [pc, #268]	@ 8001dc0 <HAL_RCC_GetSysClockFreq+0x1fc>
 8001cb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001cba:	4b3e      	ldr	r3, [pc, #248]	@ (8001db4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8001cbc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001cbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001cc2:	ee07 3a90 	vmov	s15, r3
 8001cc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8001cca:	ed97 6a01 	vldr	s12, [r7, #4]
 8001cce:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 8001dc4 <HAL_RCC_GetSysClockFreq+0x200>
 8001cd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001cd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8001cda:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001cde:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001ce2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ce6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001cea:	e046      	b.n	8001d7a <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	ee07 3a90 	vmov	s15, r3
 8001cf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001cf6:	eddf 6a32 	vldr	s13, [pc, #200]	@ 8001dc0 <HAL_RCC_GetSysClockFreq+0x1fc>
 8001cfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001cfe:	4b2d      	ldr	r3, [pc, #180]	@ (8001db4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8001d00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d06:	ee07 3a90 	vmov	s15, r3
 8001d0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8001d0e:	ed97 6a01 	vldr	s12, [r7, #4]
 8001d12:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 8001dc4 <HAL_RCC_GetSysClockFreq+0x200>
 8001d16:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001d1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8001d1e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001d22:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001d26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d2a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001d2e:	e024      	b.n	8001d7a <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001d30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d32:	ee07 3a90 	vmov	s15, r3
 8001d36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	ee07 3a90 	vmov	s15, r3
 8001d40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d44:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001d48:	4b1a      	ldr	r3, [pc, #104]	@ (8001db4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8001d4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d50:	ee07 3a90 	vmov	s15, r3
 8001d54:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8001d58:	ed97 6a01 	vldr	s12, [r7, #4]
 8001d5c:	eddf 5a19 	vldr	s11, [pc, #100]	@ 8001dc4 <HAL_RCC_GetSysClockFreq+0x200>
 8001d60:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001d64:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8001d68:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001d6c:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001d70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d74:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001d78:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8001d7a:	4b0e      	ldr	r3, [pc, #56]	@ (8001db4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8001d7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d7e:	0e1b      	lsrs	r3, r3, #24
 8001d80:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001d84:	3301      	adds	r3, #1
 8001d86:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	ee07 3a90 	vmov	s15, r3
 8001d8e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001d92:	edd7 6a07 	vldr	s13, [r7, #28]
 8001d96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d9a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d9e:	ee17 3a90 	vmov	r3, s15
 8001da2:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 8001da4:	6a3b      	ldr	r3, [r7, #32]
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	372c      	adds	r7, #44	@ 0x2c
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr
 8001db2:	bf00      	nop
 8001db4:	46020c00 	.word	0x46020c00
 8001db8:	08004ad4 	.word	0x08004ad4
 8001dbc:	00f42400 	.word	0x00f42400
 8001dc0:	4b742400 	.word	0x4b742400
 8001dc4:	46000000 	.word	0x46000000

08001dc8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8001dcc:	f7ff fefa 	bl	8001bc4 <HAL_RCC_GetSysClockFreq>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	4b07      	ldr	r3, [pc, #28]	@ (8001df0 <HAL_RCC_GetHCLKFreq+0x28>)
 8001dd4:	6a1b      	ldr	r3, [r3, #32]
 8001dd6:	f003 030f 	and.w	r3, r3, #15
 8001dda:	4906      	ldr	r1, [pc, #24]	@ (8001df4 <HAL_RCC_GetHCLKFreq+0x2c>)
 8001ddc:	5ccb      	ldrb	r3, [r1, r3]
 8001dde:	fa22 f303 	lsr.w	r3, r2, r3
 8001de2:	4a05      	ldr	r2, [pc, #20]	@ (8001df8 <HAL_RCC_GetHCLKFreq+0x30>)
 8001de4:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8001de6:	4b04      	ldr	r3, [pc, #16]	@ (8001df8 <HAL_RCC_GetHCLKFreq+0x30>)
 8001de8:	681b      	ldr	r3, [r3, #0]
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	46020c00 	.word	0x46020c00
 8001df4:	08004abc 	.word	0x08004abc
 8001df8:	20000000 	.word	0x20000000

08001dfc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8001e00:	f7ff ffe2 	bl	8001dc8 <HAL_RCC_GetHCLKFreq>
 8001e04:	4602      	mov	r2, r0
 8001e06:	4b05      	ldr	r3, [pc, #20]	@ (8001e1c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e08:	6a1b      	ldr	r3, [r3, #32]
 8001e0a:	091b      	lsrs	r3, r3, #4
 8001e0c:	f003 0307 	and.w	r3, r3, #7
 8001e10:	4903      	ldr	r1, [pc, #12]	@ (8001e20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e12:	5ccb      	ldrb	r3, [r1, r3]
 8001e14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	bd80      	pop	{r7, pc}
 8001e1c:	46020c00 	.word	0x46020c00
 8001e20:	08004acc 	.word	0x08004acc

08001e24 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *pRCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b083      	sub	sp, #12
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
 8001e2c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(pRCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  pRCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | \
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	221f      	movs	r2, #31
 8001e32:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_PCLK3;

  /* Get the SYSCLK configuration --------------------------------------------*/
  pRCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR1 & RCC_CFGR1_SW);
 8001e34:	4b15      	ldr	r3, [pc, #84]	@ (8001e8c <HAL_RCC_GetClockConfig+0x68>)
 8001e36:	69db      	ldr	r3, [r3, #28]
 8001e38:	f003 0203 	and.w	r2, r3, #3
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_HPRE);
 8001e40:	4b12      	ldr	r3, [pc, #72]	@ (8001e8c <HAL_RCC_GetClockConfig+0x68>)
 8001e42:	6a1b      	ldr	r3, [r3, #32]
 8001e44:	f003 020f 	and.w	r2, r3, #15
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_PPRE1);
 8001e4c:	4b0f      	ldr	r3, [pc, #60]	@ (8001e8c <HAL_RCC_GetClockConfig+0x68>)
 8001e4e:	6a1b      	ldr	r3, [r3, #32]
 8001e50:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4);
 8001e58:	4b0c      	ldr	r3, [pc, #48]	@ (8001e8c <HAL_RCC_GetClockConfig+0x68>)
 8001e5a:	6a1b      	ldr	r3, [r3, #32]
 8001e5c:	091b      	lsrs	r3, r3, #4
 8001e5e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	611a      	str	r2, [r3, #16]

  /* Get the APB3 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CFGR3 & RCC_CFGR3_PPRE3);
 8001e66:	4b09      	ldr	r3, [pc, #36]	@ (8001e8c <HAL_RCC_GetClockConfig+0x68>)
 8001e68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e6a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	615a      	str	r2, [r3, #20]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001e72:	4b07      	ldr	r3, [pc, #28]	@ (8001e90 <HAL_RCC_GetClockConfig+0x6c>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f003 020f 	and.w	r2, r3, #15
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	601a      	str	r2, [r3, #0]
}
 8001e7e:	bf00      	nop
 8001e80:	370c      	adds	r7, #12
 8001e82:	46bd      	mov	sp, r7
 8001e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e88:	4770      	bx	lr
 8001e8a:	bf00      	nop
 8001e8c:	46020c00 	.word	0x46020c00
 8001e90:	40022000 	.word	0x40022000

08001e94 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b086      	sub	sp, #24
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001e9c:	4b3e      	ldr	r3, [pc, #248]	@ (8001f98 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8001e9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001ea2:	f003 0304 	and.w	r3, r3, #4
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d003      	beq.n	8001eb2 <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001eaa:	f7fe fdaf 	bl	8000a0c <HAL_PWREx_GetVoltageRange>
 8001eae:	6178      	str	r0, [r7, #20]
 8001eb0:	e019      	b.n	8001ee6 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001eb2:	4b39      	ldr	r3, [pc, #228]	@ (8001f98 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8001eb4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001eb8:	4a37      	ldr	r2, [pc, #220]	@ (8001f98 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8001eba:	f043 0304 	orr.w	r3, r3, #4
 8001ebe:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8001ec2:	4b35      	ldr	r3, [pc, #212]	@ (8001f98 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8001ec4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001ec8:	f003 0304 	and.w	r3, r3, #4
 8001ecc:	60fb      	str	r3, [r7, #12]
 8001ece:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001ed0:	f7fe fd9c 	bl	8000a0c <HAL_PWREx_GetVoltageRange>
 8001ed4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001ed6:	4b30      	ldr	r3, [pc, #192]	@ (8001f98 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8001ed8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001edc:	4a2e      	ldr	r2, [pc, #184]	@ (8001f98 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8001ede:	f023 0304 	bic.w	r3, r3, #4
 8001ee2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8001eec:	d003      	beq.n	8001ef6 <RCC_SetFlashLatencyFromMSIRange+0x62>
 8001eee:	697b      	ldr	r3, [r7, #20]
 8001ef0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001ef4:	d109      	bne.n	8001f0a <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001efc:	d202      	bcs.n	8001f04 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8001efe:	2301      	movs	r3, #1
 8001f00:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8001f02:	e033      	b.n	8001f6c <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8001f04:	2300      	movs	r3, #0
 8001f06:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8001f08:	e030      	b.n	8001f6c <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001f10:	d208      	bcs.n	8001f24 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f18:	d102      	bne.n	8001f20 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 8001f1a:	2303      	movs	r3, #3
 8001f1c:	613b      	str	r3, [r7, #16]
 8001f1e:	e025      	b.n	8001f6c <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8001f20:	2301      	movs	r3, #1
 8001f22:	e035      	b.n	8001f90 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001f2a:	d90f      	bls.n	8001f4c <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d109      	bne.n	8001f46 <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8001f38:	d902      	bls.n	8001f40 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	613b      	str	r3, [r7, #16]
 8001f3e:	e015      	b.n	8001f6c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8001f40:	2301      	movs	r3, #1
 8001f42:	613b      	str	r3, [r7, #16]
 8001f44:	e012      	b.n	8001f6c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8001f46:	2300      	movs	r3, #0
 8001f48:	613b      	str	r3, [r7, #16]
 8001f4a:	e00f      	b.n	8001f6c <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001f52:	d109      	bne.n	8001f68 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f5a:	d102      	bne.n	8001f62 <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	613b      	str	r3, [r7, #16]
 8001f60:	e004      	b.n	8001f6c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8001f62:	2302      	movs	r3, #2
 8001f64:	613b      	str	r3, [r7, #16]
 8001f66:	e001      	b.n	8001f6c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8001f68:	2301      	movs	r3, #1
 8001f6a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001f6c:	4b0b      	ldr	r3, [pc, #44]	@ (8001f9c <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f023 020f 	bic.w	r2, r3, #15
 8001f74:	4909      	ldr	r1, [pc, #36]	@ (8001f9c <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8001f7c:	4b07      	ldr	r3, [pc, #28]	@ (8001f9c <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f003 030f 	and.w	r3, r3, #15
 8001f84:	693a      	ldr	r2, [r7, #16]
 8001f86:	429a      	cmp	r2, r3
 8001f88:	d001      	beq.n	8001f8e <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e000      	b.n	8001f90 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 8001f8e:	2300      	movs	r3, #0
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	3718      	adds	r7, #24
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	46020c00 	.word	0x46020c00
 8001f9c:	40022000 	.word	0x40022000

08001fa0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b082      	sub	sp, #8
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d101      	bne.n	8001fb2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e049      	b.n	8002046 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001fb8:	b2db      	uxtb	r3, r3
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d106      	bne.n	8001fcc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001fc6:	6878      	ldr	r0, [r7, #4]
 8001fc8:	f000 f841 	bl	800204e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2202      	movs	r2, #2
 8001fd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681a      	ldr	r2, [r3, #0]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	3304      	adds	r3, #4
 8001fdc:	4619      	mov	r1, r3
 8001fde:	4610      	mov	r0, r2
 8001fe0:	f000 fa58 	bl	8002494 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2201      	movs	r2, #1
 8001ff0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2201      	movs	r2, #1
 8002000:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2201      	movs	r2, #1
 8002008:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2201      	movs	r2, #1
 8002010:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2201      	movs	r2, #1
 8002018:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2201      	movs	r2, #1
 8002020:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2201      	movs	r2, #1
 8002028:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2201      	movs	r2, #1
 8002030:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2201      	movs	r2, #1
 8002038:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2201      	movs	r2, #1
 8002040:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002044:	2300      	movs	r3, #0
}
 8002046:	4618      	mov	r0, r3
 8002048:	3708      	adds	r7, #8
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}

0800204e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800204e:	b480      	push	{r7}
 8002050:	b083      	sub	sp, #12
 8002052:	af00      	add	r7, sp, #0
 8002054:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002056:	bf00      	nop
 8002058:	370c      	adds	r7, #12
 800205a:	46bd      	mov	sp, r7
 800205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002060:	4770      	bx	lr
	...

08002064 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002064:	b480      	push	{r7}
 8002066:	b085      	sub	sp, #20
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002072:	b2db      	uxtb	r3, r3
 8002074:	2b01      	cmp	r3, #1
 8002076:	d001      	beq.n	800207c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002078:	2301      	movs	r3, #1
 800207a:	e072      	b.n	8002162 <HAL_TIM_Base_Start_IT+0xfe>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2202      	movs	r2, #2
 8002080:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	68da      	ldr	r2, [r3, #12]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f042 0201 	orr.w	r2, r2, #1
 8002092:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a35      	ldr	r2, [pc, #212]	@ (8002170 <HAL_TIM_Base_Start_IT+0x10c>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d040      	beq.n	8002120 <HAL_TIM_Base_Start_IT+0xbc>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a34      	ldr	r2, [pc, #208]	@ (8002174 <HAL_TIM_Base_Start_IT+0x110>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d03b      	beq.n	8002120 <HAL_TIM_Base_Start_IT+0xbc>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80020b0:	d036      	beq.n	8002120 <HAL_TIM_Base_Start_IT+0xbc>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80020ba:	d031      	beq.n	8002120 <HAL_TIM_Base_Start_IT+0xbc>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a2d      	ldr	r2, [pc, #180]	@ (8002178 <HAL_TIM_Base_Start_IT+0x114>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d02c      	beq.n	8002120 <HAL_TIM_Base_Start_IT+0xbc>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4a2c      	ldr	r2, [pc, #176]	@ (800217c <HAL_TIM_Base_Start_IT+0x118>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d027      	beq.n	8002120 <HAL_TIM_Base_Start_IT+0xbc>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a2a      	ldr	r2, [pc, #168]	@ (8002180 <HAL_TIM_Base_Start_IT+0x11c>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d022      	beq.n	8002120 <HAL_TIM_Base_Start_IT+0xbc>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a29      	ldr	r2, [pc, #164]	@ (8002184 <HAL_TIM_Base_Start_IT+0x120>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d01d      	beq.n	8002120 <HAL_TIM_Base_Start_IT+0xbc>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a27      	ldr	r2, [pc, #156]	@ (8002188 <HAL_TIM_Base_Start_IT+0x124>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d018      	beq.n	8002120 <HAL_TIM_Base_Start_IT+0xbc>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a26      	ldr	r2, [pc, #152]	@ (800218c <HAL_TIM_Base_Start_IT+0x128>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d013      	beq.n	8002120 <HAL_TIM_Base_Start_IT+0xbc>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a24      	ldr	r2, [pc, #144]	@ (8002190 <HAL_TIM_Base_Start_IT+0x12c>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d00e      	beq.n	8002120 <HAL_TIM_Base_Start_IT+0xbc>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a23      	ldr	r2, [pc, #140]	@ (8002194 <HAL_TIM_Base_Start_IT+0x130>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d009      	beq.n	8002120 <HAL_TIM_Base_Start_IT+0xbc>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a21      	ldr	r2, [pc, #132]	@ (8002198 <HAL_TIM_Base_Start_IT+0x134>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d004      	beq.n	8002120 <HAL_TIM_Base_Start_IT+0xbc>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a20      	ldr	r2, [pc, #128]	@ (800219c <HAL_TIM_Base_Start_IT+0x138>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d115      	bne.n	800214c <HAL_TIM_Base_Start_IT+0xe8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	689a      	ldr	r2, [r3, #8]
 8002126:	4b1e      	ldr	r3, [pc, #120]	@ (80021a0 <HAL_TIM_Base_Start_IT+0x13c>)
 8002128:	4013      	ands	r3, r2
 800212a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	2b06      	cmp	r3, #6
 8002130:	d015      	beq.n	800215e <HAL_TIM_Base_Start_IT+0xfa>
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002138:	d011      	beq.n	800215e <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	681a      	ldr	r2, [r3, #0]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f042 0201 	orr.w	r2, r2, #1
 8002148:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800214a:	e008      	b.n	800215e <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	681a      	ldr	r2, [r3, #0]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f042 0201 	orr.w	r2, r2, #1
 800215a:	601a      	str	r2, [r3, #0]
 800215c:	e000      	b.n	8002160 <HAL_TIM_Base_Start_IT+0xfc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800215e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002160:	2300      	movs	r3, #0
}
 8002162:	4618      	mov	r0, r3
 8002164:	3714      	adds	r7, #20
 8002166:	46bd      	mov	sp, r7
 8002168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216c:	4770      	bx	lr
 800216e:	bf00      	nop
 8002170:	40012c00 	.word	0x40012c00
 8002174:	50012c00 	.word	0x50012c00
 8002178:	40000400 	.word	0x40000400
 800217c:	50000400 	.word	0x50000400
 8002180:	40000800 	.word	0x40000800
 8002184:	50000800 	.word	0x50000800
 8002188:	40000c00 	.word	0x40000c00
 800218c:	50000c00 	.word	0x50000c00
 8002190:	40013400 	.word	0x40013400
 8002194:	50013400 	.word	0x50013400
 8002198:	40014000 	.word	0x40014000
 800219c:	50014000 	.word	0x50014000
 80021a0:	00010007 	.word	0x00010007

080021a4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b084      	sub	sp, #16
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	68db      	ldr	r3, [r3, #12]
 80021b2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	691b      	ldr	r3, [r3, #16]
 80021ba:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80021bc:	68bb      	ldr	r3, [r7, #8]
 80021be:	f003 0302 	and.w	r3, r3, #2
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d020      	beq.n	8002208 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	f003 0302 	and.w	r3, r3, #2
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d01b      	beq.n	8002208 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f06f 0202 	mvn.w	r2, #2
 80021d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2201      	movs	r2, #1
 80021de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	699b      	ldr	r3, [r3, #24]
 80021e6:	f003 0303 	and.w	r3, r3, #3
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d003      	beq.n	80021f6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80021ee:	6878      	ldr	r0, [r7, #4]
 80021f0:	f000 f931 	bl	8002456 <HAL_TIM_IC_CaptureCallback>
 80021f4:	e005      	b.n	8002202 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80021f6:	6878      	ldr	r0, [r7, #4]
 80021f8:	f000 f923 	bl	8002442 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021fc:	6878      	ldr	r0, [r7, #4]
 80021fe:	f000 f934 	bl	800246a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2200      	movs	r2, #0
 8002206:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	f003 0304 	and.w	r3, r3, #4
 800220e:	2b00      	cmp	r3, #0
 8002210:	d020      	beq.n	8002254 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	f003 0304 	and.w	r3, r3, #4
 8002218:	2b00      	cmp	r3, #0
 800221a:	d01b      	beq.n	8002254 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f06f 0204 	mvn.w	r2, #4
 8002224:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2202      	movs	r2, #2
 800222a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	699b      	ldr	r3, [r3, #24]
 8002232:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002236:	2b00      	cmp	r3, #0
 8002238:	d003      	beq.n	8002242 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800223a:	6878      	ldr	r0, [r7, #4]
 800223c:	f000 f90b 	bl	8002456 <HAL_TIM_IC_CaptureCallback>
 8002240:	e005      	b.n	800224e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002242:	6878      	ldr	r0, [r7, #4]
 8002244:	f000 f8fd 	bl	8002442 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002248:	6878      	ldr	r0, [r7, #4]
 800224a:	f000 f90e 	bl	800246a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2200      	movs	r2, #0
 8002252:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	f003 0308 	and.w	r3, r3, #8
 800225a:	2b00      	cmp	r3, #0
 800225c:	d020      	beq.n	80022a0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	f003 0308 	and.w	r3, r3, #8
 8002264:	2b00      	cmp	r3, #0
 8002266:	d01b      	beq.n	80022a0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f06f 0208 	mvn.w	r2, #8
 8002270:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2204      	movs	r2, #4
 8002276:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	69db      	ldr	r3, [r3, #28]
 800227e:	f003 0303 	and.w	r3, r3, #3
 8002282:	2b00      	cmp	r3, #0
 8002284:	d003      	beq.n	800228e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002286:	6878      	ldr	r0, [r7, #4]
 8002288:	f000 f8e5 	bl	8002456 <HAL_TIM_IC_CaptureCallback>
 800228c:	e005      	b.n	800229a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800228e:	6878      	ldr	r0, [r7, #4]
 8002290:	f000 f8d7 	bl	8002442 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002294:	6878      	ldr	r0, [r7, #4]
 8002296:	f000 f8e8 	bl	800246a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2200      	movs	r2, #0
 800229e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	f003 0310 	and.w	r3, r3, #16
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d020      	beq.n	80022ec <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	f003 0310 	and.w	r3, r3, #16
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d01b      	beq.n	80022ec <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f06f 0210 	mvn.w	r2, #16
 80022bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2208      	movs	r2, #8
 80022c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	69db      	ldr	r3, [r3, #28]
 80022ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d003      	beq.n	80022da <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022d2:	6878      	ldr	r0, [r7, #4]
 80022d4:	f000 f8bf 	bl	8002456 <HAL_TIM_IC_CaptureCallback>
 80022d8:	e005      	b.n	80022e6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022da:	6878      	ldr	r0, [r7, #4]
 80022dc:	f000 f8b1 	bl	8002442 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022e0:	6878      	ldr	r0, [r7, #4]
 80022e2:	f000 f8c2 	bl	800246a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2200      	movs	r2, #0
 80022ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	f003 0301 	and.w	r3, r3, #1
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d00c      	beq.n	8002310 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	f003 0301 	and.w	r3, r3, #1
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d007      	beq.n	8002310 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f06f 0201 	mvn.w	r2, #1
 8002308:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800230a:	6878      	ldr	r0, [r7, #4]
 800230c:	f7fe f81e 	bl	800034c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002316:	2b00      	cmp	r3, #0
 8002318:	d104      	bne.n	8002324 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002320:	2b00      	cmp	r3, #0
 8002322:	d00c      	beq.n	800233e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800232a:	2b00      	cmp	r3, #0
 800232c:	d007      	beq.n	800233e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8002336:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002338:	6878      	ldr	r0, [r7, #4]
 800233a:	f000 f9bb 	bl	80026b4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002344:	2b00      	cmp	r3, #0
 8002346:	d00c      	beq.n	8002362 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800234e:	2b00      	cmp	r3, #0
 8002350:	d007      	beq.n	8002362 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800235a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800235c:	6878      	ldr	r0, [r7, #4]
 800235e:	f000 f9b3 	bl	80026c8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002368:	2b00      	cmp	r3, #0
 800236a:	d00c      	beq.n	8002386 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002372:	2b00      	cmp	r3, #0
 8002374:	d007      	beq.n	8002386 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800237e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002380:	6878      	ldr	r0, [r7, #4]
 8002382:	f000 f87c 	bl	800247e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002386:	68bb      	ldr	r3, [r7, #8]
 8002388:	f003 0320 	and.w	r3, r3, #32
 800238c:	2b00      	cmp	r3, #0
 800238e:	d00c      	beq.n	80023aa <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	f003 0320 	and.w	r3, r3, #32
 8002396:	2b00      	cmp	r3, #0
 8002398:	d007      	beq.n	80023aa <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f06f 0220 	mvn.w	r2, #32
 80023a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80023a4:	6878      	ldr	r0, [r7, #4]
 80023a6:	f000 f97b 	bl	80026a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80023aa:	68bb      	ldr	r3, [r7, #8]
 80023ac:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d00c      	beq.n	80023ce <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d007      	beq.n	80023ce <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 80023c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80023c8:	6878      	ldr	r0, [r7, #4]
 80023ca:	f000 f987 	bl	80026dc <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80023ce:	68bb      	ldr	r3, [r7, #8]
 80023d0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d00c      	beq.n	80023f2 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d007      	beq.n	80023f2 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 80023ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80023ec:	6878      	ldr	r0, [r7, #4]
 80023ee:	f000 f97f 	bl	80026f0 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80023f2:	68bb      	ldr	r3, [r7, #8]
 80023f4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d00c      	beq.n	8002416 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002402:	2b00      	cmp	r3, #0
 8002404:	d007      	beq.n	8002416 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800240e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8002410:	6878      	ldr	r0, [r7, #4]
 8002412:	f000 f977 	bl	8002704 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8002416:	68bb      	ldr	r3, [r7, #8]
 8002418:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800241c:	2b00      	cmp	r3, #0
 800241e:	d00c      	beq.n	800243a <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002426:	2b00      	cmp	r3, #0
 8002428:	d007      	beq.n	800243a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8002432:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8002434:	6878      	ldr	r0, [r7, #4]
 8002436:	f000 f96f 	bl	8002718 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800243a:	bf00      	nop
 800243c:	3710      	adds	r7, #16
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}

08002442 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002442:	b480      	push	{r7}
 8002444:	b083      	sub	sp, #12
 8002446:	af00      	add	r7, sp, #0
 8002448:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800244a:	bf00      	nop
 800244c:	370c      	adds	r7, #12
 800244e:	46bd      	mov	sp, r7
 8002450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002454:	4770      	bx	lr

08002456 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002456:	b480      	push	{r7}
 8002458:	b083      	sub	sp, #12
 800245a:	af00      	add	r7, sp, #0
 800245c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800245e:	bf00      	nop
 8002460:	370c      	adds	r7, #12
 8002462:	46bd      	mov	sp, r7
 8002464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002468:	4770      	bx	lr

0800246a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800246a:	b480      	push	{r7}
 800246c:	b083      	sub	sp, #12
 800246e:	af00      	add	r7, sp, #0
 8002470:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002472:	bf00      	nop
 8002474:	370c      	adds	r7, #12
 8002476:	46bd      	mov	sp, r7
 8002478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247c:	4770      	bx	lr

0800247e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800247e:	b480      	push	{r7}
 8002480:	b083      	sub	sp, #12
 8002482:	af00      	add	r7, sp, #0
 8002484:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002486:	bf00      	nop
 8002488:	370c      	adds	r7, #12
 800248a:	46bd      	mov	sp, r7
 800248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002490:	4770      	bx	lr
	...

08002494 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002494:	b480      	push	{r7}
 8002496:	b085      	sub	sp, #20
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
 800249c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	4a6e      	ldr	r2, [pc, #440]	@ (8002660 <TIM_Base_SetConfig+0x1cc>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d02b      	beq.n	8002504 <TIM_Base_SetConfig+0x70>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	4a6d      	ldr	r2, [pc, #436]	@ (8002664 <TIM_Base_SetConfig+0x1d0>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d027      	beq.n	8002504 <TIM_Base_SetConfig+0x70>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80024ba:	d023      	beq.n	8002504 <TIM_Base_SetConfig+0x70>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80024c2:	d01f      	beq.n	8002504 <TIM_Base_SetConfig+0x70>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	4a68      	ldr	r2, [pc, #416]	@ (8002668 <TIM_Base_SetConfig+0x1d4>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d01b      	beq.n	8002504 <TIM_Base_SetConfig+0x70>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	4a67      	ldr	r2, [pc, #412]	@ (800266c <TIM_Base_SetConfig+0x1d8>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d017      	beq.n	8002504 <TIM_Base_SetConfig+0x70>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	4a66      	ldr	r2, [pc, #408]	@ (8002670 <TIM_Base_SetConfig+0x1dc>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d013      	beq.n	8002504 <TIM_Base_SetConfig+0x70>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	4a65      	ldr	r2, [pc, #404]	@ (8002674 <TIM_Base_SetConfig+0x1e0>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d00f      	beq.n	8002504 <TIM_Base_SetConfig+0x70>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	4a64      	ldr	r2, [pc, #400]	@ (8002678 <TIM_Base_SetConfig+0x1e4>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d00b      	beq.n	8002504 <TIM_Base_SetConfig+0x70>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	4a63      	ldr	r2, [pc, #396]	@ (800267c <TIM_Base_SetConfig+0x1e8>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d007      	beq.n	8002504 <TIM_Base_SetConfig+0x70>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	4a62      	ldr	r2, [pc, #392]	@ (8002680 <TIM_Base_SetConfig+0x1ec>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d003      	beq.n	8002504 <TIM_Base_SetConfig+0x70>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	4a61      	ldr	r2, [pc, #388]	@ (8002684 <TIM_Base_SetConfig+0x1f0>)
 8002500:	4293      	cmp	r3, r2
 8002502:	d108      	bne.n	8002516 <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800250a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	68fa      	ldr	r2, [r7, #12]
 8002512:	4313      	orrs	r3, r2
 8002514:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	4a51      	ldr	r2, [pc, #324]	@ (8002660 <TIM_Base_SetConfig+0x1cc>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d043      	beq.n	80025a6 <TIM_Base_SetConfig+0x112>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	4a50      	ldr	r2, [pc, #320]	@ (8002664 <TIM_Base_SetConfig+0x1d0>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d03f      	beq.n	80025a6 <TIM_Base_SetConfig+0x112>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800252c:	d03b      	beq.n	80025a6 <TIM_Base_SetConfig+0x112>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002534:	d037      	beq.n	80025a6 <TIM_Base_SetConfig+0x112>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	4a4b      	ldr	r2, [pc, #300]	@ (8002668 <TIM_Base_SetConfig+0x1d4>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d033      	beq.n	80025a6 <TIM_Base_SetConfig+0x112>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	4a4a      	ldr	r2, [pc, #296]	@ (800266c <TIM_Base_SetConfig+0x1d8>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d02f      	beq.n	80025a6 <TIM_Base_SetConfig+0x112>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	4a49      	ldr	r2, [pc, #292]	@ (8002670 <TIM_Base_SetConfig+0x1dc>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d02b      	beq.n	80025a6 <TIM_Base_SetConfig+0x112>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	4a48      	ldr	r2, [pc, #288]	@ (8002674 <TIM_Base_SetConfig+0x1e0>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d027      	beq.n	80025a6 <TIM_Base_SetConfig+0x112>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	4a47      	ldr	r2, [pc, #284]	@ (8002678 <TIM_Base_SetConfig+0x1e4>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d023      	beq.n	80025a6 <TIM_Base_SetConfig+0x112>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	4a46      	ldr	r2, [pc, #280]	@ (800267c <TIM_Base_SetConfig+0x1e8>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d01f      	beq.n	80025a6 <TIM_Base_SetConfig+0x112>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	4a45      	ldr	r2, [pc, #276]	@ (8002680 <TIM_Base_SetConfig+0x1ec>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d01b      	beq.n	80025a6 <TIM_Base_SetConfig+0x112>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	4a44      	ldr	r2, [pc, #272]	@ (8002684 <TIM_Base_SetConfig+0x1f0>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d017      	beq.n	80025a6 <TIM_Base_SetConfig+0x112>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	4a43      	ldr	r2, [pc, #268]	@ (8002688 <TIM_Base_SetConfig+0x1f4>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d013      	beq.n	80025a6 <TIM_Base_SetConfig+0x112>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	4a42      	ldr	r2, [pc, #264]	@ (800268c <TIM_Base_SetConfig+0x1f8>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d00f      	beq.n	80025a6 <TIM_Base_SetConfig+0x112>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	4a41      	ldr	r2, [pc, #260]	@ (8002690 <TIM_Base_SetConfig+0x1fc>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d00b      	beq.n	80025a6 <TIM_Base_SetConfig+0x112>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	4a40      	ldr	r2, [pc, #256]	@ (8002694 <TIM_Base_SetConfig+0x200>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d007      	beq.n	80025a6 <TIM_Base_SetConfig+0x112>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	4a3f      	ldr	r2, [pc, #252]	@ (8002698 <TIM_Base_SetConfig+0x204>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d003      	beq.n	80025a6 <TIM_Base_SetConfig+0x112>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	4a3e      	ldr	r2, [pc, #248]	@ (800269c <TIM_Base_SetConfig+0x208>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d108      	bne.n	80025b8 <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80025ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	68db      	ldr	r3, [r3, #12]
 80025b2:	68fa      	ldr	r2, [r7, #12]
 80025b4:	4313      	orrs	r3, r2
 80025b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	695b      	ldr	r3, [r3, #20]
 80025c2:	4313      	orrs	r3, r2
 80025c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	68fa      	ldr	r2, [r7, #12]
 80025ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	689a      	ldr	r2, [r3, #8]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	681a      	ldr	r2, [r3, #0]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	4a20      	ldr	r2, [pc, #128]	@ (8002660 <TIM_Base_SetConfig+0x1cc>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d023      	beq.n	800262c <TIM_Base_SetConfig+0x198>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	4a1f      	ldr	r2, [pc, #124]	@ (8002664 <TIM_Base_SetConfig+0x1d0>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d01f      	beq.n	800262c <TIM_Base_SetConfig+0x198>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	4a24      	ldr	r2, [pc, #144]	@ (8002680 <TIM_Base_SetConfig+0x1ec>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d01b      	beq.n	800262c <TIM_Base_SetConfig+0x198>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	4a23      	ldr	r2, [pc, #140]	@ (8002684 <TIM_Base_SetConfig+0x1f0>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d017      	beq.n	800262c <TIM_Base_SetConfig+0x198>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	4a22      	ldr	r2, [pc, #136]	@ (8002688 <TIM_Base_SetConfig+0x1f4>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d013      	beq.n	800262c <TIM_Base_SetConfig+0x198>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	4a21      	ldr	r2, [pc, #132]	@ (800268c <TIM_Base_SetConfig+0x1f8>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d00f      	beq.n	800262c <TIM_Base_SetConfig+0x198>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	4a20      	ldr	r2, [pc, #128]	@ (8002690 <TIM_Base_SetConfig+0x1fc>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d00b      	beq.n	800262c <TIM_Base_SetConfig+0x198>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	4a1f      	ldr	r2, [pc, #124]	@ (8002694 <TIM_Base_SetConfig+0x200>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d007      	beq.n	800262c <TIM_Base_SetConfig+0x198>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	4a1e      	ldr	r2, [pc, #120]	@ (8002698 <TIM_Base_SetConfig+0x204>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d003      	beq.n	800262c <TIM_Base_SetConfig+0x198>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	4a1d      	ldr	r2, [pc, #116]	@ (800269c <TIM_Base_SetConfig+0x208>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d103      	bne.n	8002634 <TIM_Base_SetConfig+0x1a0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	691a      	ldr	r2, [r3, #16]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2201      	movs	r2, #1
 8002638:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	691b      	ldr	r3, [r3, #16]
 800263e:	f003 0301 	and.w	r3, r3, #1
 8002642:	2b01      	cmp	r3, #1
 8002644:	d105      	bne.n	8002652 <TIM_Base_SetConfig+0x1be>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	691b      	ldr	r3, [r3, #16]
 800264a:	f023 0201 	bic.w	r2, r3, #1
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	611a      	str	r2, [r3, #16]
  }
}
 8002652:	bf00      	nop
 8002654:	3714      	adds	r7, #20
 8002656:	46bd      	mov	sp, r7
 8002658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265c:	4770      	bx	lr
 800265e:	bf00      	nop
 8002660:	40012c00 	.word	0x40012c00
 8002664:	50012c00 	.word	0x50012c00
 8002668:	40000400 	.word	0x40000400
 800266c:	50000400 	.word	0x50000400
 8002670:	40000800 	.word	0x40000800
 8002674:	50000800 	.word	0x50000800
 8002678:	40000c00 	.word	0x40000c00
 800267c:	50000c00 	.word	0x50000c00
 8002680:	40013400 	.word	0x40013400
 8002684:	50013400 	.word	0x50013400
 8002688:	40014000 	.word	0x40014000
 800268c:	50014000 	.word	0x50014000
 8002690:	40014400 	.word	0x40014400
 8002694:	50014400 	.word	0x50014400
 8002698:	40014800 	.word	0x40014800
 800269c:	50014800 	.word	0x50014800

080026a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b083      	sub	sp, #12
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80026a8:	bf00      	nop
 80026aa:	370c      	adds	r7, #12
 80026ac:	46bd      	mov	sp, r7
 80026ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b2:	4770      	bx	lr

080026b4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b083      	sub	sp, #12
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80026bc:	bf00      	nop
 80026be:	370c      	adds	r7, #12
 80026c0:	46bd      	mov	sp, r7
 80026c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c6:	4770      	bx	lr

080026c8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b083      	sub	sp, #12
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80026d0:	bf00      	nop
 80026d2:	370c      	adds	r7, #12
 80026d4:	46bd      	mov	sp, r7
 80026d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026da:	4770      	bx	lr

080026dc <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80026dc:	b480      	push	{r7}
 80026de:	b083      	sub	sp, #12
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80026e4:	bf00      	nop
 80026e6:	370c      	adds	r7, #12
 80026e8:	46bd      	mov	sp, r7
 80026ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ee:	4770      	bx	lr

080026f0 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b083      	sub	sp, #12
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80026f8:	bf00      	nop
 80026fa:	370c      	adds	r7, #12
 80026fc:	46bd      	mov	sp, r7
 80026fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002702:	4770      	bx	lr

08002704 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8002704:	b480      	push	{r7}
 8002706:	b083      	sub	sp, #12
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800270c:	bf00      	nop
 800270e:	370c      	adds	r7, #12
 8002710:	46bd      	mov	sp, r7
 8002712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002716:	4770      	bx	lr

08002718 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8002718:	b480      	push	{r7}
 800271a:	b083      	sub	sp, #12
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8002720:	bf00      	nop
 8002722:	370c      	adds	r7, #12
 8002724:	46bd      	mov	sp, r7
 8002726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272a:	4770      	bx	lr

0800272c <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800272c:	b480      	push	{r7}
 800272e:	b083      	sub	sp, #12
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialise( pxList );

    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	f103 0208 	add.w	r2, r3, #8
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	f04f 32ff 	mov.w	r2, #4294967295
 8002744:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	f103 0208 	add.w	r2, r3, #8
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	f103 0208 	add.w	r2, r3, #8
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2200      	movs	r2, #0
 800275e:	601a      	str	r2, [r3, #0]
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );

    traceRETURN_vListInitialise();
}
 8002760:	bf00      	nop
 8002762:	370c      	adds	r7, #12
 8002764:	46bd      	mov	sp, r7
 8002766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276a:	4770      	bx	lr

0800276c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800276c:	b480      	push	{r7}
 800276e:	b083      	sub	sp, #12
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialiseItem( pxItem );

    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2200      	movs	r2, #0
 8002778:	611a      	str	r2, [r3, #16]
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );

    traceRETURN_vListInitialiseItem();
}
 800277a:	bf00      	nop
 800277c:	370c      	adds	r7, #12
 800277e:	46bd      	mov	sp, r7
 8002780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002784:	4770      	bx	lr

08002786 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8002786:	b480      	push	{r7}
 8002788:	b085      	sub	sp, #20
 800278a:	af00      	add	r7, sp, #0
 800278c:	6078      	str	r0, [r7, #4]
 800278e:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8002796:	68bb      	ldr	r3, [r7, #8]
 8002798:	f1b3 3fff 	cmp.w	r3, #4294967295
 800279c:	d103      	bne.n	80027a6 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	691b      	ldr	r3, [r3, #16]
 80027a2:	60fb      	str	r3, [r7, #12]
 80027a4:	e00c      	b.n	80027c0 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	3308      	adds	r3, #8
 80027aa:	60fb      	str	r3, [r7, #12]
 80027ac:	e002      	b.n	80027b4 <vListInsert+0x2e>
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	60fb      	str	r3, [r7, #12]
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	68ba      	ldr	r2, [r7, #8]
 80027bc:	429a      	cmp	r2, r3
 80027be:	d2f6      	bcs.n	80027ae <vListInsert+0x28>
             * IF YOU FIND YOUR CODE STUCK HERE, SEE THE NOTE JUST ABOVE.
             */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	685a      	ldr	r2, [r3, #4]
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	683a      	ldr	r2, [r7, #0]
 80027ce:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	68fa      	ldr	r2, [r7, #12]
 80027d4:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	683a      	ldr	r2, [r7, #0]
 80027da:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	687a      	ldr	r2, [r7, #4]
 80027e0:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	1c5a      	adds	r2, r3, #1
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	601a      	str	r2, [r3, #0]

    traceRETURN_vListInsert();
}
 80027ec:	bf00      	nop
 80027ee:	3714      	adds	r7, #20
 80027f0:	46bd      	mov	sp, r7
 80027f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f6:	4770      	bx	lr

080027f8 <uxListRemove>:
/*-----------------------------------------------------------*/


UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80027f8:	b480      	push	{r7}
 80027fa:	b085      	sub	sp, #20
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
    /* The list item knows which list it is in.  Obtain the list from the list
     * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	691b      	ldr	r3, [r3, #16]
 8002804:	60fb      	str	r3, [r7, #12]

    traceENTER_uxListRemove( pxItemToRemove );

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	687a      	ldr	r2, [r7, #4]
 800280c:	6892      	ldr	r2, [r2, #8]
 800280e:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	687a      	ldr	r2, [r7, #4]
 8002816:	6852      	ldr	r2, [r2, #4]
 8002818:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	687a      	ldr	r2, [r7, #4]
 8002820:	429a      	cmp	r2, r3
 8002822:	d103      	bne.n	800282c <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	689a      	ldr	r2, [r3, #8]
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2200      	movs	r2, #0
 8002830:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems - 1U );
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	1e5a      	subs	r2, r3, #1
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	601a      	str	r2, [r3, #0]

    traceRETURN_uxListRemove( pxList->uxNumberOfItems );

    return pxList->uxNumberOfItems;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
}
 8002840:	4618      	mov	r0, r3
 8002842:	3714      	adds	r7, #20
 8002844:	46bd      	mov	sp, r7
 8002846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284a:	4770      	bx	lr

0800284c <xQueueGenericReset>:
    } while( 0 )
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b084      	sub	sp, #16
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
 8002854:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8002856:	2301      	movs	r3, #1
 8002858:	60fb      	str	r3, [r7, #12]
    Queue_t * const pxQueue = xQueue;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	60bb      	str	r3, [r7, #8]

    traceENTER_xQueueGenericReset( xQueue, xNewQueue );

    configASSERT( pxQueue );
 800285e:	68bb      	ldr	r3, [r7, #8]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d103      	bne.n	800286c <xQueueGenericReset+0x20>
 8002864:	f002 f80e 	bl	8004884 <ulSetInterruptMask>
 8002868:	bf00      	nop
 800286a:	e7fd      	b.n	8002868 <xQueueGenericReset+0x1c>

    if( ( pxQueue != NULL ) &&
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d057      	beq.n	8002922 <xQueueGenericReset+0xd6>
        ( pxQueue->uxLength >= 1U ) &&
 8002872:	68bb      	ldr	r3, [r7, #8]
 8002874:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 8002876:	2b00      	cmp	r3, #0
 8002878:	d053      	beq.n	8002922 <xQueueGenericReset+0xd6>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002882:	2100      	movs	r1, #0
 8002884:	fba3 2302 	umull	r2, r3, r3, r2
 8002888:	2b00      	cmp	r3, #0
 800288a:	d000      	beq.n	800288e <xQueueGenericReset+0x42>
 800288c:	2101      	movs	r1, #1
 800288e:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8002890:	2b00      	cmp	r3, #0
 8002892:	d146      	bne.n	8002922 <xQueueGenericReset+0xd6>
    {
        taskENTER_CRITICAL();
 8002894:	f001 fe52 	bl	800453c <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002898:	68bb      	ldr	r3, [r7, #8]
 800289a:	681a      	ldr	r2, [r3, #0]
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028a0:	68b9      	ldr	r1, [r7, #8]
 80028a2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80028a4:	fb01 f303 	mul.w	r3, r1, r3
 80028a8:	441a      	add	r2, r3
 80028aa:	68bb      	ldr	r3, [r7, #8]
 80028ac:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	2200      	movs	r2, #0
 80028b2:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80028b4:	68bb      	ldr	r3, [r7, #8]
 80028b6:	681a      	ldr	r2, [r3, #0]
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize );
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	681a      	ldr	r2, [r3, #0]
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028c4:	3b01      	subs	r3, #1
 80028c6:	68b9      	ldr	r1, [r7, #8]
 80028c8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80028ca:	fb01 f303 	mul.w	r3, r1, r3
 80028ce:	441a      	add	r2, r3
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	22ff      	movs	r2, #255	@ 0xff
 80028d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	22ff      	movs	r2, #255	@ 0xff
 80028e0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d10e      	bne.n	8002908 <xQueueGenericReset+0xbc>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80028ea:	68bb      	ldr	r3, [r7, #8]
 80028ec:	691b      	ldr	r3, [r3, #16]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d014      	beq.n	800291c <xQueueGenericReset+0xd0>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	3310      	adds	r3, #16
 80028f6:	4618      	mov	r0, r3
 80028f8:	f001 f81e 	bl	8003938 <xTaskRemoveFromEventList>
 80028fc:	4603      	mov	r3, r0
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d00c      	beq.n	800291c <xQueueGenericReset+0xd0>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002902:	f001 fe09 	bl	8004518 <vPortYield>
 8002906:	e009      	b.n	800291c <xQueueGenericReset+0xd0>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	3310      	adds	r3, #16
 800290c:	4618      	mov	r0, r3
 800290e:	f7ff ff0d 	bl	800272c <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002912:	68bb      	ldr	r3, [r7, #8]
 8002914:	3324      	adds	r3, #36	@ 0x24
 8002916:	4618      	mov	r0, r3
 8002918:	f7ff ff08 	bl	800272c <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 800291c:	f001 fe20 	bl	8004560 <vPortExitCritical>
 8002920:	e001      	b.n	8002926 <xQueueGenericReset+0xda>
    }
    else
    {
        xReturn = pdFAIL;
 8002922:	2300      	movs	r3, #0
 8002924:	60fb      	str	r3, [r7, #12]
    }

    configASSERT( xReturn != pdFAIL );
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d103      	bne.n	8002934 <xQueueGenericReset+0xe8>
 800292c:	f001 ffaa 	bl	8004884 <ulSetInterruptMask>
 8002930:	bf00      	nop
 8002932:	e7fd      	b.n	8002930 <xQueueGenericReset+0xe4>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    traceRETURN_xQueueGenericReset( xReturn );

    return xReturn;
 8002934:	68fb      	ldr	r3, [r7, #12]
}
 8002936:	4618      	mov	r0, r3
 8002938:	3710      	adds	r7, #16
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}

0800293e <xQueueGenericCreateStatic>:
    QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength,
                                             const UBaseType_t uxItemSize,
                                             uint8_t * pucQueueStorage,
                                             StaticQueue_t * pxStaticQueue,
                                             const uint8_t ucQueueType )
    {
 800293e:	b580      	push	{r7, lr}
 8002940:	b088      	sub	sp, #32
 8002942:	af02      	add	r7, sp, #8
 8002944:	60f8      	str	r0, [r7, #12]
 8002946:	60b9      	str	r1, [r7, #8]
 8002948:	607a      	str	r2, [r7, #4]
 800294a:	603b      	str	r3, [r7, #0]
        Queue_t * pxNewQueue = NULL;
 800294c:	2300      	movs	r3, #0
 800294e:	617b      	str	r3, [r7, #20]

        traceENTER_xQueueGenericCreateStatic( uxQueueLength, uxItemSize, pucQueueStorage, pxStaticQueue, ucQueueType );

        /* The StaticQueue_t structure and the queue storage area must be
         * supplied. */
        configASSERT( pxStaticQueue );
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d103      	bne.n	800295e <xQueueGenericCreateStatic+0x20>
 8002956:	f001 ff95 	bl	8004884 <ulSetInterruptMask>
 800295a:	bf00      	nop
 800295c:	e7fd      	b.n	800295a <xQueueGenericCreateStatic+0x1c>

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d025      	beq.n	80029b0 <xQueueGenericCreateStatic+0x72>
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d022      	beq.n	80029b0 <xQueueGenericCreateStatic+0x72>
            ( pxStaticQueue != NULL ) &&
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d002      	beq.n	8002976 <xQueueGenericCreateStatic+0x38>

            /* A queue storage area should be provided if the item size is not 0, and
             * should not be provided if the item size is 0. */
            ( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0U ) ) ) &&
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d01c      	beq.n	80029b0 <xQueueGenericCreateStatic+0x72>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d102      	bne.n	8002982 <xQueueGenericCreateStatic+0x44>
            ( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0U ) ) ) )
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d116      	bne.n	80029b0 <xQueueGenericCreateStatic+0x72>
            #if ( configASSERT_DEFINED == 1 )
            {
                /* Sanity check that the size of the structure used to declare a
                 * variable of type StaticQueue_t or StaticSemaphore_t equals the size of
                 * the real queue and semaphore structures. */
                volatile size_t xSize = sizeof( StaticQueue_t );
 8002982:	2354      	movs	r3, #84	@ 0x54
 8002984:	613b      	str	r3, [r7, #16]

                /* This assertion cannot be branch covered in unit tests */
                configASSERT( xSize == sizeof( Queue_t ) ); /* LCOV_EXCL_BR_LINE */
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	2b54      	cmp	r3, #84	@ 0x54
 800298a:	d003      	beq.n	8002994 <xQueueGenericCreateStatic+0x56>
 800298c:	f001 ff7a 	bl	8004884 <ulSetInterruptMask>
 8002990:	bf00      	nop
 8002992:	e7fd      	b.n	8002990 <xQueueGenericCreateStatic+0x52>
                ( void ) xSize;                             /* Prevent unused variable warning when configASSERT() is not defined. */
 8002994:	693b      	ldr	r3, [r7, #16]
             * The address of a statically allocated storage area was also passed in
             * but is already set. */
            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxNewQueue = ( Queue_t * ) pxStaticQueue;
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	617b      	str	r3, [r7, #20]
                 * later deleted. */
                pxNewQueue->ucStaticallyAllocated = pdTRUE;
            }
            #endif /* configSUPPORT_DYNAMIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800299a:	f897 2020 	ldrb.w	r2, [r7, #32]
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	9300      	str	r3, [sp, #0]
 80029a2:	4613      	mov	r3, r2
 80029a4:	687a      	ldr	r2, [r7, #4]
 80029a6:	68b9      	ldr	r1, [r7, #8]
 80029a8:	68f8      	ldr	r0, [r7, #12]
 80029aa:	f000 f80d 	bl	80029c8 <prvInitialiseNewQueue>
 80029ae:	e006      	b.n	80029be <xQueueGenericCreateStatic+0x80>
        }
        else
        {
            configASSERT( pxNewQueue );
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d103      	bne.n	80029be <xQueueGenericCreateStatic+0x80>
 80029b6:	f001 ff65 	bl	8004884 <ulSetInterruptMask>
 80029ba:	bf00      	nop
 80029bc:	e7fd      	b.n	80029ba <xQueueGenericCreateStatic+0x7c>
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xQueueGenericCreateStatic( pxNewQueue );

        return pxNewQueue;
 80029be:	697b      	ldr	r3, [r7, #20]
    }
 80029c0:	4618      	mov	r0, r3
 80029c2:	3718      	adds	r7, #24
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}

080029c8 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b084      	sub	sp, #16
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	60f8      	str	r0, [r7, #12]
 80029d0:	60b9      	str	r1, [r7, #8]
 80029d2:	607a      	str	r2, [r7, #4]
 80029d4:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d103      	bne.n	80029e4 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80029dc:	69bb      	ldr	r3, [r7, #24]
 80029de:	69ba      	ldr	r2, [r7, #24]
 80029e0:	601a      	str	r2, [r3, #0]
 80029e2:	e002      	b.n	80029ea <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80029e4:	69bb      	ldr	r3, [r7, #24]
 80029e6:	687a      	ldr	r2, [r7, #4]
 80029e8:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80029ea:	69bb      	ldr	r3, [r7, #24]
 80029ec:	68fa      	ldr	r2, [r7, #12]
 80029ee:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80029f0:	69bb      	ldr	r3, [r7, #24]
 80029f2:	68ba      	ldr	r2, [r7, #8]
 80029f4:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80029f6:	2101      	movs	r1, #1
 80029f8:	69b8      	ldr	r0, [r7, #24]
 80029fa:	f7ff ff27 	bl	800284c <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 80029fe:	69bb      	ldr	r3, [r7, #24]
 8002a00:	78fa      	ldrb	r2, [r7, #3]
 8002a02:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    }
    #endif /* configUSE_TRACE_FACILITY */

    #if ( configUSE_QUEUE_SETS == 1 )
    {
        pxNewQueue->pxQueueSetContainer = NULL;
 8002a06:	69bb      	ldr	r3, [r7, #24]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8002a0c:	bf00      	nop
 8002a0e:	3710      	adds	r7, #16
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bd80      	pop	{r7, pc}

08002a14 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b08a      	sub	sp, #40	@ 0x28
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	60f8      	str	r0, [r7, #12]
 8002a1c:	60b9      	str	r1, [r7, #8]
 8002a1e:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002a20:	2300      	movs	r3, #0
 8002a22:	627b      	str	r3, [r7, #36]	@ 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	623b      	str	r3, [r7, #32]

    traceENTER_xQueueReceive( xQueue, pvBuffer, xTicksToWait );

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002a28:	6a3b      	ldr	r3, [r7, #32]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d103      	bne.n	8002a36 <xQueueReceive+0x22>
 8002a2e:	f001 ff29 	bl	8004884 <ulSetInterruptMask>
 8002a32:	bf00      	nop
 8002a34:	e7fd      	b.n	8002a32 <xQueueReceive+0x1e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d103      	bne.n	8002a44 <xQueueReceive+0x30>
 8002a3c:	6a3b      	ldr	r3, [r7, #32]
 8002a3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d101      	bne.n	8002a48 <xQueueReceive+0x34>
 8002a44:	2301      	movs	r3, #1
 8002a46:	e000      	b.n	8002a4a <xQueueReceive+0x36>
 8002a48:	2300      	movs	r3, #0
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d103      	bne.n	8002a56 <xQueueReceive+0x42>
 8002a4e:	f001 ff19 	bl	8004884 <ulSetInterruptMask>
 8002a52:	bf00      	nop
 8002a54:	e7fd      	b.n	8002a52 <xQueueReceive+0x3e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002a56:	f001 f95f 	bl	8003d18 <xTaskGetSchedulerState>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d102      	bne.n	8002a66 <xQueueReceive+0x52>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d101      	bne.n	8002a6a <xQueueReceive+0x56>
 8002a66:	2301      	movs	r3, #1
 8002a68:	e000      	b.n	8002a6c <xQueueReceive+0x58>
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d103      	bne.n	8002a78 <xQueueReceive+0x64>
 8002a70:	f001 ff08 	bl	8004884 <ulSetInterruptMask>
 8002a74:	bf00      	nop
 8002a76:	e7fd      	b.n	8002a74 <xQueueReceive+0x60>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002a78:	f001 fd60 	bl	800453c <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002a7c:	6a3b      	ldr	r3, [r7, #32]
 8002a7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a80:	61fb      	str	r3, [r7, #28]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002a82:	69fb      	ldr	r3, [r7, #28]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d019      	beq.n	8002abc <xQueueReceive+0xa8>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002a88:	68b9      	ldr	r1, [r7, #8]
 8002a8a:	6a38      	ldr	r0, [r7, #32]
 8002a8c:	f000 f8e8 	bl	8002c60 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting - ( UBaseType_t ) 1 );
 8002a90:	69fb      	ldr	r3, [r7, #28]
 8002a92:	1e5a      	subs	r2, r3, #1
 8002a94:	6a3b      	ldr	r3, [r7, #32]
 8002a96:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002a98:	6a3b      	ldr	r3, [r7, #32]
 8002a9a:	691b      	ldr	r3, [r3, #16]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d009      	beq.n	8002ab4 <xQueueReceive+0xa0>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002aa0:	6a3b      	ldr	r3, [r7, #32]
 8002aa2:	3310      	adds	r3, #16
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f000 ff47 	bl	8003938 <xTaskRemoveFromEventList>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d001      	beq.n	8002ab4 <xQueueReceive+0xa0>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002ab0:	f001 fd32 	bl	8004518 <vPortYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8002ab4:	f001 fd54 	bl	8004560 <vPortExitCritical>

                traceRETURN_xQueueReceive( pdPASS );

                return pdPASS;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	e063      	b.n	8002b84 <xQueueReceive+0x170>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d103      	bne.n	8002aca <xQueueReceive+0xb6>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002ac2:	f001 fd4d 	bl	8004560 <vPortExitCritical>

                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    traceRETURN_xQueueReceive( errQUEUE_EMPTY );

                    return errQUEUE_EMPTY;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	e05c      	b.n	8002b84 <xQueueReceive+0x170>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002aca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d106      	bne.n	8002ade <xQueueReceive+0xca>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002ad0:	f107 0314 	add.w	r3, r7, #20
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f000 ffff 	bl	8003ad8 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002ada:	2301      	movs	r3, #1
 8002adc:	627b      	str	r3, [r7, #36]	@ 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002ade:	f001 fd3f 	bl	8004560 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002ae2:	f000 fc45 	bl	8003370 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002ae6:	f001 fd29 	bl	800453c <vPortEnterCritical>
 8002aea:	6a3b      	ldr	r3, [r7, #32]
 8002aec:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002af0:	b25b      	sxtb	r3, r3
 8002af2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002af6:	d103      	bne.n	8002b00 <xQueueReceive+0xec>
 8002af8:	6a3b      	ldr	r3, [r7, #32]
 8002afa:	2200      	movs	r2, #0
 8002afc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002b00:	6a3b      	ldr	r3, [r7, #32]
 8002b02:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002b06:	b25b      	sxtb	r3, r3
 8002b08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b0c:	d103      	bne.n	8002b16 <xQueueReceive+0x102>
 8002b0e:	6a3b      	ldr	r3, [r7, #32]
 8002b10:	2200      	movs	r2, #0
 8002b12:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002b16:	f001 fd23 	bl	8004560 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002b1a:	1d3a      	adds	r2, r7, #4
 8002b1c:	f107 0314 	add.w	r3, r7, #20
 8002b20:	4611      	mov	r1, r2
 8002b22:	4618      	mov	r0, r3
 8002b24:	f000 ffee 	bl	8003b04 <xTaskCheckForTimeOut>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d11d      	bne.n	8002b6a <xQueueReceive+0x156>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002b2e:	6a38      	ldr	r0, [r7, #32]
 8002b30:	f000 f91b 	bl	8002d6a <prvIsQueueEmpty>
 8002b34:	4603      	mov	r3, r0
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d011      	beq.n	8002b5e <xQueueReceive+0x14a>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002b3a:	6a3b      	ldr	r3, [r7, #32]
 8002b3c:	3324      	adds	r3, #36	@ 0x24
 8002b3e:	687a      	ldr	r2, [r7, #4]
 8002b40:	4611      	mov	r1, r2
 8002b42:	4618      	mov	r0, r3
 8002b44:	f000 fe9c 	bl	8003880 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002b48:	6a38      	ldr	r0, [r7, #32]
 8002b4a:	f000 f8af 	bl	8002cac <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002b4e:	f000 fc1d 	bl	800338c <xTaskResumeAll>
 8002b52:	4603      	mov	r3, r0
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d18f      	bne.n	8002a78 <xQueueReceive+0x64>
                {
                    taskYIELD_WITHIN_API();
 8002b58:	f001 fcde 	bl	8004518 <vPortYield>
 8002b5c:	e78c      	b.n	8002a78 <xQueueReceive+0x64>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8002b5e:	6a38      	ldr	r0, [r7, #32]
 8002b60:	f000 f8a4 	bl	8002cac <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002b64:	f000 fc12 	bl	800338c <xTaskResumeAll>
 8002b68:	e786      	b.n	8002a78 <xQueueReceive+0x64>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8002b6a:	6a38      	ldr	r0, [r7, #32]
 8002b6c:	f000 f89e 	bl	8002cac <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002b70:	f000 fc0c 	bl	800338c <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002b74:	6a38      	ldr	r0, [r7, #32]
 8002b76:	f000 f8f8 	bl	8002d6a <prvIsQueueEmpty>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	f43f af7b 	beq.w	8002a78 <xQueueReceive+0x64>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                traceRETURN_xQueueReceive( errQUEUE_EMPTY );

                return errQUEUE_EMPTY;
 8002b82:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	3728      	adds	r7, #40	@ 0x28
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd80      	pop	{r7, pc}

08002b8c <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b086      	sub	sp, #24
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	60f8      	str	r0, [r7, #12]
 8002b94:	60b9      	str	r1, [r7, #8]
 8002b96:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ba0:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d10d      	bne.n	8002bc6 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d14d      	bne.n	8002c4e <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	689b      	ldr	r3, [r3, #8]
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f001 f8cc 	bl	8003d54 <xTaskPriorityDisinherit>
 8002bbc:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	609a      	str	r2, [r3, #8]
 8002bc4:	e043      	b.n	8002c4e <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d119      	bne.n	8002c00 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize );
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	6858      	ldr	r0, [r3, #4]
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bd4:	461a      	mov	r2, r3
 8002bd6:	68b9      	ldr	r1, [r7, #8]
 8002bd8:	f001 ff44 	bl	8004a64 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	685a      	ldr	r2, [r3, #4]
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002be4:	441a      	add	r2, r3
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	685a      	ldr	r2, [r3, #4]
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	689b      	ldr	r3, [r3, #8]
 8002bf2:	429a      	cmp	r2, r3
 8002bf4:	d32b      	bcc.n	8002c4e <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681a      	ldr	r2, [r3, #0]
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	605a      	str	r2, [r3, #4]
 8002bfe:	e026      	b.n	8002c4e <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize );
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	68d8      	ldr	r0, [r3, #12]
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c08:	461a      	mov	r2, r3
 8002c0a:	68b9      	ldr	r1, [r7, #8]
 8002c0c:	f001 ff2a 	bl	8004a64 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	68da      	ldr	r2, [r3, #12]
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c18:	425b      	negs	r3, r3
 8002c1a:	441a      	add	r2, r3
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead )
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	68da      	ldr	r2, [r3, #12]
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d207      	bcs.n	8002c3c <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	689a      	ldr	r2, [r3, #8]
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c34:	425b      	negs	r3, r3
 8002c36:	441a      	add	r2, r3
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2b02      	cmp	r3, #2
 8002c40:	d105      	bne.n	8002c4e <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d002      	beq.n	8002c4e <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8002c48:	693b      	ldr	r3, [r7, #16]
 8002c4a:	3b01      	subs	r3, #1
 8002c4c:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting + ( UBaseType_t ) 1 );
 8002c4e:	693b      	ldr	r3, [r7, #16]
 8002c50:	1c5a      	adds	r2, r3, #1
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 8002c56:	697b      	ldr	r3, [r7, #20]
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	3718      	adds	r7, #24
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}

08002c60 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b082      	sub	sp, #8
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
 8002c68:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d018      	beq.n	8002ca4 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	68da      	ldr	r2, [r3, #12]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c7a:	441a      	add	r2, r3
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail )
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	68da      	ldr	r2, [r3, #12]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	429a      	cmp	r2, r3
 8002c8a:	d303      	bcc.n	8002c94 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681a      	ldr	r2, [r3, #0]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize );
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	68d9      	ldr	r1, [r3, #12]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c9c:	461a      	mov	r2, r3
 8002c9e:	6838      	ldr	r0, [r7, #0]
 8002ca0:	f001 fee0 	bl	8004a64 <memcpy>
    }
}
 8002ca4:	bf00      	nop
 8002ca6:	3708      	adds	r7, #8
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bd80      	pop	{r7, pc}

08002cac <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b084      	sub	sp, #16
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002cb4:	f001 fc42 	bl	800453c <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002cbe:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002cc0:	e01e      	b.n	8002d00 <prvUnlockQueue+0x54>
        {
            /* Data was posted while the queue was locked.  Are any tasks
             * blocked waiting for data to become available? */
            #if ( configUSE_QUEUE_SETS == 1 )
            {
                if( pxQueue->pxQueueSetContainer != NULL )
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d008      	beq.n	8002cdc <prvUnlockQueue+0x30>
                {
                    if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
 8002cca:	6878      	ldr	r0, [r7, #4]
 8002ccc:	f000 f8de 	bl	8002e8c <prvNotifyQueueSetContainer>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d010      	beq.n	8002cf8 <prvUnlockQueue+0x4c>
                    {
                        /* The queue is a member of a queue set, and posting to
                         * the queue set caused a higher priority task to unblock.
                         * A context switch is required. */
                        vTaskMissedYield();
 8002cd6:	f000 ff6d 	bl	8003bb4 <vTaskMissedYield>
 8002cda:	e00d      	b.n	8002cf8 <prvUnlockQueue+0x4c>
                else
                {
                    /* Tasks that are removed from the event list will get
                     * added to the pending ready list as the scheduler is still
                     * suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d012      	beq.n	8002d0a <prvUnlockQueue+0x5e>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	3324      	adds	r3, #36	@ 0x24
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f000 fe25 	bl	8003938 <xTaskRemoveFromEventList>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d001      	beq.n	8002cf8 <prvUnlockQueue+0x4c>
                        {
                            /* The task waiting has a higher priority so record that a
                             * context switch is required. */
                            vTaskMissedYield();
 8002cf4:	f000 ff5e 	bl	8003bb4 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8002cf8:	7bfb      	ldrb	r3, [r7, #15]
 8002cfa:	3b01      	subs	r3, #1
 8002cfc:	b2db      	uxtb	r3, r3
 8002cfe:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002d00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	dcdc      	bgt.n	8002cc2 <prvUnlockQueue+0x16>
 8002d08:	e000      	b.n	8002d0c <prvUnlockQueue+0x60>
                        break;
 8002d0a:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	22ff      	movs	r2, #255	@ 0xff
 8002d10:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 8002d14:	f001 fc24 	bl	8004560 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8002d18:	f001 fc10 	bl	800453c <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002d22:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002d24:	e011      	b.n	8002d4a <prvUnlockQueue+0x9e>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	691b      	ldr	r3, [r3, #16]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d012      	beq.n	8002d54 <prvUnlockQueue+0xa8>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	3310      	adds	r3, #16
 8002d32:	4618      	mov	r0, r3
 8002d34:	f000 fe00 	bl	8003938 <xTaskRemoveFromEventList>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d001      	beq.n	8002d42 <prvUnlockQueue+0x96>
                {
                    vTaskMissedYield();
 8002d3e:	f000 ff39 	bl	8003bb4 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002d42:	7bbb      	ldrb	r3, [r7, #14]
 8002d44:	3b01      	subs	r3, #1
 8002d46:	b2db      	uxtb	r3, r3
 8002d48:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002d4a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	dce9      	bgt.n	8002d26 <prvUnlockQueue+0x7a>
 8002d52:	e000      	b.n	8002d56 <prvUnlockQueue+0xaa>
            }
            else
            {
                break;
 8002d54:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	22ff      	movs	r2, #255	@ 0xff
 8002d5a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 8002d5e:	f001 fbff 	bl	8004560 <vPortExitCritical>
}
 8002d62:	bf00      	nop
 8002d64:	3710      	adds	r7, #16
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}

08002d6a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002d6a:	b580      	push	{r7, lr}
 8002d6c:	b084      	sub	sp, #16
 8002d6e:	af00      	add	r7, sp, #0
 8002d70:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002d72:	f001 fbe3 	bl	800453c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d102      	bne.n	8002d84 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	60fb      	str	r3, [r7, #12]
 8002d82:	e001      	b.n	8002d88 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8002d84:	2300      	movs	r3, #0
 8002d86:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002d88:	f001 fbea 	bl	8004560 <vPortExitCritical>

    return xReturn;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	3710      	adds	r7, #16
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}
	...

08002d98 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName )
    {
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b084      	sub	sp, #16
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
 8002da0:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8002da2:	2300      	movs	r3, #0
 8002da4:	60bb      	str	r3, [r7, #8]

        traceENTER_vQueueAddToRegistry( xQueue, pcQueueName );

        configASSERT( xQueue );
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d103      	bne.n	8002db4 <vQueueAddToRegistry+0x1c>
 8002dac:	f001 fd6a 	bl	8004884 <ulSetInterruptMask>
 8002db0:	bf00      	nop
 8002db2:	e7fd      	b.n	8002db0 <vQueueAddToRegistry+0x18>

        if( pcQueueName != NULL )
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d024      	beq.n	8002e04 <vQueueAddToRegistry+0x6c>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002dba:	2300      	movs	r3, #0
 8002dbc:	60fb      	str	r3, [r7, #12]
 8002dbe:	e01e      	b.n	8002dfe <vQueueAddToRegistry+0x66>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8002dc0:	4a17      	ldr	r2, [pc, #92]	@ (8002e20 <vQueueAddToRegistry+0x88>)
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	00db      	lsls	r3, r3, #3
 8002dc6:	4413      	add	r3, r2
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	687a      	ldr	r2, [r7, #4]
 8002dcc:	429a      	cmp	r2, r3
 8002dce:	d105      	bne.n	8002ddc <vQueueAddToRegistry+0x44>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	00db      	lsls	r3, r3, #3
 8002dd4:	4a12      	ldr	r2, [pc, #72]	@ (8002e20 <vQueueAddToRegistry+0x88>)
 8002dd6:	4413      	add	r3, r2
 8002dd8:	60bb      	str	r3, [r7, #8]
                    break;
 8002dda:	e013      	b.n	8002e04 <vQueueAddToRegistry+0x6c>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8002ddc:	68bb      	ldr	r3, [r7, #8]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d10a      	bne.n	8002df8 <vQueueAddToRegistry+0x60>
 8002de2:	4a0f      	ldr	r2, [pc, #60]	@ (8002e20 <vQueueAddToRegistry+0x88>)
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d104      	bne.n	8002df8 <vQueueAddToRegistry+0x60>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	00db      	lsls	r3, r3, #3
 8002df2:	4a0b      	ldr	r2, [pc, #44]	@ (8002e20 <vQueueAddToRegistry+0x88>)
 8002df4:	4413      	add	r3, r2
 8002df6:	60bb      	str	r3, [r7, #8]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	3301      	adds	r3, #1
 8002dfc:	60fb      	str	r3, [r7, #12]
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	2b07      	cmp	r3, #7
 8002e02:	d9dd      	bls.n	8002dc0 <vQueueAddToRegistry+0x28>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d005      	beq.n	8002e16 <vQueueAddToRegistry+0x7e>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	683a      	ldr	r2, [r7, #0]
 8002e0e:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	687a      	ldr	r2, [r7, #4]
 8002e14:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }

        traceRETURN_vQueueAddToRegistry();
    }
 8002e16:	bf00      	nop
 8002e18:	3710      	adds	r7, #16
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}
 8002e1e:	bf00      	nop
 8002e20:	20000080 	.word	0x20000080

08002e24 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b086      	sub	sp, #24
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	60f8      	str	r0, [r7, #12]
 8002e2c:	60b9      	str	r1, [r7, #8]
 8002e2e:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002e34:	f001 fb82 	bl	800453c <vPortEnterCritical>
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002e3e:	b25b      	sxtb	r3, r3
 8002e40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e44:	d103      	bne.n	8002e4e <vQueueWaitForMessageRestricted+0x2a>
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002e4e:	697b      	ldr	r3, [r7, #20]
 8002e50:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002e54:	b25b      	sxtb	r3, r3
 8002e56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e5a:	d103      	bne.n	8002e64 <vQueueWaitForMessageRestricted+0x40>
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002e64:	f001 fb7c 	bl	8004560 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d106      	bne.n	8002e7e <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002e70:	697b      	ldr	r3, [r7, #20]
 8002e72:	3324      	adds	r3, #36	@ 0x24
 8002e74:	687a      	ldr	r2, [r7, #4]
 8002e76:	68b9      	ldr	r1, [r7, #8]
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f000 fd1f 	bl	80038bc <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8002e7e:	6978      	ldr	r0, [r7, #20]
 8002e80:	f7ff ff14 	bl	8002cac <prvUnlockQueue>

        traceRETURN_vQueueWaitForMessageRestricted();
    }
 8002e84:	bf00      	nop
 8002e86:	3718      	adds	r7, #24
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}

08002e8c <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

    static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue )
    {
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b086      	sub	sp, #24
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
        Queue_t * pxQueueSetContainer = pxQueue->pxQueueSetContainer;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e98:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	617b      	str	r3, [r7, #20]
        /* This function must be called form a critical section. */

        /* The following line is not reachable in unit tests because every call
         * to prvNotifyQueueSetContainer is preceded by a check that
         * pxQueueSetContainer != NULL */
        configASSERT( pxQueueSetContainer ); /* LCOV_EXCL_BR_LINE */
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d103      	bne.n	8002eac <prvNotifyQueueSetContainer+0x20>
 8002ea4:	f001 fcee 	bl	8004884 <ulSetInterruptMask>
 8002ea8:	bf00      	nop
 8002eaa:	e7fd      	b.n	8002ea8 <prvNotifyQueueSetContainer+0x1c>
        configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
 8002eac:	693b      	ldr	r3, [r7, #16]
 8002eae:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002eb0:	693b      	ldr	r3, [r7, #16]
 8002eb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	d303      	bcc.n	8002ec0 <prvNotifyQueueSetContainer+0x34>
 8002eb8:	f001 fce4 	bl	8004884 <ulSetInterruptMask>
 8002ebc:	bf00      	nop
 8002ebe:	e7fd      	b.n	8002ebc <prvNotifyQueueSetContainer+0x30>

        if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ec8:	429a      	cmp	r2, r3
 8002eca:	d235      	bcs.n	8002f38 <prvNotifyQueueSetContainer+0xac>
        {
            const int8_t cTxLock = pxQueueSetContainer->cTxLock;
 8002ecc:	693b      	ldr	r3, [r7, #16]
 8002ece:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002ed2:	73fb      	strb	r3, [r7, #15]

            traceQUEUE_SET_SEND( pxQueueSetContainer );

            /* The data copied is the handle of the queue that contains data. */
            xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, queueSEND_TO_BACK );
 8002ed4:	1d3b      	adds	r3, r7, #4
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	4619      	mov	r1, r3
 8002eda:	6938      	ldr	r0, [r7, #16]
 8002edc:	f7ff fe56 	bl	8002b8c <prvCopyDataToQueue>
 8002ee0:	6178      	str	r0, [r7, #20]

            if( cTxLock == queueUNLOCKED )
 8002ee2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ee6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eea:	d10e      	bne.n	8002f0a <prvNotifyQueueSetContainer+0x7e>
            {
                if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
 8002eec:	693b      	ldr	r3, [r7, #16]
 8002eee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d021      	beq.n	8002f38 <prvNotifyQueueSetContainer+0xac>
                {
                    if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
 8002ef4:	693b      	ldr	r3, [r7, #16]
 8002ef6:	3324      	adds	r3, #36	@ 0x24
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f000 fd1d 	bl	8003938 <xTaskRemoveFromEventList>
 8002efe:	4603      	mov	r3, r0
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d019      	beq.n	8002f38 <prvNotifyQueueSetContainer+0xac>
                    {
                        /* The task waiting has a higher priority. */
                        xReturn = pdTRUE;
 8002f04:	2301      	movs	r3, #1
 8002f06:	617b      	str	r3, [r7, #20]
 8002f08:	e016      	b.n	8002f38 <prvNotifyQueueSetContainer+0xac>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else
            {
                prvIncrementQueueTxLock( pxQueueSetContainer, cTxLock );
 8002f0a:	f000 fb47 	bl	800359c <uxTaskGetNumberOfTasks>
 8002f0e:	60b8      	str	r0, [r7, #8]
 8002f10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f14:	68ba      	ldr	r2, [r7, #8]
 8002f16:	429a      	cmp	r2, r3
 8002f18:	d90e      	bls.n	8002f38 <prvNotifyQueueSetContainer+0xac>
 8002f1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f1e:	2b7f      	cmp	r3, #127	@ 0x7f
 8002f20:	d103      	bne.n	8002f2a <prvNotifyQueueSetContainer+0x9e>
 8002f22:	f001 fcaf 	bl	8004884 <ulSetInterruptMask>
 8002f26:	bf00      	nop
 8002f28:	e7fd      	b.n	8002f26 <prvNotifyQueueSetContainer+0x9a>
 8002f2a:	7bfb      	ldrb	r3, [r7, #15]
 8002f2c:	3301      	adds	r3, #1
 8002f2e:	b2db      	uxtb	r3, r3
 8002f30:	b25a      	sxtb	r2, r3
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8002f38:	697b      	ldr	r3, [r7, #20]
    }
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	3718      	adds	r7, #24
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}

08002f42 <prvCreateStaticTask>:
                                        void * const pvParameters,
                                        UBaseType_t uxPriority,
                                        StackType_t * const puxStackBuffer,
                                        StaticTask_t * const pxTaskBuffer,
                                        TaskHandle_t * const pxCreatedTask )
    {
 8002f42:	b580      	push	{r7, lr}
 8002f44:	b08a      	sub	sp, #40	@ 0x28
 8002f46:	af04      	add	r7, sp, #16
 8002f48:	60f8      	str	r0, [r7, #12]
 8002f4a:	60b9      	str	r1, [r7, #8]
 8002f4c:	607a      	str	r2, [r7, #4]
 8002f4e:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;

        configASSERT( puxStackBuffer != NULL );
 8002f50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d103      	bne.n	8002f5e <prvCreateStaticTask+0x1c>
 8002f56:	f001 fc95 	bl	8004884 <ulSetInterruptMask>
 8002f5a:	bf00      	nop
 8002f5c:	e7fd      	b.n	8002f5a <prvCreateStaticTask+0x18>
        configASSERT( pxTaskBuffer != NULL );
 8002f5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d103      	bne.n	8002f6c <prvCreateStaticTask+0x2a>
 8002f64:	f001 fc8e 	bl	8004884 <ulSetInterruptMask>
 8002f68:	bf00      	nop
 8002f6a:	e7fd      	b.n	8002f68 <prvCreateStaticTask+0x26>
        #if ( configASSERT_DEFINED == 1 )
        {
            /* Sanity check that the size of the structure used to declare a
             * variable of type StaticTask_t equals the size of the real task
             * structure. */
            volatile size_t xSize = sizeof( StaticTask_t );
 8002f6c:	2364      	movs	r3, #100	@ 0x64
 8002f6e:	613b      	str	r3, [r7, #16]
            configASSERT( xSize == sizeof( TCB_t ) );
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	2b64      	cmp	r3, #100	@ 0x64
 8002f74:	d003      	beq.n	8002f7e <prvCreateStaticTask+0x3c>
 8002f76:	f001 fc85 	bl	8004884 <ulSetInterruptMask>
 8002f7a:	bf00      	nop
 8002f7c:	e7fd      	b.n	8002f7a <prvCreateStaticTask+0x38>
            ( void ) xSize; /* Prevent unused variable warning when configASSERT() is not used. */
 8002f7e:	693b      	ldr	r3, [r7, #16]
        }
        #endif /* configASSERT_DEFINED */

        if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002f80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d01b      	beq.n	8002fbe <prvCreateStaticTask+0x7c>
 8002f86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d018      	beq.n	8002fbe <prvCreateStaticTask+0x7c>
            /* The memory used for the task's TCB and stack are passed into this
             * function - use them. */
            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxNewTCB = ( TCB_t * ) pxTaskBuffer;
 8002f8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f8e:	617b      	str	r3, [r7, #20]
            ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8002f90:	2264      	movs	r2, #100	@ 0x64
 8002f92:	2100      	movs	r1, #0
 8002f94:	6978      	ldr	r0, [r7, #20]
 8002f96:	f001 fd39 	bl	8004a0c <memset>
            pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002f9a:	697b      	ldr	r3, [r7, #20]
 8002f9c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f9e:	631a      	str	r2, [r3, #48]	@ 0x30
                 * task was created statically in case the task is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	9303      	str	r3, [sp, #12]
 8002fa4:	697b      	ldr	r3, [r7, #20]
 8002fa6:	9302      	str	r3, [sp, #8]
 8002fa8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002faa:	9301      	str	r3, [sp, #4]
 8002fac:	6a3b      	ldr	r3, [r7, #32]
 8002fae:	9300      	str	r3, [sp, #0]
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	687a      	ldr	r2, [r7, #4]
 8002fb4:	68b9      	ldr	r1, [r7, #8]
 8002fb6:	68f8      	ldr	r0, [r7, #12]
 8002fb8:	f000 f82c 	bl	8003014 <prvInitialiseNewTask>
 8002fbc:	e001      	b.n	8002fc2 <prvCreateStaticTask+0x80>
        }
        else
        {
            pxNewTCB = NULL;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	617b      	str	r3, [r7, #20]
        }

        return pxNewTCB;
 8002fc2:	697b      	ldr	r3, [r7, #20]
    }
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	3718      	adds	r7, #24
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bd80      	pop	{r7, pc}

08002fcc <xTaskCreateStatic>:
                                    const configSTACK_DEPTH_TYPE uxStackDepth,
                                    void * const pvParameters,
                                    UBaseType_t uxPriority,
                                    StackType_t * const puxStackBuffer,
                                    StaticTask_t * const pxTaskBuffer )
    {
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b08a      	sub	sp, #40	@ 0x28
 8002fd0:	af04      	add	r7, sp, #16
 8002fd2:	60f8      	str	r0, [r7, #12]
 8002fd4:	60b9      	str	r1, [r7, #8]
 8002fd6:	607a      	str	r2, [r7, #4]
 8002fd8:	603b      	str	r3, [r7, #0]
        TaskHandle_t xReturn = NULL;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	613b      	str	r3, [r7, #16]
        TCB_t * pxNewTCB;

        traceENTER_xTaskCreateStatic( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, puxStackBuffer, pxTaskBuffer );

        pxNewTCB = prvCreateStaticTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, puxStackBuffer, pxTaskBuffer, &xReturn );
 8002fde:	f107 0310 	add.w	r3, r7, #16
 8002fe2:	9303      	str	r3, [sp, #12]
 8002fe4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fe6:	9302      	str	r3, [sp, #8]
 8002fe8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fea:	9301      	str	r3, [sp, #4]
 8002fec:	6a3b      	ldr	r3, [r7, #32]
 8002fee:	9300      	str	r3, [sp, #0]
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	687a      	ldr	r2, [r7, #4]
 8002ff4:	68b9      	ldr	r1, [r7, #8]
 8002ff6:	68f8      	ldr	r0, [r7, #12]
 8002ff8:	f7ff ffa3 	bl	8002f42 <prvCreateStaticTask>
 8002ffc:	6178      	str	r0, [r7, #20]

        if( pxNewTCB != NULL )
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d002      	beq.n	800300a <xTaskCreateStatic+0x3e>
                /* Set the task's affinity before scheduling it. */
                pxNewTCB->uxCoreAffinityMask = configTASK_DEFAULT_CORE_AFFINITY;
            }
            #endif

            prvAddNewTaskToReadyList( pxNewTCB );
 8003004:	6978      	ldr	r0, [r7, #20]
 8003006:	f000 f887 	bl	8003118 <prvAddNewTaskToReadyList>
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xTaskCreateStatic( xReturn );

        return xReturn;
 800300a:	693b      	ldr	r3, [r7, #16]
    }
 800300c:	4618      	mov	r0, r3
 800300e:	3718      	adds	r7, #24
 8003010:	46bd      	mov	sp, r7
 8003012:	bd80      	pop	{r7, pc}

08003014 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b086      	sub	sp, #24
 8003018:	af00      	add	r7, sp, #0
 800301a:	60f8      	str	r0, [r7, #12]
 800301c:	60b9      	str	r1, [r7, #8]
 800301e:	607a      	str	r2, [r7, #4]
 8003020:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) uxStackDepth * sizeof( StackType_t ) );
 8003022:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003024:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	009b      	lsls	r3, r3, #2
 800302a:	461a      	mov	r2, r3
 800302c:	21a5      	movs	r1, #165	@ 0xa5
 800302e:	f001 fced 	bl	8004a0c <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 ] );
 8003032:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003034:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800303c:	3b01      	subs	r3, #1
 800303e:	009b      	lsls	r3, r3, #2
 8003040:	4413      	add	r3, r2
 8003042:	613b      	str	r3, [r7, #16]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	f023 0307 	bic.w	r3, r3, #7
 800304a:	613b      	str	r3, [r7, #16]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0U ) );
 800304c:	693b      	ldr	r3, [r7, #16]
 800304e:	f003 0307 	and.w	r3, r3, #7
 8003052:	2b00      	cmp	r3, #0
 8003054:	d003      	beq.n	800305e <prvInitialiseNewTask+0x4a>
 8003056:	f001 fc15 	bl	8004884 <ulSetInterruptMask>
 800305a:	bf00      	nop
 800305c:	e7fd      	b.n	800305a <prvInitialiseNewTask+0x46>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d01e      	beq.n	80030a2 <prvInitialiseNewTask+0x8e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003064:	2300      	movs	r3, #0
 8003066:	617b      	str	r3, [r7, #20]
 8003068:	e012      	b.n	8003090 <prvInitialiseNewTask+0x7c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800306a:	68ba      	ldr	r2, [r7, #8]
 800306c:	697b      	ldr	r3, [r7, #20]
 800306e:	4413      	add	r3, r2
 8003070:	7819      	ldrb	r1, [r3, #0]
 8003072:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	4413      	add	r3, r2
 8003078:	3334      	adds	r3, #52	@ 0x34
 800307a:	460a      	mov	r2, r1
 800307c:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800307e:	68ba      	ldr	r2, [r7, #8]
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	4413      	add	r3, r2
 8003084:	781b      	ldrb	r3, [r3, #0]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d006      	beq.n	8003098 <prvInitialiseNewTask+0x84>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	3301      	adds	r3, #1
 800308e:	617b      	str	r3, [r7, #20]
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	2b0f      	cmp	r3, #15
 8003094:	d9e9      	bls.n	800306a <prvInitialiseNewTask+0x56>
 8003096:	e000      	b.n	800309a <prvInitialiseNewTask+0x86>
            {
                break;
 8003098:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1U ] = '\0';
 800309a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800309c:	2200      	movs	r2, #0
 800309e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 80030a2:	6a3b      	ldr	r3, [r7, #32]
 80030a4:	2b04      	cmp	r3, #4
 80030a6:	d903      	bls.n	80030b0 <prvInitialiseNewTask+0x9c>
 80030a8:	f001 fbec 	bl	8004884 <ulSetInterruptMask>
 80030ac:	bf00      	nop
 80030ae:	e7fd      	b.n	80030ac <prvInitialiseNewTask+0x98>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80030b0:	6a3b      	ldr	r3, [r7, #32]
 80030b2:	2b04      	cmp	r3, #4
 80030b4:	d901      	bls.n	80030ba <prvInitialiseNewTask+0xa6>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80030b6:	2304      	movs	r3, #4
 80030b8:	623b      	str	r3, [r7, #32]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80030ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030bc:	6a3a      	ldr	r2, [r7, #32]
 80030be:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 80030c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030c2:	6a3a      	ldr	r2, [r7, #32]
 80030c4:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80030c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030c8:	3304      	adds	r3, #4
 80030ca:	4618      	mov	r0, r3
 80030cc:	f7ff fb4e 	bl	800276c <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80030d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030d2:	3318      	adds	r3, #24
 80030d4:	4618      	mov	r0, r3
 80030d6:	f7ff fb49 	bl	800276c <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80030da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030dc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80030de:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority );
 80030e0:	6a3b      	ldr	r3, [r7, #32]
 80030e2:	f1c3 0205 	rsb	r2, r3, #5
 80030e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030e8:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80030ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030ec:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80030ee:	625a      	str	r2, [r3, #36]	@ 0x24
         * function as well. */
        #if ( portHAS_STACK_OVERFLOW_CHECKING == 1 )
        {
            #if ( portSTACK_GROWTH < 0 )
            {
                pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pvParameters );
 80030f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030f2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	68fa      	ldr	r2, [r7, #12]
 80030f8:	6938      	ldr	r0, [r7, #16]
 80030fa:	f001 fa7d 	bl	80045f8 <pxPortInitialiseStack>
 80030fe:	4602      	mov	r2, r0
 8003100:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003102:	601a      	str	r2, [r3, #0]
            pxNewTCB->uxTaskAttributes |= taskATTRIBUTE_IS_IDLE;
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES > 1 ) */

    if( pxCreatedTask != NULL )
 8003104:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003106:	2b00      	cmp	r3, #0
 8003108:	d002      	beq.n	8003110 <prvInitialiseNewTask+0xfc>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800310a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800310c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800310e:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003110:	bf00      	nop
 8003112:	3718      	adds	r7, #24
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}

08003118 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )

    static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
    {
 8003118:	b580      	push	{r7, lr}
 800311a:	b084      	sub	sp, #16
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
        /* Ensure interrupts don't access the task lists while the lists are being
         * updated. */
        taskENTER_CRITICAL();
 8003120:	f001 fa0c 	bl	800453c <vPortEnterCritical>
        {
            uxCurrentNumberOfTasks = ( UBaseType_t ) ( uxCurrentNumberOfTasks + 1U );
 8003124:	4b3e      	ldr	r3, [pc, #248]	@ (8003220 <prvAddNewTaskToReadyList+0x108>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	3301      	adds	r3, #1
 800312a:	4a3d      	ldr	r2, [pc, #244]	@ (8003220 <prvAddNewTaskToReadyList+0x108>)
 800312c:	6013      	str	r3, [r2, #0]

            if( pxCurrentTCB == NULL )
 800312e:	4b3d      	ldr	r3, [pc, #244]	@ (8003224 <prvAddNewTaskToReadyList+0x10c>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d109      	bne.n	800314a <prvAddNewTaskToReadyList+0x32>
            {
                /* There are no other tasks, or all the other tasks are in
                 * the suspended state - make this the current task. */
                pxCurrentTCB = pxNewTCB;
 8003136:	4a3b      	ldr	r2, [pc, #236]	@ (8003224 <prvAddNewTaskToReadyList+0x10c>)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6013      	str	r3, [r2, #0]

                if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800313c:	4b38      	ldr	r3, [pc, #224]	@ (8003220 <prvAddNewTaskToReadyList+0x108>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	2b01      	cmp	r3, #1
 8003142:	d110      	bne.n	8003166 <prvAddNewTaskToReadyList+0x4e>
                {
                    /* This is the first task to be created so do the preliminary
                     * initialisation required.  We will not recover if this call
                     * fails, but we will report the failure. */
                    prvInitialiseTaskLists();
 8003144:	f000 fd54 	bl	8003bf0 <prvInitialiseTaskLists>
 8003148:	e00d      	b.n	8003166 <prvAddNewTaskToReadyList+0x4e>
            else
            {
                /* If the scheduler is not already running, make this task the
                 * current task if it is the highest priority task to be created
                 * so far. */
                if( xSchedulerRunning == pdFALSE )
 800314a:	4b37      	ldr	r3, [pc, #220]	@ (8003228 <prvAddNewTaskToReadyList+0x110>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d109      	bne.n	8003166 <prvAddNewTaskToReadyList+0x4e>
                {
                    if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003152:	4b34      	ldr	r3, [pc, #208]	@ (8003224 <prvAddNewTaskToReadyList+0x10c>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800315c:	429a      	cmp	r2, r3
 800315e:	d802      	bhi.n	8003166 <prvAddNewTaskToReadyList+0x4e>
                    {
                        pxCurrentTCB = pxNewTCB;
 8003160:	4a30      	ldr	r2, [pc, #192]	@ (8003224 <prvAddNewTaskToReadyList+0x10c>)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6013      	str	r3, [r2, #0]
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            uxTaskNumber++;
 8003166:	4b31      	ldr	r3, [pc, #196]	@ (800322c <prvAddNewTaskToReadyList+0x114>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	3301      	adds	r3, #1
 800316c:	4a2f      	ldr	r2, [pc, #188]	@ (800322c <prvAddNewTaskToReadyList+0x114>)
 800316e:	6013      	str	r3, [r2, #0]

            #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003170:	4b2e      	ldr	r3, [pc, #184]	@ (800322c <prvAddNewTaskToReadyList+0x114>)
 8003172:	681a      	ldr	r2, [r3, #0]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	645a      	str	r2, [r3, #68]	@ 0x44
            }
            #endif /* configUSE_TRACE_FACILITY */
            traceTASK_CREATE( pxNewTCB );

            prvAddTaskToReadyList( pxNewTCB );
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800317c:	2201      	movs	r2, #1
 800317e:	409a      	lsls	r2, r3
 8003180:	4b2b      	ldr	r3, [pc, #172]	@ (8003230 <prvAddNewTaskToReadyList+0x118>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4313      	orrs	r3, r2
 8003186:	4a2a      	ldr	r2, [pc, #168]	@ (8003230 <prvAddNewTaskToReadyList+0x118>)
 8003188:	6013      	str	r3, [r2, #0]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800318e:	4929      	ldr	r1, [pc, #164]	@ (8003234 <prvAddNewTaskToReadyList+0x11c>)
 8003190:	4613      	mov	r3, r2
 8003192:	009b      	lsls	r3, r3, #2
 8003194:	4413      	add	r3, r2
 8003196:	009b      	lsls	r3, r3, #2
 8003198:	440b      	add	r3, r1
 800319a:	3304      	adds	r3, #4
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	60fb      	str	r3, [r7, #12]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	68fa      	ldr	r2, [r7, #12]
 80031a4:	609a      	str	r2, [r3, #8]
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	689a      	ldr	r2, [r3, #8]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	60da      	str	r2, [r3, #12]
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	689b      	ldr	r3, [r3, #8]
 80031b2:	687a      	ldr	r2, [r7, #4]
 80031b4:	3204      	adds	r2, #4
 80031b6:	605a      	str	r2, [r3, #4]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	1d1a      	adds	r2, r3, #4
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	609a      	str	r2, [r3, #8]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80031c4:	4613      	mov	r3, r2
 80031c6:	009b      	lsls	r3, r3, #2
 80031c8:	4413      	add	r3, r2
 80031ca:	009b      	lsls	r3, r3, #2
 80031cc:	4a19      	ldr	r2, [pc, #100]	@ (8003234 <prvAddNewTaskToReadyList+0x11c>)
 80031ce:	441a      	add	r2, r3
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	615a      	str	r2, [r3, #20]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80031d8:	4916      	ldr	r1, [pc, #88]	@ (8003234 <prvAddNewTaskToReadyList+0x11c>)
 80031da:	4613      	mov	r3, r2
 80031dc:	009b      	lsls	r3, r3, #2
 80031de:	4413      	add	r3, r2
 80031e0:	009b      	lsls	r3, r3, #2
 80031e2:	440b      	add	r3, r1
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	687a      	ldr	r2, [r7, #4]
 80031e8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80031ea:	1c59      	adds	r1, r3, #1
 80031ec:	4811      	ldr	r0, [pc, #68]	@ (8003234 <prvAddNewTaskToReadyList+0x11c>)
 80031ee:	4613      	mov	r3, r2
 80031f0:	009b      	lsls	r3, r3, #2
 80031f2:	4413      	add	r3, r2
 80031f4:	009b      	lsls	r3, r3, #2
 80031f6:	4403      	add	r3, r0
 80031f8:	6019      	str	r1, [r3, #0]

            portSETUP_TCB( pxNewTCB );
        }
        taskEXIT_CRITICAL();
 80031fa:	f001 f9b1 	bl	8004560 <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 80031fe:	4b0a      	ldr	r3, [pc, #40]	@ (8003228 <prvAddNewTaskToReadyList+0x110>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d008      	beq.n	8003218 <prvAddNewTaskToReadyList+0x100>
        {
            /* If the created task is of a higher priority than the current task
             * then it should run now. */
            taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxNewTCB );
 8003206:	4b07      	ldr	r3, [pc, #28]	@ (8003224 <prvAddNewTaskToReadyList+0x10c>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003210:	429a      	cmp	r2, r3
 8003212:	d201      	bcs.n	8003218 <prvAddNewTaskToReadyList+0x100>
 8003214:	f001 f980 	bl	8004518 <vPortYield>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8003218:	bf00      	nop
 800321a:	3710      	adds	r7, #16
 800321c:	46bd      	mov	sp, r7
 800321e:	bd80      	pop	{r7, pc}
 8003220:	20000198 	.word	0x20000198
 8003224:	200000c0 	.word	0x200000c0
 8003228:	200001a4 	.word	0x200001a4
 800322c:	200001b4 	.word	0x200001b4
 8003230:	200001a0 	.word	0x200001a0
 8003234:	200000c4 	.word	0x200000c4

08003238 <prvCreateIdleTasks>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

static BaseType_t prvCreateIdleTasks( void )
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b090      	sub	sp, #64	@ 0x40
 800323c:	af04      	add	r7, sp, #16
    BaseType_t xReturn = pdPASS;
 800323e:	2301      	movs	r3, #1
 8003240:	62fb      	str	r3, [r7, #44]	@ 0x2c
    BaseType_t xCoreID;
    char cIdleName[ configMAX_TASK_NAME_LEN ];
    TaskFunction_t pxIdleTaskFunction = NULL;
 8003242:	2300      	movs	r3, #0
 8003244:	623b      	str	r3, [r7, #32]
    BaseType_t xIdleTaskNameIndex;

    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 8003246:	2300      	movs	r3, #0
 8003248:	627b      	str	r3, [r7, #36]	@ 0x24
 800324a:	e013      	b.n	8003274 <prvCreateIdleTasks+0x3c>
    {
        cIdleName[ xIdleTaskNameIndex ] = configIDLE_TASK_NAME[ xIdleTaskNameIndex ];
 800324c:	4a2b      	ldr	r2, [pc, #172]	@ (80032fc <prvCreateIdleTasks+0xc4>)
 800324e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003250:	4413      	add	r3, r2
 8003252:	7819      	ldrb	r1, [r3, #0]
 8003254:	f107 0210 	add.w	r2, r7, #16
 8003258:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800325a:	4413      	add	r3, r2
 800325c:	460a      	mov	r2, r1
 800325e:	701a      	strb	r2, [r3, #0]

        /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
         * configMAX_TASK_NAME_LEN characters just in case the memory after the
         * string is not accessible (extremely unlikely). */
        if( cIdleName[ xIdleTaskNameIndex ] == ( char ) 0x00 )
 8003260:	f107 0210 	add.w	r2, r7, #16
 8003264:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003266:	4413      	add	r3, r2
 8003268:	781b      	ldrb	r3, [r3, #0]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d006      	beq.n	800327c <prvCreateIdleTasks+0x44>
    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 800326e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003270:	3301      	adds	r3, #1
 8003272:	627b      	str	r3, [r7, #36]	@ 0x24
 8003274:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003276:	2b0f      	cmp	r3, #15
 8003278:	dde8      	ble.n	800324c <prvCreateIdleTasks+0x14>
 800327a:	e000      	b.n	800327e <prvCreateIdleTasks+0x46>
        {
            break;
 800327c:	bf00      	nop
            mtCOVERAGE_TEST_MARKER();
        }
    }

    /* Add each idle task at the lowest priority. */
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 800327e:	2300      	movs	r3, #0
 8003280:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003282:	e031      	b.n	80032e8 <prvCreateIdleTasks+0xb0>
    {
        #if ( configNUMBER_OF_CORES == 1 )
        {
            pxIdleTaskFunction = prvIdleTask;
 8003284:	4b1e      	ldr	r3, [pc, #120]	@ (8003300 <prvCreateIdleTasks+0xc8>)
 8003286:	623b      	str	r3, [r7, #32]
        }
        #endif /* if ( configNUMBER_OF_CORES > 1 ) */

        #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
        {
            StaticTask_t * pxIdleTaskTCBBuffer = NULL;
 8003288:	2300      	movs	r3, #0
 800328a:	60fb      	str	r3, [r7, #12]
            StackType_t * pxIdleTaskStackBuffer = NULL;
 800328c:	2300      	movs	r3, #0
 800328e:	60bb      	str	r3, [r7, #8]

            /* The Idle task is created using user provided RAM - obtain the
             * address of the RAM then create the idle task. */
            #if ( configNUMBER_OF_CORES == 1 )
            {
                vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &uxIdleTaskStackSize );
 8003290:	1d3a      	adds	r2, r7, #4
 8003292:	f107 0108 	add.w	r1, r7, #8
 8003296:	f107 030c 	add.w	r3, r7, #12
 800329a:	4618      	mov	r0, r3
 800329c:	f001 fb82 	bl	80049a4 <vApplicationGetIdleTaskMemory>
                {
                    vApplicationGetPassiveIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &uxIdleTaskStackSize, ( BaseType_t ) ( xCoreID - 1 ) );
                }
            }
            #endif /* if ( configNUMBER_OF_CORES == 1 ) */
            xIdleTaskHandles[ xCoreID ] = xTaskCreateStatic( pxIdleTaskFunction,
 80032a0:	6878      	ldr	r0, [r7, #4]
 80032a2:	68bb      	ldr	r3, [r7, #8]
 80032a4:	68fa      	ldr	r2, [r7, #12]
 80032a6:	f107 0110 	add.w	r1, r7, #16
 80032aa:	9202      	str	r2, [sp, #8]
 80032ac:	9301      	str	r3, [sp, #4]
 80032ae:	2300      	movs	r3, #0
 80032b0:	9300      	str	r3, [sp, #0]
 80032b2:	2300      	movs	r3, #0
 80032b4:	4602      	mov	r2, r0
 80032b6:	6a38      	ldr	r0, [r7, #32]
 80032b8:	f7ff fe88 	bl	8002fcc <xTaskCreateStatic>
 80032bc:	4602      	mov	r2, r0
 80032be:	4911      	ldr	r1, [pc, #68]	@ (8003304 <prvCreateIdleTasks+0xcc>)
 80032c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                                                             ( void * ) NULL,
                                                             portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
                                                             pxIdleTaskStackBuffer,
                                                             pxIdleTaskTCBBuffer );

            if( xIdleTaskHandles[ xCoreID ] != NULL )
 80032c6:	4a0f      	ldr	r2, [pc, #60]	@ (8003304 <prvCreateIdleTasks+0xcc>)
 80032c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d002      	beq.n	80032d8 <prvCreateIdleTasks+0xa0>
            {
                xReturn = pdPASS;
 80032d2:	2301      	movs	r3, #1
 80032d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80032d6:	e001      	b.n	80032dc <prvCreateIdleTasks+0xa4>
            }
            else
            {
                xReturn = pdFAIL;
 80032d8:	2300      	movs	r3, #0
 80032da:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                   &xIdleTaskHandles[ xCoreID ] );
        }
        #endif /* configSUPPORT_STATIC_ALLOCATION */

        /* Break the loop if any of the idle task is failed to be created. */
        if( xReturn == pdFAIL )
 80032dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d006      	beq.n	80032f0 <prvCreateIdleTasks+0xb8>
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 80032e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032e4:	3301      	adds	r3, #1
 80032e6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80032e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	ddca      	ble.n	8003284 <prvCreateIdleTasks+0x4c>
 80032ee:	e000      	b.n	80032f2 <prvCreateIdleTasks+0xba>
        {
            break;
 80032f0:	bf00      	nop
            }
            #endif
        }
    }

    return xReturn;
 80032f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	3730      	adds	r7, #48	@ 0x30
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bd80      	pop	{r7, pc}
 80032fc:	08004a98 	.word	0x08004a98
 8003300:	08003bcd 	.word	0x08003bcd
 8003304:	200001bc 	.word	0x200001bc

08003308 <vTaskStartScheduler>:

/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b082      	sub	sp, #8
 800330c:	af00      	add	r7, sp, #0
         * the number of bits as confNUMBER_OF_CORES. */
        configASSERT( ( sizeof( UBaseType_t ) * taskBITS_PER_BYTE ) >= configNUMBER_OF_CORES );
    }
    #endif /* #if ( configUSE_CORE_AFFINITY == 1 ) && ( configNUMBER_OF_CORES > 1 ) */

    xReturn = prvCreateIdleTasks();
 800330e:	f7ff ff93 	bl	8003238 <prvCreateIdleTasks>
 8003312:	6078      	str	r0, [r7, #4]

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2b01      	cmp	r3, #1
 8003318:	d102      	bne.n	8003320 <vTaskStartScheduler+0x18>
        {
            xReturn = xTimerCreateTimerTask();
 800331a:	f000 fe33 	bl	8003f84 <xTimerCreateTimerTask>
 800331e:	6078      	str	r0, [r7, #4]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2b01      	cmp	r3, #1
 8003324:	d10e      	bne.n	8003344 <vTaskStartScheduler+0x3c>
        /* Interrupts are turned off here, to ensure a tick does not occur
         * before or during the call to xPortStartScheduler().  The stacks of
         * the created tasks contain a status word with interrupts switched on
         * so interrupts will automatically get re-enabled when the first task
         * starts to run. */
        portDISABLE_INTERRUPTS();
 8003326:	f001 faad 	bl	8004884 <ulSetInterruptMask>
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 800332a:	4b0d      	ldr	r3, [pc, #52]	@ (8003360 <vTaskStartScheduler+0x58>)
 800332c:	f04f 32ff 	mov.w	r2, #4294967295
 8003330:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8003332:	4b0c      	ldr	r3, [pc, #48]	@ (8003364 <vTaskStartScheduler+0x5c>)
 8003334:	2201      	movs	r2, #1
 8003336:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003338:	4b0b      	ldr	r3, [pc, #44]	@ (8003368 <vTaskStartScheduler+0x60>)
 800333a:	2200      	movs	r2, #0
 800333c:	601a      	str	r2, [r3, #0]
        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */

        /* The return value for xPortStartScheduler is not required
         * hence using a void datatype. */
        ( void ) xPortStartScheduler();
 800333e:	f001 f9e5 	bl	800470c <xPortStartScheduler>
 8003342:	e007      	b.n	8003354 <vTaskStartScheduler+0x4c>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	f1b3 3fff 	cmp.w	r3, #4294967295
 800334a:	d103      	bne.n	8003354 <vTaskStartScheduler+0x4c>
 800334c:	f001 fa9a 	bl	8004884 <ulSetInterruptMask>
 8003350:	bf00      	nop
 8003352:	e7fd      	b.n	8003350 <vTaskStartScheduler+0x48>
     * meaning xIdleTaskHandles are not used anywhere else. */
    ( void ) xIdleTaskHandles;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8003354:	4b05      	ldr	r3, [pc, #20]	@ (800336c <vTaskStartScheduler+0x64>)
 8003356:	681b      	ldr	r3, [r3, #0]

    traceRETURN_vTaskStartScheduler();
}
 8003358:	bf00      	nop
 800335a:	3708      	adds	r7, #8
 800335c:	46bd      	mov	sp, r7
 800335e:	bd80      	pop	{r7, pc}
 8003360:	200001b8 	.word	0x200001b8
 8003364:	200001a4 	.word	0x200001a4
 8003368:	2000019c 	.word	0x2000019c
 800336c:	2000000c 	.word	0x2000000c

08003370 <vTaskSuspendAll>:
    traceRETURN_vTaskEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003370:	b480      	push	{r7}
 8003372:	af00      	add	r7, sp, #0
         * do not otherwise exhibit real time behaviour. */
        portSOFTWARE_BARRIER();

        /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
         * is used to allow calls to vTaskSuspendAll() to nest. */
        uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended + 1U );
 8003374:	4b04      	ldr	r3, [pc, #16]	@ (8003388 <vTaskSuspendAll+0x18>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	3301      	adds	r3, #1
 800337a:	4a03      	ldr	r2, [pc, #12]	@ (8003388 <vTaskSuspendAll+0x18>)
 800337c:	6013      	str	r3, [r2, #0]
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_vTaskSuspendAll();
}
 800337e:	bf00      	nop
 8003380:	46bd      	mov	sp, r7
 8003382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003386:	4770      	bx	lr
 8003388:	200001c0 	.word	0x200001c0

0800338c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b088      	sub	sp, #32
 8003390:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8003392:	2300      	movs	r3, #0
 8003394:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8003396:	2300      	movs	r3, #0
 8003398:	61bb      	str	r3, [r7, #24]
        /* It is possible that an ISR caused a task to be removed from an event
         * list while the scheduler was suspended.  If this was the case then the
         * removed task will have been added to the xPendingReadyList.  Once the
         * scheduler has been resumed it is safe to move all the pending ready
         * tasks from this list into their appropriate ready list. */
        taskENTER_CRITICAL();
 800339a:	f001 f8cf 	bl	800453c <vPortEnterCritical>
        {
            BaseType_t xCoreID;
            xCoreID = ( BaseType_t ) portGET_CORE_ID();
 800339e:	2300      	movs	r3, #0
 80033a0:	613b      	str	r3, [r7, #16]

            /* If uxSchedulerSuspended is zero then this function does not match a
             * previous call to vTaskSuspendAll(). */
            configASSERT( uxSchedulerSuspended != 0U );
 80033a2:	4b6e      	ldr	r3, [pc, #440]	@ (800355c <xTaskResumeAll+0x1d0>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d103      	bne.n	80033b2 <xTaskResumeAll+0x26>
 80033aa:	f001 fa6b 	bl	8004884 <ulSetInterruptMask>
 80033ae:	bf00      	nop
 80033b0:	e7fd      	b.n	80033ae <xTaskResumeAll+0x22>

            uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended - 1U );
 80033b2:	4b6a      	ldr	r3, [pc, #424]	@ (800355c <xTaskResumeAll+0x1d0>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	3b01      	subs	r3, #1
 80033b8:	4a68      	ldr	r2, [pc, #416]	@ (800355c <xTaskResumeAll+0x1d0>)
 80033ba:	6013      	str	r3, [r2, #0]
            portRELEASE_TASK_LOCK();

            if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 80033bc:	4b67      	ldr	r3, [pc, #412]	@ (800355c <xTaskResumeAll+0x1d0>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	f040 80c4 	bne.w	800354e <xTaskResumeAll+0x1c2>
            {
                if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80033c6:	4b66      	ldr	r3, [pc, #408]	@ (8003560 <xTaskResumeAll+0x1d4>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	f000 80bf 	beq.w	800354e <xTaskResumeAll+0x1c2>
                {
                    /* Move any readied tasks from the pending list into the
                     * appropriate ready list. */
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80033d0:	e08e      	b.n	80034f0 <xTaskResumeAll+0x164>
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80033d2:	4b64      	ldr	r3, [pc, #400]	@ (8003564 <xTaskResumeAll+0x1d8>)
 80033d4:	68db      	ldr	r3, [r3, #12]
 80033d6:	68db      	ldr	r3, [r3, #12]
 80033d8:	61fb      	str	r3, [r7, #28]
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80033da:	69fb      	ldr	r3, [r7, #28]
 80033dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033de:	60fb      	str	r3, [r7, #12]
 80033e0:	69fb      	ldr	r3, [r7, #28]
 80033e2:	69db      	ldr	r3, [r3, #28]
 80033e4:	69fa      	ldr	r2, [r7, #28]
 80033e6:	6a12      	ldr	r2, [r2, #32]
 80033e8:	609a      	str	r2, [r3, #8]
 80033ea:	69fb      	ldr	r3, [r7, #28]
 80033ec:	6a1b      	ldr	r3, [r3, #32]
 80033ee:	69fa      	ldr	r2, [r7, #28]
 80033f0:	69d2      	ldr	r2, [r2, #28]
 80033f2:	605a      	str	r2, [r3, #4]
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	685a      	ldr	r2, [r3, #4]
 80033f8:	69fb      	ldr	r3, [r7, #28]
 80033fa:	3318      	adds	r3, #24
 80033fc:	429a      	cmp	r2, r3
 80033fe:	d103      	bne.n	8003408 <xTaskResumeAll+0x7c>
 8003400:	69fb      	ldr	r3, [r7, #28]
 8003402:	6a1a      	ldr	r2, [r3, #32]
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	605a      	str	r2, [r3, #4]
 8003408:	69fb      	ldr	r3, [r7, #28]
 800340a:	2200      	movs	r2, #0
 800340c:	629a      	str	r2, [r3, #40]	@ 0x28
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	1e5a      	subs	r2, r3, #1
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	601a      	str	r2, [r3, #0]
                        portMEMORY_BARRIER();
                        listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003418:	69fb      	ldr	r3, [r7, #28]
 800341a:	695b      	ldr	r3, [r3, #20]
 800341c:	60bb      	str	r3, [r7, #8]
 800341e:	69fb      	ldr	r3, [r7, #28]
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	69fa      	ldr	r2, [r7, #28]
 8003424:	68d2      	ldr	r2, [r2, #12]
 8003426:	609a      	str	r2, [r3, #8]
 8003428:	69fb      	ldr	r3, [r7, #28]
 800342a:	68db      	ldr	r3, [r3, #12]
 800342c:	69fa      	ldr	r2, [r7, #28]
 800342e:	6892      	ldr	r2, [r2, #8]
 8003430:	605a      	str	r2, [r3, #4]
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	685a      	ldr	r2, [r3, #4]
 8003436:	69fb      	ldr	r3, [r7, #28]
 8003438:	3304      	adds	r3, #4
 800343a:	429a      	cmp	r2, r3
 800343c:	d103      	bne.n	8003446 <xTaskResumeAll+0xba>
 800343e:	69fb      	ldr	r3, [r7, #28]
 8003440:	68da      	ldr	r2, [r3, #12]
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	605a      	str	r2, [r3, #4]
 8003446:	69fb      	ldr	r3, [r7, #28]
 8003448:	2200      	movs	r2, #0
 800344a:	615a      	str	r2, [r3, #20]
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	1e5a      	subs	r2, r3, #1
 8003452:	68bb      	ldr	r3, [r7, #8]
 8003454:	601a      	str	r2, [r3, #0]
                        prvAddTaskToReadyList( pxTCB );
 8003456:	69fb      	ldr	r3, [r7, #28]
 8003458:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800345a:	2201      	movs	r2, #1
 800345c:	409a      	lsls	r2, r3
 800345e:	4b42      	ldr	r3, [pc, #264]	@ (8003568 <xTaskResumeAll+0x1dc>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4313      	orrs	r3, r2
 8003464:	4a40      	ldr	r2, [pc, #256]	@ (8003568 <xTaskResumeAll+0x1dc>)
 8003466:	6013      	str	r3, [r2, #0]
 8003468:	69fb      	ldr	r3, [r7, #28]
 800346a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800346c:	493f      	ldr	r1, [pc, #252]	@ (800356c <xTaskResumeAll+0x1e0>)
 800346e:	4613      	mov	r3, r2
 8003470:	009b      	lsls	r3, r3, #2
 8003472:	4413      	add	r3, r2
 8003474:	009b      	lsls	r3, r3, #2
 8003476:	440b      	add	r3, r1
 8003478:	3304      	adds	r3, #4
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	607b      	str	r3, [r7, #4]
 800347e:	69fb      	ldr	r3, [r7, #28]
 8003480:	687a      	ldr	r2, [r7, #4]
 8003482:	609a      	str	r2, [r3, #8]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	689a      	ldr	r2, [r3, #8]
 8003488:	69fb      	ldr	r3, [r7, #28]
 800348a:	60da      	str	r2, [r3, #12]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	69fa      	ldr	r2, [r7, #28]
 8003492:	3204      	adds	r2, #4
 8003494:	605a      	str	r2, [r3, #4]
 8003496:	69fb      	ldr	r3, [r7, #28]
 8003498:	1d1a      	adds	r2, r3, #4
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	609a      	str	r2, [r3, #8]
 800349e:	69fb      	ldr	r3, [r7, #28]
 80034a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80034a2:	4613      	mov	r3, r2
 80034a4:	009b      	lsls	r3, r3, #2
 80034a6:	4413      	add	r3, r2
 80034a8:	009b      	lsls	r3, r3, #2
 80034aa:	4a30      	ldr	r2, [pc, #192]	@ (800356c <xTaskResumeAll+0x1e0>)
 80034ac:	441a      	add	r2, r3
 80034ae:	69fb      	ldr	r3, [r7, #28]
 80034b0:	615a      	str	r2, [r3, #20]
 80034b2:	69fb      	ldr	r3, [r7, #28]
 80034b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80034b6:	492d      	ldr	r1, [pc, #180]	@ (800356c <xTaskResumeAll+0x1e0>)
 80034b8:	4613      	mov	r3, r2
 80034ba:	009b      	lsls	r3, r3, #2
 80034bc:	4413      	add	r3, r2
 80034be:	009b      	lsls	r3, r3, #2
 80034c0:	440b      	add	r3, r1
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	69fa      	ldr	r2, [r7, #28]
 80034c6:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80034c8:	1c59      	adds	r1, r3, #1
 80034ca:	4828      	ldr	r0, [pc, #160]	@ (800356c <xTaskResumeAll+0x1e0>)
 80034cc:	4613      	mov	r3, r2
 80034ce:	009b      	lsls	r3, r3, #2
 80034d0:	4413      	add	r3, r2
 80034d2:	009b      	lsls	r3, r3, #2
 80034d4:	4403      	add	r3, r0
 80034d6:	6019      	str	r1, [r3, #0]

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            /* If the moved task has a priority higher than the current
                             * task then a yield must be performed. */
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80034d8:	69fb      	ldr	r3, [r7, #28]
 80034da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80034dc:	4b24      	ldr	r3, [pc, #144]	@ (8003570 <xTaskResumeAll+0x1e4>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034e2:	429a      	cmp	r2, r3
 80034e4:	d904      	bls.n	80034f0 <xTaskResumeAll+0x164>
                            {
                                xYieldPendings[ xCoreID ] = pdTRUE;
 80034e6:	4a23      	ldr	r2, [pc, #140]	@ (8003574 <xTaskResumeAll+0x1e8>)
 80034e8:	693b      	ldr	r3, [r7, #16]
 80034ea:	2101      	movs	r1, #1
 80034ec:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80034f0:	4b1c      	ldr	r3, [pc, #112]	@ (8003564 <xTaskResumeAll+0x1d8>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	f47f af6c 	bne.w	80033d2 <xTaskResumeAll+0x46>
                             * which sets xYieldPendings for the current core to pdTRUE. */
                        }
                        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
                    }

                    if( pxTCB != NULL )
 80034fa:	69fb      	ldr	r3, [r7, #28]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d001      	beq.n	8003504 <xTaskResumeAll+0x178>
                         * which may have prevented the next unblock time from being
                         * re-calculated, in which case re-calculate it now.  Mainly
                         * important for low power tickless implementations, where
                         * this can prevent an unnecessary exit from low power
                         * state. */
                        prvResetNextTaskUnblockTime();
 8003500:	f000 fbee 	bl	8003ce0 <prvResetNextTaskUnblockTime>
                     * It should be safe to call xTaskIncrementTick here from any core
                     * since we are in a critical section and xTaskIncrementTick itself
                     * protects itself within a critical section. Suspending the scheduler
                     * from any core causes xTaskIncrementTick to increment uxPendedCounts. */
                    {
                        TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003504:	4b1c      	ldr	r3, [pc, #112]	@ (8003578 <xTaskResumeAll+0x1ec>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	617b      	str	r3, [r7, #20]

                        if( xPendedCounts > ( TickType_t ) 0U )
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d012      	beq.n	8003536 <xTaskResumeAll+0x1aa>
                        {
                            do
                            {
                                if( xTaskIncrementTick() != pdFALSE )
 8003510:	f000 f850 	bl	80035b4 <xTaskIncrementTick>
 8003514:	4603      	mov	r3, r0
 8003516:	2b00      	cmp	r3, #0
 8003518:	d004      	beq.n	8003524 <xTaskResumeAll+0x198>
                                {
                                    /* Other cores are interrupted from
                                     * within xTaskIncrementTick(). */
                                    xYieldPendings[ xCoreID ] = pdTRUE;
 800351a:	4a16      	ldr	r2, [pc, #88]	@ (8003574 <xTaskResumeAll+0x1e8>)
 800351c:	693b      	ldr	r3, [r7, #16]
 800351e:	2101      	movs	r1, #1
 8003520:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                else
                                {
                                    mtCOVERAGE_TEST_MARKER();
                                }

                                --xPendedCounts;
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	3b01      	subs	r3, #1
 8003528:	617b      	str	r3, [r7, #20]
                            } while( xPendedCounts > ( TickType_t ) 0U );
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d1ef      	bne.n	8003510 <xTaskResumeAll+0x184>

                            xPendedTicks = 0;
 8003530:	4b11      	ldr	r3, [pc, #68]	@ (8003578 <xTaskResumeAll+0x1ec>)
 8003532:	2200      	movs	r2, #0
 8003534:	601a      	str	r2, [r3, #0]
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }

                    if( xYieldPendings[ xCoreID ] != pdFALSE )
 8003536:	4a0f      	ldr	r2, [pc, #60]	@ (8003574 <xTaskResumeAll+0x1e8>)
 8003538:	693b      	ldr	r3, [r7, #16]
 800353a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d005      	beq.n	800354e <xTaskResumeAll+0x1c2>
                    {
                        #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8003542:	2301      	movs	r3, #1
 8003544:	61bb      	str	r3, [r7, #24]
                        }
                        #endif /* #if ( configUSE_PREEMPTION != 0 ) */

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            taskYIELD_TASK_CORE_IF_USING_PREEMPTION( pxCurrentTCB );
 8003546:	4b0a      	ldr	r3, [pc, #40]	@ (8003570 <xTaskResumeAll+0x1e4>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f000 ffe5 	bl	8004518 <vPortYield>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800354e:	f001 f807 	bl	8004560 <vPortExitCritical>
    }

    traceRETURN_xTaskResumeAll( xAlreadyYielded );

    return xAlreadyYielded;
 8003552:	69bb      	ldr	r3, [r7, #24]
}
 8003554:	4618      	mov	r0, r3
 8003556:	3720      	adds	r7, #32
 8003558:	46bd      	mov	sp, r7
 800355a:	bd80      	pop	{r7, pc}
 800355c:	200001c0 	.word	0x200001c0
 8003560:	20000198 	.word	0x20000198
 8003564:	20000158 	.word	0x20000158
 8003568:	200001a0 	.word	0x200001a0
 800356c:	200000c4 	.word	0x200000c4
 8003570:	200000c0 	.word	0x200000c0
 8003574:	200001ac 	.word	0x200001ac
 8003578:	200001a8 	.word	0x200001a8

0800357c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800357c:	b480      	push	{r7}
 800357e:	b083      	sub	sp, #12
 8003580:	af00      	add	r7, sp, #0
    traceENTER_xTaskGetTickCount();

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8003582:	4b05      	ldr	r3, [pc, #20]	@ (8003598 <xTaskGetTickCount+0x1c>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    traceRETURN_xTaskGetTickCount( xTicks );

    return xTicks;
 8003588:	687b      	ldr	r3, [r7, #4]
}
 800358a:	4618      	mov	r0, r3
 800358c:	370c      	adds	r7, #12
 800358e:	46bd      	mov	sp, r7
 8003590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003594:	4770      	bx	lr
 8003596:	bf00      	nop
 8003598:	2000019c 	.word	0x2000019c

0800359c <uxTaskGetNumberOfTasks>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
 800359c:	b480      	push	{r7}
 800359e:	af00      	add	r7, sp, #0

    /* A critical section is not required because the variables are of type
     * BaseType_t. */
    traceRETURN_uxTaskGetNumberOfTasks( uxCurrentNumberOfTasks );

    return uxCurrentNumberOfTasks;
 80035a0:	4b03      	ldr	r3, [pc, #12]	@ (80035b0 <uxTaskGetNumberOfTasks+0x14>)
 80035a2:	681b      	ldr	r3, [r3, #0]
}
 80035a4:	4618      	mov	r0, r3
 80035a6:	46bd      	mov	sp, r7
 80035a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ac:	4770      	bx	lr
 80035ae:	bf00      	nop
 80035b0:	20000198 	.word	0x20000198

080035b4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b088      	sub	sp, #32
 80035b8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80035ba:	2300      	movs	r3, #0
 80035bc:	61fb      	str	r3, [r7, #28]

    /* Tick increment should occur on every kernel timer event. Core 0 has the
     * responsibility to increment the tick, or increment the pended ticks if the
     * scheduler is suspended.  If pended ticks is greater than zero, the core that
     * calls xTaskResumeAll has the responsibility to increment the tick. */
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 80035be:	4b7b      	ldr	r3, [pc, #492]	@ (80037ac <xTaskIncrementTick+0x1f8>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	f040 80e7 	bne.w	8003796 <xTaskIncrementTick+0x1e2>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80035c8:	4b79      	ldr	r3, [pc, #484]	@ (80037b0 <xTaskIncrementTick+0x1fc>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	3301      	adds	r3, #1
 80035ce:	61bb      	str	r3, [r7, #24]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80035d0:	4a77      	ldr	r2, [pc, #476]	@ (80037b0 <xTaskIncrementTick+0x1fc>)
 80035d2:	69bb      	ldr	r3, [r7, #24]
 80035d4:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U )
 80035d6:	69bb      	ldr	r3, [r7, #24]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d119      	bne.n	8003610 <xTaskIncrementTick+0x5c>
        {
            taskSWITCH_DELAYED_LISTS();
 80035dc:	4b75      	ldr	r3, [pc, #468]	@ (80037b4 <xTaskIncrementTick+0x200>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d003      	beq.n	80035ee <xTaskIncrementTick+0x3a>
 80035e6:	f001 f94d 	bl	8004884 <ulSetInterruptMask>
 80035ea:	bf00      	nop
 80035ec:	e7fd      	b.n	80035ea <xTaskIncrementTick+0x36>
 80035ee:	4b71      	ldr	r3, [pc, #452]	@ (80037b4 <xTaskIncrementTick+0x200>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	617b      	str	r3, [r7, #20]
 80035f4:	4b70      	ldr	r3, [pc, #448]	@ (80037b8 <xTaskIncrementTick+0x204>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a6e      	ldr	r2, [pc, #440]	@ (80037b4 <xTaskIncrementTick+0x200>)
 80035fa:	6013      	str	r3, [r2, #0]
 80035fc:	4a6e      	ldr	r2, [pc, #440]	@ (80037b8 <xTaskIncrementTick+0x204>)
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	6013      	str	r3, [r2, #0]
 8003602:	4b6e      	ldr	r3, [pc, #440]	@ (80037bc <xTaskIncrementTick+0x208>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	3301      	adds	r3, #1
 8003608:	4a6c      	ldr	r2, [pc, #432]	@ (80037bc <xTaskIncrementTick+0x208>)
 800360a:	6013      	str	r3, [r2, #0]
 800360c:	f000 fb68 	bl	8003ce0 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8003610:	4b6b      	ldr	r3, [pc, #428]	@ (80037c0 <xTaskIncrementTick+0x20c>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	69ba      	ldr	r2, [r7, #24]
 8003616:	429a      	cmp	r2, r3
 8003618:	f0c0 80a8 	bcc.w	800376c <xTaskIncrementTick+0x1b8>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800361c:	4b65      	ldr	r3, [pc, #404]	@ (80037b4 <xTaskIncrementTick+0x200>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d104      	bne.n	8003630 <xTaskIncrementTick+0x7c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY;
 8003626:	4b66      	ldr	r3, [pc, #408]	@ (80037c0 <xTaskIncrementTick+0x20c>)
 8003628:	f04f 32ff 	mov.w	r2, #4294967295
 800362c:	601a      	str	r2, [r3, #0]
                    break;
 800362e:	e09d      	b.n	800376c <xTaskIncrementTick+0x1b8>
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    /* MISRA Ref 11.5.3 [Void pointer assignment] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                    /* coverity[misra_c_2012_rule_11_5_violation] */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003630:	4b60      	ldr	r3, [pc, #384]	@ (80037b4 <xTaskIncrementTick+0x200>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	68db      	ldr	r3, [r3, #12]
 8003636:	68db      	ldr	r3, [r3, #12]
 8003638:	613b      	str	r3, [r7, #16]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	60fb      	str	r3, [r7, #12]

                    if( xConstTickCount < xItemValue )
 8003640:	69ba      	ldr	r2, [r7, #24]
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	429a      	cmp	r2, r3
 8003646:	d203      	bcs.n	8003650 <xTaskIncrementTick+0x9c>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8003648:	4a5d      	ldr	r2, [pc, #372]	@ (80037c0 <xTaskIncrementTick+0x20c>)
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	6013      	str	r3, [r2, #0]
                        break;
 800364e:	e08d      	b.n	800376c <xTaskIncrementTick+0x1b8>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003650:	693b      	ldr	r3, [r7, #16]
 8003652:	695b      	ldr	r3, [r3, #20]
 8003654:	60bb      	str	r3, [r7, #8]
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	693a      	ldr	r2, [r7, #16]
 800365c:	68d2      	ldr	r2, [r2, #12]
 800365e:	609a      	str	r2, [r3, #8]
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	68db      	ldr	r3, [r3, #12]
 8003664:	693a      	ldr	r2, [r7, #16]
 8003666:	6892      	ldr	r2, [r2, #8]
 8003668:	605a      	str	r2, [r3, #4]
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	685a      	ldr	r2, [r3, #4]
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	3304      	adds	r3, #4
 8003672:	429a      	cmp	r2, r3
 8003674:	d103      	bne.n	800367e <xTaskIncrementTick+0xca>
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	68da      	ldr	r2, [r3, #12]
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	605a      	str	r2, [r3, #4]
 800367e:	693b      	ldr	r3, [r7, #16]
 8003680:	2200      	movs	r2, #0
 8003682:	615a      	str	r2, [r3, #20]
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	1e5a      	subs	r2, r3, #1
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800368e:	693b      	ldr	r3, [r7, #16]
 8003690:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003692:	2b00      	cmp	r3, #0
 8003694:	d01e      	beq.n	80036d4 <xTaskIncrementTick+0x120>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800369a:	607b      	str	r3, [r7, #4]
 800369c:	693b      	ldr	r3, [r7, #16]
 800369e:	69db      	ldr	r3, [r3, #28]
 80036a0:	693a      	ldr	r2, [r7, #16]
 80036a2:	6a12      	ldr	r2, [r2, #32]
 80036a4:	609a      	str	r2, [r3, #8]
 80036a6:	693b      	ldr	r3, [r7, #16]
 80036a8:	6a1b      	ldr	r3, [r3, #32]
 80036aa:	693a      	ldr	r2, [r7, #16]
 80036ac:	69d2      	ldr	r2, [r2, #28]
 80036ae:	605a      	str	r2, [r3, #4]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	685a      	ldr	r2, [r3, #4]
 80036b4:	693b      	ldr	r3, [r7, #16]
 80036b6:	3318      	adds	r3, #24
 80036b8:	429a      	cmp	r2, r3
 80036ba:	d103      	bne.n	80036c4 <xTaskIncrementTick+0x110>
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	6a1a      	ldr	r2, [r3, #32]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	605a      	str	r2, [r3, #4]
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	2200      	movs	r2, #0
 80036c8:	629a      	str	r2, [r3, #40]	@ 0x28
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	1e5a      	subs	r2, r3, #1
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80036d4:	693b      	ldr	r3, [r7, #16]
 80036d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036d8:	2201      	movs	r2, #1
 80036da:	409a      	lsls	r2, r3
 80036dc:	4b39      	ldr	r3, [pc, #228]	@ (80037c4 <xTaskIncrementTick+0x210>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4313      	orrs	r3, r2
 80036e2:	4a38      	ldr	r2, [pc, #224]	@ (80037c4 <xTaskIncrementTick+0x210>)
 80036e4:	6013      	str	r3, [r2, #0]
 80036e6:	693b      	ldr	r3, [r7, #16]
 80036e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80036ea:	4937      	ldr	r1, [pc, #220]	@ (80037c8 <xTaskIncrementTick+0x214>)
 80036ec:	4613      	mov	r3, r2
 80036ee:	009b      	lsls	r3, r3, #2
 80036f0:	4413      	add	r3, r2
 80036f2:	009b      	lsls	r3, r3, #2
 80036f4:	440b      	add	r3, r1
 80036f6:	3304      	adds	r3, #4
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	603b      	str	r3, [r7, #0]
 80036fc:	693b      	ldr	r3, [r7, #16]
 80036fe:	683a      	ldr	r2, [r7, #0]
 8003700:	609a      	str	r2, [r3, #8]
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	689a      	ldr	r2, [r3, #8]
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	60da      	str	r2, [r3, #12]
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	689b      	ldr	r3, [r3, #8]
 800370e:	693a      	ldr	r2, [r7, #16]
 8003710:	3204      	adds	r2, #4
 8003712:	605a      	str	r2, [r3, #4]
 8003714:	693b      	ldr	r3, [r7, #16]
 8003716:	1d1a      	adds	r2, r3, #4
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	609a      	str	r2, [r3, #8]
 800371c:	693b      	ldr	r3, [r7, #16]
 800371e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003720:	4613      	mov	r3, r2
 8003722:	009b      	lsls	r3, r3, #2
 8003724:	4413      	add	r3, r2
 8003726:	009b      	lsls	r3, r3, #2
 8003728:	4a27      	ldr	r2, [pc, #156]	@ (80037c8 <xTaskIncrementTick+0x214>)
 800372a:	441a      	add	r2, r3
 800372c:	693b      	ldr	r3, [r7, #16]
 800372e:	615a      	str	r2, [r3, #20]
 8003730:	693b      	ldr	r3, [r7, #16]
 8003732:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003734:	4924      	ldr	r1, [pc, #144]	@ (80037c8 <xTaskIncrementTick+0x214>)
 8003736:	4613      	mov	r3, r2
 8003738:	009b      	lsls	r3, r3, #2
 800373a:	4413      	add	r3, r2
 800373c:	009b      	lsls	r3, r3, #2
 800373e:	440b      	add	r3, r1
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	693a      	ldr	r2, [r7, #16]
 8003744:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003746:	1c59      	adds	r1, r3, #1
 8003748:	481f      	ldr	r0, [pc, #124]	@ (80037c8 <xTaskIncrementTick+0x214>)
 800374a:	4613      	mov	r3, r2
 800374c:	009b      	lsls	r3, r3, #2
 800374e:	4413      	add	r3, r2
 8003750:	009b      	lsls	r3, r3, #2
 8003752:	4403      	add	r3, r0
 8003754:	6019      	str	r1, [r3, #0]
                             * task.
                             * The case of equal priority tasks sharing
                             * processing time (which happens when both
                             * preemption and time slicing are on) is
                             * handled below.*/
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003756:	693b      	ldr	r3, [r7, #16]
 8003758:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800375a:	4b1c      	ldr	r3, [pc, #112]	@ (80037cc <xTaskIncrementTick+0x218>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003760:	429a      	cmp	r2, r3
 8003762:	f67f af5b 	bls.w	800361c <xTaskIncrementTick+0x68>
                            {
                                xSwitchRequired = pdTRUE;
 8003766:	2301      	movs	r3, #1
 8003768:	61fb      	str	r3, [r7, #28]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800376a:	e757      	b.n	800361c <xTaskIncrementTick+0x68>
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > 1U )
 800376c:	4b17      	ldr	r3, [pc, #92]	@ (80037cc <xTaskIncrementTick+0x218>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003772:	4915      	ldr	r1, [pc, #84]	@ (80037c8 <xTaskIncrementTick+0x214>)
 8003774:	4613      	mov	r3, r2
 8003776:	009b      	lsls	r3, r3, #2
 8003778:	4413      	add	r3, r2
 800377a:	009b      	lsls	r3, r3, #2
 800377c:	440b      	add	r3, r1
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	2b01      	cmp	r3, #1
 8003782:	d901      	bls.n	8003788 <xTaskIncrementTick+0x1d4>
                {
                    xSwitchRequired = pdTRUE;
 8003784:	2301      	movs	r3, #1
 8003786:	61fb      	str	r3, [r7, #28]
        #if ( configUSE_PREEMPTION == 1 )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                /* For single core the core ID is always 0. */
                if( xYieldPendings[ 0 ] != pdFALSE )
 8003788:	4b11      	ldr	r3, [pc, #68]	@ (80037d0 <xTaskIncrementTick+0x21c>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d007      	beq.n	80037a0 <xTaskIncrementTick+0x1ec>
                {
                    xSwitchRequired = pdTRUE;
 8003790:	2301      	movs	r3, #1
 8003792:	61fb      	str	r3, [r7, #28]
 8003794:	e004      	b.n	80037a0 <xTaskIncrementTick+0x1ec>
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    else
    {
        xPendedTicks += 1U;
 8003796:	4b0f      	ldr	r3, [pc, #60]	@ (80037d4 <xTaskIncrementTick+0x220>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	3301      	adds	r3, #1
 800379c:	4a0d      	ldr	r2, [pc, #52]	@ (80037d4 <xTaskIncrementTick+0x220>)
 800379e:	6013      	str	r3, [r2, #0]
        #endif
    }

    traceRETURN_xTaskIncrementTick( xSwitchRequired );

    return xSwitchRequired;
 80037a0:	69fb      	ldr	r3, [r7, #28]
}
 80037a2:	4618      	mov	r0, r3
 80037a4:	3720      	adds	r7, #32
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}
 80037aa:	bf00      	nop
 80037ac:	200001c0 	.word	0x200001c0
 80037b0:	2000019c 	.word	0x2000019c
 80037b4:	20000150 	.word	0x20000150
 80037b8:	20000154 	.word	0x20000154
 80037bc:	200001b0 	.word	0x200001b0
 80037c0:	200001b8 	.word	0x200001b8
 80037c4:	200001a0 	.word	0x200001a0
 80037c8:	200000c4 	.word	0x200000c4
 80037cc:	200000c0 	.word	0x200000c0
 80037d0:	200001ac 	.word	0x200001ac
 80037d4:	200001a8 	.word	0x200001a8

080037d8 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )
    void vTaskSwitchContext( void )
    {
 80037d8:	b580      	push	{r7, lr}
 80037da:	b084      	sub	sp, #16
 80037dc:	af00      	add	r7, sp, #0
        traceENTER_vTaskSwitchContext();

        if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
 80037de:	4b23      	ldr	r3, [pc, #140]	@ (800386c <vTaskSwitchContext+0x94>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d003      	beq.n	80037ee <vTaskSwitchContext+0x16>
        {
            /* The scheduler is currently suspended - do not allow a context
             * switch. */
            xYieldPendings[ 0 ] = pdTRUE;
 80037e6:	4b22      	ldr	r3, [pc, #136]	@ (8003870 <vTaskSwitchContext+0x98>)
 80037e8:	2201      	movs	r2, #1
 80037ea:	601a      	str	r2, [r3, #0]
            }
            #endif
        }

        traceRETURN_vTaskSwitchContext();
    }
 80037ec:	e039      	b.n	8003862 <vTaskSwitchContext+0x8a>
            xYieldPendings[ 0 ] = pdFALSE;
 80037ee:	4b20      	ldr	r3, [pc, #128]	@ (8003870 <vTaskSwitchContext+0x98>)
 80037f0:	2200      	movs	r2, #0
 80037f2:	601a      	str	r2, [r3, #0]
            taskSELECT_HIGHEST_PRIORITY_TASK();
 80037f4:	4b1f      	ldr	r3, [pc, #124]	@ (8003874 <vTaskSwitchContext+0x9c>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	607b      	str	r3, [r7, #4]
 */
    static portFORCE_INLINE uint32_t ulPortCountLeadingZeros( uint32_t ulBitmap )
    {
        uint32_t ulReturn;

        __asm volatile ( "clz %0, %1" : "=r" ( ulReturn ) : "r" ( ulBitmap ) : "memory" );
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	fab3 f383 	clz	r3, r3
 8003800:	603b      	str	r3, [r7, #0]

        return ulReturn;
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	f1c3 031f 	rsb	r3, r3, #31
 8003808:	60fb      	str	r3, [r7, #12]
 800380a:	491b      	ldr	r1, [pc, #108]	@ (8003878 <vTaskSwitchContext+0xa0>)
 800380c:	68fa      	ldr	r2, [r7, #12]
 800380e:	4613      	mov	r3, r2
 8003810:	009b      	lsls	r3, r3, #2
 8003812:	4413      	add	r3, r2
 8003814:	009b      	lsls	r3, r3, #2
 8003816:	440b      	add	r3, r1
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d103      	bne.n	8003826 <vTaskSwitchContext+0x4e>
 800381e:	f001 f831 	bl	8004884 <ulSetInterruptMask>
 8003822:	bf00      	nop
 8003824:	e7fd      	b.n	8003822 <vTaskSwitchContext+0x4a>
 8003826:	68fa      	ldr	r2, [r7, #12]
 8003828:	4613      	mov	r3, r2
 800382a:	009b      	lsls	r3, r3, #2
 800382c:	4413      	add	r3, r2
 800382e:	009b      	lsls	r3, r3, #2
 8003830:	4a11      	ldr	r2, [pc, #68]	@ (8003878 <vTaskSwitchContext+0xa0>)
 8003832:	4413      	add	r3, r2
 8003834:	60bb      	str	r3, [r7, #8]
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	685a      	ldr	r2, [r3, #4]
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	605a      	str	r2, [r3, #4]
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	685a      	ldr	r2, [r3, #4]
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	3308      	adds	r3, #8
 8003848:	429a      	cmp	r2, r3
 800384a:	d103      	bne.n	8003854 <vTaskSwitchContext+0x7c>
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	68da      	ldr	r2, [r3, #12]
 8003850:	68bb      	ldr	r3, [r7, #8]
 8003852:	605a      	str	r2, [r3, #4]
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	68db      	ldr	r3, [r3, #12]
 800385a:	4a08      	ldr	r2, [pc, #32]	@ (800387c <vTaskSwitchContext+0xa4>)
 800385c:	6013      	str	r3, [r2, #0]
            portTASK_SWITCH_HOOK( pxCurrentTCB );
 800385e:	4b07      	ldr	r3, [pc, #28]	@ (800387c <vTaskSwitchContext+0xa4>)
 8003860:	681b      	ldr	r3, [r3, #0]
    }
 8003862:	bf00      	nop
 8003864:	3710      	adds	r7, #16
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}
 800386a:	bf00      	nop
 800386c:	200001c0 	.word	0x200001c0
 8003870:	200001ac 	.word	0x200001ac
 8003874:	200001a0 	.word	0x200001a0
 8003878:	200000c4 	.word	0x200000c4
 800387c:	200000c0 	.word	0x200000c0

08003880 <vTaskPlaceOnEventList>:
#endif /* if ( configNUMBER_OF_CORES > 1 ) */
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b082      	sub	sp, #8
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
 8003888:	6039      	str	r1, [r7, #0]
    traceENTER_vTaskPlaceOnEventList( pxEventList, xTicksToWait );

    configASSERT( pxEventList );
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d103      	bne.n	8003898 <vTaskPlaceOnEventList+0x18>
 8003890:	f000 fff8 	bl	8004884 <ulSetInterruptMask>
 8003894:	bf00      	nop
 8003896:	e7fd      	b.n	8003894 <vTaskPlaceOnEventList+0x14>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003898:	4b07      	ldr	r3, [pc, #28]	@ (80038b8 <vTaskPlaceOnEventList+0x38>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	3318      	adds	r3, #24
 800389e:	4619      	mov	r1, r3
 80038a0:	6878      	ldr	r0, [r7, #4]
 80038a2:	f7fe ff70 	bl	8002786 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80038a6:	2101      	movs	r1, #1
 80038a8:	6838      	ldr	r0, [r7, #0]
 80038aa:	f000 fae9 	bl	8003e80 <prvAddCurrentTaskToDelayedList>

    traceRETURN_vTaskPlaceOnEventList();
}
 80038ae:	bf00      	nop
 80038b0:	3708      	adds	r7, #8
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bd80      	pop	{r7, pc}
 80038b6:	bf00      	nop
 80038b8:	200000c0 	.word	0x200000c0

080038bc <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80038bc:	b580      	push	{r7, lr}
 80038be:	b086      	sub	sp, #24
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	60f8      	str	r0, [r7, #12]
 80038c4:	60b9      	str	r1, [r7, #8]
 80038c6:	607a      	str	r2, [r7, #4]
        traceENTER_vTaskPlaceOnEventListRestricted( pxEventList, xTicksToWait, xWaitIndefinitely );

        configASSERT( pxEventList );
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d103      	bne.n	80038d6 <vTaskPlaceOnEventListRestricted+0x1a>
 80038ce:	f000 ffd9 	bl	8004884 <ulSetInterruptMask>
 80038d2:	bf00      	nop
 80038d4:	e7fd      	b.n	80038d2 <vTaskPlaceOnEventListRestricted+0x16>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	617b      	str	r3, [r7, #20]
 80038dc:	4b15      	ldr	r3, [pc, #84]	@ (8003934 <vTaskPlaceOnEventListRestricted+0x78>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	697a      	ldr	r2, [r7, #20]
 80038e2:	61da      	str	r2, [r3, #28]
 80038e4:	4b13      	ldr	r3, [pc, #76]	@ (8003934 <vTaskPlaceOnEventListRestricted+0x78>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	697a      	ldr	r2, [r7, #20]
 80038ea:	6892      	ldr	r2, [r2, #8]
 80038ec:	621a      	str	r2, [r3, #32]
 80038ee:	4b11      	ldr	r3, [pc, #68]	@ (8003934 <vTaskPlaceOnEventListRestricted+0x78>)
 80038f0:	681a      	ldr	r2, [r3, #0]
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	3218      	adds	r2, #24
 80038f8:	605a      	str	r2, [r3, #4]
 80038fa:	4b0e      	ldr	r3, [pc, #56]	@ (8003934 <vTaskPlaceOnEventListRestricted+0x78>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f103 0218 	add.w	r2, r3, #24
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	609a      	str	r2, [r3, #8]
 8003906:	4b0b      	ldr	r3, [pc, #44]	@ (8003934 <vTaskPlaceOnEventListRestricted+0x78>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	68fa      	ldr	r2, [r7, #12]
 800390c:	629a      	str	r2, [r3, #40]	@ 0x28
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	1c5a      	adds	r2, r3, #1
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d002      	beq.n	8003924 <vTaskPlaceOnEventListRestricted+0x68>
        {
            xTicksToWait = portMAX_DELAY;
 800391e:	f04f 33ff 	mov.w	r3, #4294967295
 8003922:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003924:	6879      	ldr	r1, [r7, #4]
 8003926:	68b8      	ldr	r0, [r7, #8]
 8003928:	f000 faaa 	bl	8003e80 <prvAddCurrentTaskToDelayedList>

        traceRETURN_vTaskPlaceOnEventListRestricted();
    }
 800392c:	bf00      	nop
 800392e:	3718      	adds	r7, #24
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}
 8003934:	200000c0 	.word	0x200000c0

08003938 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b088      	sub	sp, #32
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    /* MISRA Ref 11.5.3 [Void pointer assignment] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
    /* coverity[misra_c_2012_rule_11_5_violation] */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	68db      	ldr	r3, [r3, #12]
 8003944:	68db      	ldr	r3, [r3, #12]
 8003946:	61bb      	str	r3, [r7, #24]
    configASSERT( pxUnblockedTCB );
 8003948:	69bb      	ldr	r3, [r7, #24]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d103      	bne.n	8003956 <xTaskRemoveFromEventList+0x1e>
 800394e:	f000 ff99 	bl	8004884 <ulSetInterruptMask>
 8003952:	bf00      	nop
 8003954:	e7fd      	b.n	8003952 <xTaskRemoveFromEventList+0x1a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8003956:	69bb      	ldr	r3, [r7, #24]
 8003958:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800395a:	617b      	str	r3, [r7, #20]
 800395c:	69bb      	ldr	r3, [r7, #24]
 800395e:	69db      	ldr	r3, [r3, #28]
 8003960:	69ba      	ldr	r2, [r7, #24]
 8003962:	6a12      	ldr	r2, [r2, #32]
 8003964:	609a      	str	r2, [r3, #8]
 8003966:	69bb      	ldr	r3, [r7, #24]
 8003968:	6a1b      	ldr	r3, [r3, #32]
 800396a:	69ba      	ldr	r2, [r7, #24]
 800396c:	69d2      	ldr	r2, [r2, #28]
 800396e:	605a      	str	r2, [r3, #4]
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	685a      	ldr	r2, [r3, #4]
 8003974:	69bb      	ldr	r3, [r7, #24]
 8003976:	3318      	adds	r3, #24
 8003978:	429a      	cmp	r2, r3
 800397a:	d103      	bne.n	8003984 <xTaskRemoveFromEventList+0x4c>
 800397c:	69bb      	ldr	r3, [r7, #24]
 800397e:	6a1a      	ldr	r2, [r3, #32]
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	605a      	str	r2, [r3, #4]
 8003984:	69bb      	ldr	r3, [r7, #24]
 8003986:	2200      	movs	r2, #0
 8003988:	629a      	str	r2, [r3, #40]	@ 0x28
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	1e5a      	subs	r2, r3, #1
 8003990:	697b      	ldr	r3, [r7, #20]
 8003992:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8003994:	4b4a      	ldr	r3, [pc, #296]	@ (8003ac0 <xTaskRemoveFromEventList+0x188>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d160      	bne.n	8003a5e <xTaskRemoveFromEventList+0x126>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 800399c:	69bb      	ldr	r3, [r7, #24]
 800399e:	695b      	ldr	r3, [r3, #20]
 80039a0:	60fb      	str	r3, [r7, #12]
 80039a2:	69bb      	ldr	r3, [r7, #24]
 80039a4:	689b      	ldr	r3, [r3, #8]
 80039a6:	69ba      	ldr	r2, [r7, #24]
 80039a8:	68d2      	ldr	r2, [r2, #12]
 80039aa:	609a      	str	r2, [r3, #8]
 80039ac:	69bb      	ldr	r3, [r7, #24]
 80039ae:	68db      	ldr	r3, [r3, #12]
 80039b0:	69ba      	ldr	r2, [r7, #24]
 80039b2:	6892      	ldr	r2, [r2, #8]
 80039b4:	605a      	str	r2, [r3, #4]
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	685a      	ldr	r2, [r3, #4]
 80039ba:	69bb      	ldr	r3, [r7, #24]
 80039bc:	3304      	adds	r3, #4
 80039be:	429a      	cmp	r2, r3
 80039c0:	d103      	bne.n	80039ca <xTaskRemoveFromEventList+0x92>
 80039c2:	69bb      	ldr	r3, [r7, #24]
 80039c4:	68da      	ldr	r2, [r3, #12]
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	605a      	str	r2, [r3, #4]
 80039ca:	69bb      	ldr	r3, [r7, #24]
 80039cc:	2200      	movs	r2, #0
 80039ce:	615a      	str	r2, [r3, #20]
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	1e5a      	subs	r2, r3, #1
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 80039da:	69bb      	ldr	r3, [r7, #24]
 80039dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039de:	2201      	movs	r2, #1
 80039e0:	409a      	lsls	r2, r3
 80039e2:	4b38      	ldr	r3, [pc, #224]	@ (8003ac4 <xTaskRemoveFromEventList+0x18c>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4313      	orrs	r3, r2
 80039e8:	4a36      	ldr	r2, [pc, #216]	@ (8003ac4 <xTaskRemoveFromEventList+0x18c>)
 80039ea:	6013      	str	r3, [r2, #0]
 80039ec:	69bb      	ldr	r3, [r7, #24]
 80039ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039f0:	4935      	ldr	r1, [pc, #212]	@ (8003ac8 <xTaskRemoveFromEventList+0x190>)
 80039f2:	4613      	mov	r3, r2
 80039f4:	009b      	lsls	r3, r3, #2
 80039f6:	4413      	add	r3, r2
 80039f8:	009b      	lsls	r3, r3, #2
 80039fa:	440b      	add	r3, r1
 80039fc:	3304      	adds	r3, #4
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	60bb      	str	r3, [r7, #8]
 8003a02:	69bb      	ldr	r3, [r7, #24]
 8003a04:	68ba      	ldr	r2, [r7, #8]
 8003a06:	609a      	str	r2, [r3, #8]
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	689a      	ldr	r2, [r3, #8]
 8003a0c:	69bb      	ldr	r3, [r7, #24]
 8003a0e:	60da      	str	r2, [r3, #12]
 8003a10:	68bb      	ldr	r3, [r7, #8]
 8003a12:	689b      	ldr	r3, [r3, #8]
 8003a14:	69ba      	ldr	r2, [r7, #24]
 8003a16:	3204      	adds	r2, #4
 8003a18:	605a      	str	r2, [r3, #4]
 8003a1a:	69bb      	ldr	r3, [r7, #24]
 8003a1c:	1d1a      	adds	r2, r3, #4
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	609a      	str	r2, [r3, #8]
 8003a22:	69bb      	ldr	r3, [r7, #24]
 8003a24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a26:	4613      	mov	r3, r2
 8003a28:	009b      	lsls	r3, r3, #2
 8003a2a:	4413      	add	r3, r2
 8003a2c:	009b      	lsls	r3, r3, #2
 8003a2e:	4a26      	ldr	r2, [pc, #152]	@ (8003ac8 <xTaskRemoveFromEventList+0x190>)
 8003a30:	441a      	add	r2, r3
 8003a32:	69bb      	ldr	r3, [r7, #24]
 8003a34:	615a      	str	r2, [r3, #20]
 8003a36:	69bb      	ldr	r3, [r7, #24]
 8003a38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a3a:	4923      	ldr	r1, [pc, #140]	@ (8003ac8 <xTaskRemoveFromEventList+0x190>)
 8003a3c:	4613      	mov	r3, r2
 8003a3e:	009b      	lsls	r3, r3, #2
 8003a40:	4413      	add	r3, r2
 8003a42:	009b      	lsls	r3, r3, #2
 8003a44:	440b      	add	r3, r1
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	69ba      	ldr	r2, [r7, #24]
 8003a4a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003a4c:	1c59      	adds	r1, r3, #1
 8003a4e:	481e      	ldr	r0, [pc, #120]	@ (8003ac8 <xTaskRemoveFromEventList+0x190>)
 8003a50:	4613      	mov	r3, r2
 8003a52:	009b      	lsls	r3, r3, #2
 8003a54:	4413      	add	r3, r2
 8003a56:	009b      	lsls	r3, r3, #2
 8003a58:	4403      	add	r3, r0
 8003a5a:	6019      	str	r1, [r3, #0]
 8003a5c:	e01b      	b.n	8003a96 <xTaskRemoveFromEventList+0x15e>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003a5e:	4b1b      	ldr	r3, [pc, #108]	@ (8003acc <xTaskRemoveFromEventList+0x194>)
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	613b      	str	r3, [r7, #16]
 8003a64:	69bb      	ldr	r3, [r7, #24]
 8003a66:	693a      	ldr	r2, [r7, #16]
 8003a68:	61da      	str	r2, [r3, #28]
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	689a      	ldr	r2, [r3, #8]
 8003a6e:	69bb      	ldr	r3, [r7, #24]
 8003a70:	621a      	str	r2, [r3, #32]
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	689b      	ldr	r3, [r3, #8]
 8003a76:	69ba      	ldr	r2, [r7, #24]
 8003a78:	3218      	adds	r2, #24
 8003a7a:	605a      	str	r2, [r3, #4]
 8003a7c:	69bb      	ldr	r3, [r7, #24]
 8003a7e:	f103 0218 	add.w	r2, r3, #24
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	609a      	str	r2, [r3, #8]
 8003a86:	69bb      	ldr	r3, [r7, #24]
 8003a88:	4a10      	ldr	r2, [pc, #64]	@ (8003acc <xTaskRemoveFromEventList+0x194>)
 8003a8a:	629a      	str	r2, [r3, #40]	@ 0x28
 8003a8c:	4b0f      	ldr	r3, [pc, #60]	@ (8003acc <xTaskRemoveFromEventList+0x194>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	3301      	adds	r3, #1
 8003a92:	4a0e      	ldr	r2, [pc, #56]	@ (8003acc <xTaskRemoveFromEventList+0x194>)
 8003a94:	6013      	str	r3, [r2, #0]
    }

    #if ( configNUMBER_OF_CORES == 1 )
    {
        if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003a96:	69bb      	ldr	r3, [r7, #24]
 8003a98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a9a:	4b0d      	ldr	r3, [pc, #52]	@ (8003ad0 <xTaskRemoveFromEventList+0x198>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003aa0:	429a      	cmp	r2, r3
 8003aa2:	d905      	bls.n	8003ab0 <xTaskRemoveFromEventList+0x178>
        {
            /* Return true if the task removed from the event list has a higher
             * priority than the calling task.  This allows the calling task to know if
             * it should force a context switch now. */
            xReturn = pdTRUE;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	61fb      	str	r3, [r7, #28]

            /* Mark that a yield is pending in case the user is not using the
             * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
            xYieldPendings[ 0 ] = pdTRUE;
 8003aa8:	4b0a      	ldr	r3, [pc, #40]	@ (8003ad4 <xTaskRemoveFromEventList+0x19c>)
 8003aaa:	2201      	movs	r2, #1
 8003aac:	601a      	str	r2, [r3, #0]
 8003aae:	e001      	b.n	8003ab4 <xTaskRemoveFromEventList+0x17c>
        }
        else
        {
            xReturn = pdFALSE;
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	61fb      	str	r3, [r7, #28]
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_xTaskRemoveFromEventList( xReturn );
    return xReturn;
 8003ab4:	69fb      	ldr	r3, [r7, #28]
}
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	3720      	adds	r7, #32
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bd80      	pop	{r7, pc}
 8003abe:	bf00      	nop
 8003ac0:	200001c0 	.word	0x200001c0
 8003ac4:	200001a0 	.word	0x200001a0
 8003ac8:	200000c4 	.word	0x200000c4
 8003acc:	20000158 	.word	0x20000158
 8003ad0:	200000c0 	.word	0x200000c0
 8003ad4:	200001ac 	.word	0x200001ac

08003ad8 <vTaskInternalSetTimeOutState>:
    traceRETURN_vTaskSetTimeOutState();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003ad8:	b480      	push	{r7}
 8003ada:	b083      	sub	sp, #12
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
    traceENTER_vTaskInternalSetTimeOutState( pxTimeOut );

    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003ae0:	4b06      	ldr	r3, [pc, #24]	@ (8003afc <vTaskInternalSetTimeOutState+0x24>)
 8003ae2:	681a      	ldr	r2, [r3, #0]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8003ae8:	4b05      	ldr	r3, [pc, #20]	@ (8003b00 <vTaskInternalSetTimeOutState+0x28>)
 8003aea:	681a      	ldr	r2, [r3, #0]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	605a      	str	r2, [r3, #4]

    traceRETURN_vTaskInternalSetTimeOutState();
}
 8003af0:	bf00      	nop
 8003af2:	370c      	adds	r7, #12
 8003af4:	46bd      	mov	sp, r7
 8003af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afa:	4770      	bx	lr
 8003afc:	200001b0 	.word	0x200001b0
 8003b00:	2000019c 	.word	0x2000019c

08003b04 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b086      	sub	sp, #24
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
 8003b0c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    traceENTER_xTaskCheckForTimeOut( pxTimeOut, pxTicksToWait );

    configASSERT( pxTimeOut );
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d103      	bne.n	8003b1c <xTaskCheckForTimeOut+0x18>
 8003b14:	f000 feb6 	bl	8004884 <ulSetInterruptMask>
 8003b18:	bf00      	nop
 8003b1a:	e7fd      	b.n	8003b18 <xTaskCheckForTimeOut+0x14>
    configASSERT( pxTicksToWait );
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d103      	bne.n	8003b2a <xTaskCheckForTimeOut+0x26>
 8003b22:	f000 feaf 	bl	8004884 <ulSetInterruptMask>
 8003b26:	bf00      	nop
 8003b28:	e7fd      	b.n	8003b26 <xTaskCheckForTimeOut+0x22>

    taskENTER_CRITICAL();
 8003b2a:	f000 fd07 	bl	800453c <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8003b2e:	4b1f      	ldr	r3, [pc, #124]	@ (8003bac <xTaskCheckForTimeOut+0xa8>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	613b      	str	r3, [r7, #16]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	693a      	ldr	r2, [r7, #16]
 8003b3a:	1ad3      	subs	r3, r2, r3
 8003b3c:	60fb      	str	r3, [r7, #12]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b46:	d102      	bne.n	8003b4e <xTaskCheckForTimeOut+0x4a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8003b48:	2300      	movs	r3, #0
 8003b4a:	617b      	str	r3, [r7, #20]
 8003b4c:	e026      	b.n	8003b9c <xTaskCheckForTimeOut+0x98>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) )
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681a      	ldr	r2, [r3, #0]
 8003b52:	4b17      	ldr	r3, [pc, #92]	@ (8003bb0 <xTaskCheckForTimeOut+0xac>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	429a      	cmp	r2, r3
 8003b58:	d00a      	beq.n	8003b70 <xTaskCheckForTimeOut+0x6c>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	693a      	ldr	r2, [r7, #16]
 8003b60:	429a      	cmp	r2, r3
 8003b62:	d305      	bcc.n	8003b70 <xTaskCheckForTimeOut+0x6c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8003b64:	2301      	movs	r3, #1
 8003b66:	617b      	str	r3, [r7, #20]
            *pxTicksToWait = ( TickType_t ) 0;
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	601a      	str	r2, [r3, #0]
 8003b6e:	e015      	b.n	8003b9c <xTaskCheckForTimeOut+0x98>
        }
        else if( xElapsedTime < *pxTicksToWait )
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	68fa      	ldr	r2, [r7, #12]
 8003b76:	429a      	cmp	r2, r3
 8003b78:	d20b      	bcs.n	8003b92 <xTaskCheckForTimeOut+0x8e>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	681a      	ldr	r2, [r3, #0]
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	1ad2      	subs	r2, r2, r3
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8003b86:	6878      	ldr	r0, [r7, #4]
 8003b88:	f7ff ffa6 	bl	8003ad8 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	617b      	str	r3, [r7, #20]
 8003b90:	e004      	b.n	8003b9c <xTaskCheckForTimeOut+0x98>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	2200      	movs	r2, #0
 8003b96:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	617b      	str	r3, [r7, #20]
        }
    }
    taskEXIT_CRITICAL();
 8003b9c:	f000 fce0 	bl	8004560 <vPortExitCritical>

    traceRETURN_xTaskCheckForTimeOut( xReturn );

    return xReturn;
 8003ba0:	697b      	ldr	r3, [r7, #20]
}
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	3718      	adds	r7, #24
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}
 8003baa:	bf00      	nop
 8003bac:	2000019c 	.word	0x2000019c
 8003bb0:	200001b0 	.word	0x200001b0

08003bb4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	af00      	add	r7, sp, #0
    traceENTER_vTaskMissedYield();

    /* Must be called from within a critical section. */
    xYieldPendings[ portGET_CORE_ID() ] = pdTRUE;
 8003bb8:	4b03      	ldr	r3, [pc, #12]	@ (8003bc8 <vTaskMissedYield+0x14>)
 8003bba:	2201      	movs	r2, #1
 8003bbc:	601a      	str	r2, [r3, #0]

    traceRETURN_vTaskMissedYield();
}
 8003bbe:	bf00      	nop
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc6:	4770      	bx	lr
 8003bc8:	200001ac 	.word	0x200001ac

08003bcc <prvIdleTask>:
 * void prvIdleTask( void *pvParameters );
 *
 */

static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b082      	sub	sp, #8
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]

    for( ; configCONTROL_INFINITE_LOOP(); )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003bd4:	f000 f84c 	bl	8003c70 <prvCheckTasksWaitingTermination>
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains one more task than the
             * number of idle tasks, which is equal to the configured numbers of cores
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) configNUMBER_OF_CORES )
 8003bd8:	4b04      	ldr	r3, [pc, #16]	@ (8003bec <prvIdleTask+0x20>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	2b01      	cmp	r3, #1
 8003bde:	d901      	bls.n	8003be4 <prvIdleTask+0x18>
            {
                taskYIELD();
 8003be0:	f000 fc9a 	bl	8004518 <vPortYield>
        #endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) ) */

        #if ( configUSE_IDLE_HOOK == 1 )
        {
            /* Call the user defined function from within the idle task. */
            vApplicationIdleHook();
 8003be4:	f000 fed0 	bl	8004988 <vApplicationIdleHook>
        prvCheckTasksWaitingTermination();
 8003be8:	e7f4      	b.n	8003bd4 <prvIdleTask+0x8>
 8003bea:	bf00      	nop
 8003bec:	200000c4 	.word	0x200000c4

08003bf0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b082      	sub	sp, #8
 8003bf4:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	607b      	str	r3, [r7, #4]
 8003bfa:	e00c      	b.n	8003c16 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003bfc:	687a      	ldr	r2, [r7, #4]
 8003bfe:	4613      	mov	r3, r2
 8003c00:	009b      	lsls	r3, r3, #2
 8003c02:	4413      	add	r3, r2
 8003c04:	009b      	lsls	r3, r3, #2
 8003c06:	4a12      	ldr	r2, [pc, #72]	@ (8003c50 <prvInitialiseTaskLists+0x60>)
 8003c08:	4413      	add	r3, r2
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	f7fe fd8e 	bl	800272c <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	3301      	adds	r3, #1
 8003c14:	607b      	str	r3, [r7, #4]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2b04      	cmp	r3, #4
 8003c1a:	d9ef      	bls.n	8003bfc <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003c1c:	480d      	ldr	r0, [pc, #52]	@ (8003c54 <prvInitialiseTaskLists+0x64>)
 8003c1e:	f7fe fd85 	bl	800272c <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8003c22:	480d      	ldr	r0, [pc, #52]	@ (8003c58 <prvInitialiseTaskLists+0x68>)
 8003c24:	f7fe fd82 	bl	800272c <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003c28:	480c      	ldr	r0, [pc, #48]	@ (8003c5c <prvInitialiseTaskLists+0x6c>)
 8003c2a:	f7fe fd7f 	bl	800272c <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8003c2e:	480c      	ldr	r0, [pc, #48]	@ (8003c60 <prvInitialiseTaskLists+0x70>)
 8003c30:	f7fe fd7c 	bl	800272c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8003c34:	480b      	ldr	r0, [pc, #44]	@ (8003c64 <prvInitialiseTaskLists+0x74>)
 8003c36:	f7fe fd79 	bl	800272c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8003c3a:	4b0b      	ldr	r3, [pc, #44]	@ (8003c68 <prvInitialiseTaskLists+0x78>)
 8003c3c:	4a05      	ldr	r2, [pc, #20]	@ (8003c54 <prvInitialiseTaskLists+0x64>)
 8003c3e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003c40:	4b0a      	ldr	r3, [pc, #40]	@ (8003c6c <prvInitialiseTaskLists+0x7c>)
 8003c42:	4a05      	ldr	r2, [pc, #20]	@ (8003c58 <prvInitialiseTaskLists+0x68>)
 8003c44:	601a      	str	r2, [r3, #0]
}
 8003c46:	bf00      	nop
 8003c48:	3708      	adds	r7, #8
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd80      	pop	{r7, pc}
 8003c4e:	bf00      	nop
 8003c50:	200000c4 	.word	0x200000c4
 8003c54:	20000128 	.word	0x20000128
 8003c58:	2000013c 	.word	0x2000013c
 8003c5c:	20000158 	.word	0x20000158
 8003c60:	2000016c 	.word	0x2000016c
 8003c64:	20000184 	.word	0x20000184
 8003c68:	20000150 	.word	0x20000150
 8003c6c:	20000154 	.word	0x20000154

08003c70 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b082      	sub	sp, #8
 8003c74:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003c76:	e019      	b.n	8003cac <prvCheckTasksWaitingTermination+0x3c>
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                taskENTER_CRITICAL();
 8003c78:	f000 fc60 	bl	800453c <vPortEnterCritical>
                {
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003c7c:	4b10      	ldr	r3, [pc, #64]	@ (8003cc0 <prvCheckTasksWaitingTermination+0x50>)
 8003c7e:	68db      	ldr	r3, [r3, #12]
 8003c80:	68db      	ldr	r3, [r3, #12]
 8003c82:	607b      	str	r3, [r7, #4]
                        ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	3304      	adds	r3, #4
 8003c88:	4618      	mov	r0, r3
 8003c8a:	f7fe fdb5 	bl	80027f8 <uxListRemove>
                        --uxCurrentNumberOfTasks;
 8003c8e:	4b0d      	ldr	r3, [pc, #52]	@ (8003cc4 <prvCheckTasksWaitingTermination+0x54>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	3b01      	subs	r3, #1
 8003c94:	4a0b      	ldr	r2, [pc, #44]	@ (8003cc4 <prvCheckTasksWaitingTermination+0x54>)
 8003c96:	6013      	str	r3, [r2, #0]
                        --uxDeletedTasksWaitingCleanUp;
 8003c98:	4b0b      	ldr	r3, [pc, #44]	@ (8003cc8 <prvCheckTasksWaitingTermination+0x58>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	3b01      	subs	r3, #1
 8003c9e:	4a0a      	ldr	r2, [pc, #40]	@ (8003cc8 <prvCheckTasksWaitingTermination+0x58>)
 8003ca0:	6013      	str	r3, [r2, #0]
                    }
                }
                taskEXIT_CRITICAL();
 8003ca2:	f000 fc5d 	bl	8004560 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8003ca6:	6878      	ldr	r0, [r7, #4]
 8003ca8:	f000 f810 	bl	8003ccc <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003cac:	4b06      	ldr	r3, [pc, #24]	@ (8003cc8 <prvCheckTasksWaitingTermination+0x58>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d1e1      	bne.n	8003c78 <prvCheckTasksWaitingTermination+0x8>
            }
            #endif /* #if( configNUMBER_OF_CORES == 1 ) */
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8003cb4:	bf00      	nop
 8003cb6:	bf00      	nop
 8003cb8:	3708      	adds	r7, #8
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bd80      	pop	{r7, pc}
 8003cbe:	bf00      	nop
 8003cc0:	2000016c 	.word	0x2000016c
 8003cc4:	20000198 	.word	0x20000198
 8003cc8:	20000180 	.word	0x20000180

08003ccc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003ccc:	b480      	push	{r7}
 8003cce:	b083      	sub	sp, #12
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003cd4:	bf00      	nop
 8003cd6:	370c      	adds	r7, #12
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cde:	4770      	bx	lr

08003ce0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003ce4:	4b0a      	ldr	r3, [pc, #40]	@ (8003d10 <prvResetNextTaskUnblockTime+0x30>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d104      	bne.n	8003cf8 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8003cee:	4b09      	ldr	r3, [pc, #36]	@ (8003d14 <prvResetNextTaskUnblockTime+0x34>)
 8003cf0:	f04f 32ff 	mov.w	r2, #4294967295
 8003cf4:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8003cf6:	e005      	b.n	8003d04 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003cf8:	4b05      	ldr	r3, [pc, #20]	@ (8003d10 <prvResetNextTaskUnblockTime+0x30>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	68db      	ldr	r3, [r3, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a04      	ldr	r2, [pc, #16]	@ (8003d14 <prvResetNextTaskUnblockTime+0x34>)
 8003d02:	6013      	str	r3, [r2, #0]
}
 8003d04:	bf00      	nop
 8003d06:	46bd      	mov	sp, r7
 8003d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0c:	4770      	bx	lr
 8003d0e:	bf00      	nop
 8003d10:	20000150 	.word	0x20000150
 8003d14:	200001b8 	.word	0x200001b8

08003d18 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8003d18:	b480      	push	{r7}
 8003d1a:	b083      	sub	sp, #12
 8003d1c:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        traceENTER_xTaskGetSchedulerState();

        if( xSchedulerRunning == pdFALSE )
 8003d1e:	4b0b      	ldr	r3, [pc, #44]	@ (8003d4c <xTaskGetSchedulerState+0x34>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d102      	bne.n	8003d2c <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8003d26:	2301      	movs	r3, #1
 8003d28:	607b      	str	r3, [r7, #4]
 8003d2a:	e008      	b.n	8003d3e <xTaskGetSchedulerState+0x26>
        {
            #if ( configNUMBER_OF_CORES > 1 )
                taskENTER_CRITICAL();
            #endif
            {
                if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8003d2c:	4b08      	ldr	r3, [pc, #32]	@ (8003d50 <xTaskGetSchedulerState+0x38>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d102      	bne.n	8003d3a <xTaskGetSchedulerState+0x22>
                {
                    xReturn = taskSCHEDULER_RUNNING;
 8003d34:	2302      	movs	r3, #2
 8003d36:	607b      	str	r3, [r7, #4]
 8003d38:	e001      	b.n	8003d3e <xTaskGetSchedulerState+0x26>
                }
                else
                {
                    xReturn = taskSCHEDULER_SUSPENDED;
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	607b      	str	r3, [r7, #4]
            #endif
        }

        traceRETURN_xTaskGetSchedulerState( xReturn );

        return xReturn;
 8003d3e:	687b      	ldr	r3, [r7, #4]
    }
 8003d40:	4618      	mov	r0, r3
 8003d42:	370c      	adds	r7, #12
 8003d44:	46bd      	mov	sp, r7
 8003d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4a:	4770      	bx	lr
 8003d4c:	200001a4 	.word	0x200001a4
 8003d50:	200001c0 	.word	0x200001c0

08003d54 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b086      	sub	sp, #24
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8003d60:	2300      	movs	r3, #0
 8003d62:	617b      	str	r3, [r7, #20]

        traceENTER_xTaskPriorityDisinherit( pxMutexHolder );

        if( pxMutexHolder != NULL )
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d07f      	beq.n	8003e6a <xTaskPriorityDisinherit+0x116>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8003d6a:	4b42      	ldr	r3, [pc, #264]	@ (8003e74 <xTaskPriorityDisinherit+0x120>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	693a      	ldr	r2, [r7, #16]
 8003d70:	429a      	cmp	r2, r3
 8003d72:	d003      	beq.n	8003d7c <xTaskPriorityDisinherit+0x28>
 8003d74:	f000 fd86 	bl	8004884 <ulSetInterruptMask>
 8003d78:	bf00      	nop
 8003d7a:	e7fd      	b.n	8003d78 <xTaskPriorityDisinherit+0x24>
            configASSERT( pxTCB->uxMutexesHeld );
 8003d7c:	693b      	ldr	r3, [r7, #16]
 8003d7e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d103      	bne.n	8003d8c <xTaskPriorityDisinherit+0x38>
 8003d84:	f000 fd7e 	bl	8004884 <ulSetInterruptMask>
 8003d88:	bf00      	nop
 8003d8a:	e7fd      	b.n	8003d88 <xTaskPriorityDisinherit+0x34>
            ( pxTCB->uxMutexesHeld )--;
 8003d8c:	693b      	ldr	r3, [r7, #16]
 8003d8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d90:	1e5a      	subs	r2, r3, #1
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003d96:	693b      	ldr	r3, [r7, #16]
 8003d98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d9e:	429a      	cmp	r2, r3
 8003da0:	d063      	beq.n	8003e6a <xTaskPriorityDisinherit+0x116>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003da2:	693b      	ldr	r3, [r7, #16]
 8003da4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d15f      	bne.n	8003e6a <xTaskPriorityDisinherit+0x116>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003daa:	693b      	ldr	r3, [r7, #16]
 8003dac:	3304      	adds	r3, #4
 8003dae:	4618      	mov	r0, r3
 8003db0:	f7fe fd22 	bl	80027f8 <uxListRemove>
 8003db4:	4603      	mov	r3, r0
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d10a      	bne.n	8003dd0 <xTaskPriorityDisinherit+0x7c>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8003dc4:	43da      	mvns	r2, r3
 8003dc6:	4b2c      	ldr	r3, [pc, #176]	@ (8003e78 <xTaskPriorityDisinherit+0x124>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4013      	ands	r3, r2
 8003dcc:	4a2a      	ldr	r2, [pc, #168]	@ (8003e78 <xTaskPriorityDisinherit+0x124>)
 8003dce:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003dd0:	693b      	ldr	r3, [r7, #16]
 8003dd2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003dd4:	693b      	ldr	r3, [r7, #16]
 8003dd6:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority );
 8003dd8:	693b      	ldr	r3, [r7, #16]
 8003dda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ddc:	f1c3 0205 	rsb	r2, r3, #5
 8003de0:	693b      	ldr	r3, [r7, #16]
 8003de2:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 8003de4:	693b      	ldr	r3, [r7, #16]
 8003de6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003de8:	2201      	movs	r2, #1
 8003dea:	409a      	lsls	r2, r3
 8003dec:	4b22      	ldr	r3, [pc, #136]	@ (8003e78 <xTaskPriorityDisinherit+0x124>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4313      	orrs	r3, r2
 8003df2:	4a21      	ldr	r2, [pc, #132]	@ (8003e78 <xTaskPriorityDisinherit+0x124>)
 8003df4:	6013      	str	r3, [r2, #0]
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003dfa:	4920      	ldr	r1, [pc, #128]	@ (8003e7c <xTaskPriorityDisinherit+0x128>)
 8003dfc:	4613      	mov	r3, r2
 8003dfe:	009b      	lsls	r3, r3, #2
 8003e00:	4413      	add	r3, r2
 8003e02:	009b      	lsls	r3, r3, #2
 8003e04:	440b      	add	r3, r1
 8003e06:	3304      	adds	r3, #4
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	60fb      	str	r3, [r7, #12]
 8003e0c:	693b      	ldr	r3, [r7, #16]
 8003e0e:	68fa      	ldr	r2, [r7, #12]
 8003e10:	609a      	str	r2, [r3, #8]
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	689a      	ldr	r2, [r3, #8]
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	60da      	str	r2, [r3, #12]
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	689b      	ldr	r3, [r3, #8]
 8003e1e:	693a      	ldr	r2, [r7, #16]
 8003e20:	3204      	adds	r2, #4
 8003e22:	605a      	str	r2, [r3, #4]
 8003e24:	693b      	ldr	r3, [r7, #16]
 8003e26:	1d1a      	adds	r2, r3, #4
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	609a      	str	r2, [r3, #8]
 8003e2c:	693b      	ldr	r3, [r7, #16]
 8003e2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e30:	4613      	mov	r3, r2
 8003e32:	009b      	lsls	r3, r3, #2
 8003e34:	4413      	add	r3, r2
 8003e36:	009b      	lsls	r3, r3, #2
 8003e38:	4a10      	ldr	r2, [pc, #64]	@ (8003e7c <xTaskPriorityDisinherit+0x128>)
 8003e3a:	441a      	add	r2, r3
 8003e3c:	693b      	ldr	r3, [r7, #16]
 8003e3e:	615a      	str	r2, [r3, #20]
 8003e40:	693b      	ldr	r3, [r7, #16]
 8003e42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e44:	490d      	ldr	r1, [pc, #52]	@ (8003e7c <xTaskPriorityDisinherit+0x128>)
 8003e46:	4613      	mov	r3, r2
 8003e48:	009b      	lsls	r3, r3, #2
 8003e4a:	4413      	add	r3, r2
 8003e4c:	009b      	lsls	r3, r3, #2
 8003e4e:	440b      	add	r3, r1
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	693a      	ldr	r2, [r7, #16]
 8003e54:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003e56:	1c59      	adds	r1, r3, #1
 8003e58:	4808      	ldr	r0, [pc, #32]	@ (8003e7c <xTaskPriorityDisinherit+0x128>)
 8003e5a:	4613      	mov	r3, r2
 8003e5c:	009b      	lsls	r3, r3, #2
 8003e5e:	4413      	add	r3, r2
 8003e60:	009b      	lsls	r3, r3, #2
 8003e62:	4403      	add	r3, r0
 8003e64:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8003e66:	2301      	movs	r3, #1
 8003e68:	617b      	str	r3, [r7, #20]
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xTaskPriorityDisinherit( xReturn );

        return xReturn;
 8003e6a:	697b      	ldr	r3, [r7, #20]
    }
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	3718      	adds	r7, #24
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bd80      	pop	{r7, pc}
 8003e74:	200000c0 	.word	0x200000c0
 8003e78:	200001a0 	.word	0x200001a0
 8003e7c:	200000c4 	.word	0x200000c4

08003e80 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b088      	sub	sp, #32
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
 8003e88:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8003e8a:	4b37      	ldr	r3, [pc, #220]	@ (8003f68 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	61fb      	str	r3, [r7, #28]
    List_t * const pxDelayedList = pxDelayedTaskList;
 8003e90:	4b36      	ldr	r3, [pc, #216]	@ (8003f6c <prvAddCurrentTaskToDelayedList+0xec>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	61bb      	str	r3, [r7, #24]
    List_t * const pxOverflowDelayedList = pxOverflowDelayedTaskList;
 8003e96:	4b36      	ldr	r3, [pc, #216]	@ (8003f70 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003e9c:	4b35      	ldr	r3, [pc, #212]	@ (8003f74 <prvAddCurrentTaskToDelayedList+0xf4>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	3304      	adds	r3, #4
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	f7fe fca8 	bl	80027f8 <uxListRemove>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d10b      	bne.n	8003ec6 <prvAddCurrentTaskToDelayedList+0x46>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8003eae:	4b31      	ldr	r3, [pc, #196]	@ (8003f74 <prvAddCurrentTaskToDelayedList+0xf4>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003eb4:	2201      	movs	r2, #1
 8003eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8003eba:	43da      	mvns	r2, r3
 8003ebc:	4b2e      	ldr	r3, [pc, #184]	@ (8003f78 <prvAddCurrentTaskToDelayedList+0xf8>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4013      	ands	r3, r2
 8003ec2:	4a2d      	ldr	r2, [pc, #180]	@ (8003f78 <prvAddCurrentTaskToDelayedList+0xf8>)
 8003ec4:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ecc:	d124      	bne.n	8003f18 <prvAddCurrentTaskToDelayedList+0x98>
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d021      	beq.n	8003f18 <prvAddCurrentTaskToDelayedList+0x98>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003ed4:	4b29      	ldr	r3, [pc, #164]	@ (8003f7c <prvAddCurrentTaskToDelayedList+0xfc>)
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	613b      	str	r3, [r7, #16]
 8003eda:	4b26      	ldr	r3, [pc, #152]	@ (8003f74 <prvAddCurrentTaskToDelayedList+0xf4>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	693a      	ldr	r2, [r7, #16]
 8003ee0:	609a      	str	r2, [r3, #8]
 8003ee2:	4b24      	ldr	r3, [pc, #144]	@ (8003f74 <prvAddCurrentTaskToDelayedList+0xf4>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	693a      	ldr	r2, [r7, #16]
 8003ee8:	6892      	ldr	r2, [r2, #8]
 8003eea:	60da      	str	r2, [r3, #12]
 8003eec:	4b21      	ldr	r3, [pc, #132]	@ (8003f74 <prvAddCurrentTaskToDelayedList+0xf4>)
 8003eee:	681a      	ldr	r2, [r3, #0]
 8003ef0:	693b      	ldr	r3, [r7, #16]
 8003ef2:	689b      	ldr	r3, [r3, #8]
 8003ef4:	3204      	adds	r2, #4
 8003ef6:	605a      	str	r2, [r3, #4]
 8003ef8:	4b1e      	ldr	r3, [pc, #120]	@ (8003f74 <prvAddCurrentTaskToDelayedList+0xf4>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	1d1a      	adds	r2, r3, #4
 8003efe:	693b      	ldr	r3, [r7, #16]
 8003f00:	609a      	str	r2, [r3, #8]
 8003f02:	4b1c      	ldr	r3, [pc, #112]	@ (8003f74 <prvAddCurrentTaskToDelayedList+0xf4>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a1d      	ldr	r2, [pc, #116]	@ (8003f7c <prvAddCurrentTaskToDelayedList+0xfc>)
 8003f08:	615a      	str	r2, [r3, #20]
 8003f0a:	4b1c      	ldr	r3, [pc, #112]	@ (8003f7c <prvAddCurrentTaskToDelayedList+0xfc>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	3301      	adds	r3, #1
 8003f10:	4a1a      	ldr	r2, [pc, #104]	@ (8003f7c <prvAddCurrentTaskToDelayedList+0xfc>)
 8003f12:	6013      	str	r3, [r2, #0]
 8003f14:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8003f16:	e022      	b.n	8003f5e <prvAddCurrentTaskToDelayedList+0xde>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8003f18:	69fa      	ldr	r2, [r7, #28]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	4413      	add	r3, r2
 8003f1e:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003f20:	4b14      	ldr	r3, [pc, #80]	@ (8003f74 <prvAddCurrentTaskToDelayedList+0xf4>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	68fa      	ldr	r2, [r7, #12]
 8003f26:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8003f28:	68fa      	ldr	r2, [r7, #12]
 8003f2a:	69fb      	ldr	r3, [r7, #28]
 8003f2c:	429a      	cmp	r2, r3
 8003f2e:	d207      	bcs.n	8003f40 <prvAddCurrentTaskToDelayedList+0xc0>
                vListInsert( pxOverflowDelayedList, &( pxCurrentTCB->xStateListItem ) );
 8003f30:	4b10      	ldr	r3, [pc, #64]	@ (8003f74 <prvAddCurrentTaskToDelayedList+0xf4>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	3304      	adds	r3, #4
 8003f36:	4619      	mov	r1, r3
 8003f38:	6978      	ldr	r0, [r7, #20]
 8003f3a:	f7fe fc24 	bl	8002786 <vListInsert>
}
 8003f3e:	e00e      	b.n	8003f5e <prvAddCurrentTaskToDelayedList+0xde>
                vListInsert( pxDelayedList, &( pxCurrentTCB->xStateListItem ) );
 8003f40:	4b0c      	ldr	r3, [pc, #48]	@ (8003f74 <prvAddCurrentTaskToDelayedList+0xf4>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	3304      	adds	r3, #4
 8003f46:	4619      	mov	r1, r3
 8003f48:	69b8      	ldr	r0, [r7, #24]
 8003f4a:	f7fe fc1c 	bl	8002786 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8003f4e:	4b0c      	ldr	r3, [pc, #48]	@ (8003f80 <prvAddCurrentTaskToDelayedList+0x100>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	68fa      	ldr	r2, [r7, #12]
 8003f54:	429a      	cmp	r2, r3
 8003f56:	d202      	bcs.n	8003f5e <prvAddCurrentTaskToDelayedList+0xde>
                    xNextTaskUnblockTime = xTimeToWake;
 8003f58:	4a09      	ldr	r2, [pc, #36]	@ (8003f80 <prvAddCurrentTaskToDelayedList+0x100>)
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	6013      	str	r3, [r2, #0]
}
 8003f5e:	bf00      	nop
 8003f60:	3720      	adds	r7, #32
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd80      	pop	{r7, pc}
 8003f66:	bf00      	nop
 8003f68:	2000019c 	.word	0x2000019c
 8003f6c:	20000150 	.word	0x20000150
 8003f70:	20000154 	.word	0x20000154
 8003f74:	200000c0 	.word	0x200000c0
 8003f78:	200001a0 	.word	0x200001a0
 8003f7c:	20000184 	.word	0x20000184
 8003f80:	200001b8 	.word	0x200001b8

08003f84 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b088      	sub	sp, #32
 8003f88:	af04      	add	r7, sp, #16
        BaseType_t xReturn = pdFAIL;
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	60fb      	str	r3, [r7, #12]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8003f8e:	f000 fa43 	bl	8004418 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8003f92:	4b18      	ldr	r3, [pc, #96]	@ (8003ff4 <xTimerCreateTimerTask+0x70>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d020      	beq.n	8003fdc <xTimerCreateTimerTask+0x58>
            }
            #else /* #if ( ( configNUMBER_OF_CORES > 1 ) && ( configUSE_CORE_AFFINITY == 1 ) ) */
            {
                #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
                {
                    StaticTask_t * pxTimerTaskTCBBuffer = NULL;
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	60bb      	str	r3, [r7, #8]
                    StackType_t * pxTimerTaskStackBuffer = NULL;
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	607b      	str	r3, [r7, #4]
                    configSTACK_DEPTH_TYPE uxTimerTaskStackSize;

                    vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &uxTimerTaskStackSize );
 8003fa2:	463a      	mov	r2, r7
 8003fa4:	1d39      	adds	r1, r7, #4
 8003fa6:	f107 0308 	add.w	r3, r7, #8
 8003faa:	4618      	mov	r0, r3
 8003fac:	f000 fd14 	bl	80049d8 <vApplicationGetTimerTaskMemory>
                    xTimerTaskHandle = xTaskCreateStatic( prvTimerTask,
 8003fb0:	6839      	ldr	r1, [r7, #0]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	68ba      	ldr	r2, [r7, #8]
 8003fb6:	9202      	str	r2, [sp, #8]
 8003fb8:	9301      	str	r3, [sp, #4]
 8003fba:	2302      	movs	r3, #2
 8003fbc:	9300      	str	r3, [sp, #0]
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	460a      	mov	r2, r1
 8003fc2:	490d      	ldr	r1, [pc, #52]	@ (8003ff8 <xTimerCreateTimerTask+0x74>)
 8003fc4:	480d      	ldr	r0, [pc, #52]	@ (8003ffc <xTimerCreateTimerTask+0x78>)
 8003fc6:	f7ff f801 	bl	8002fcc <xTaskCreateStatic>
 8003fca:	4603      	mov	r3, r0
 8003fcc:	4a0c      	ldr	r2, [pc, #48]	@ (8004000 <xTimerCreateTimerTask+0x7c>)
 8003fce:	6013      	str	r3, [r2, #0]
                                                          NULL,
                                                          ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
                                                          pxTimerTaskStackBuffer,
                                                          pxTimerTaskTCBBuffer );

                    if( xTimerTaskHandle != NULL )
 8003fd0:	4b0b      	ldr	r3, [pc, #44]	@ (8004000 <xTimerCreateTimerTask+0x7c>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d001      	beq.n	8003fdc <xTimerCreateTimerTask+0x58>
                    {
                        xReturn = pdPASS;
 8003fd8:	2301      	movs	r3, #1
 8003fda:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d103      	bne.n	8003fea <xTimerCreateTimerTask+0x66>
 8003fe2:	f000 fc4f 	bl	8004884 <ulSetInterruptMask>
 8003fe6:	bf00      	nop
 8003fe8:	e7fd      	b.n	8003fe6 <xTimerCreateTimerTask+0x62>

        traceRETURN_xTimerCreateTimerTask( xReturn );

        return xReturn;
 8003fea:	68fb      	ldr	r3, [r7, #12]
    }
 8003fec:	4618      	mov	r0, r3
 8003fee:	3710      	adds	r7, #16
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	bd80      	pop	{r7, pc}
 8003ff4:	200001f4 	.word	0x200001f4
 8003ff8:	08004aa0 	.word	0x08004aa0
 8003ffc:	080040a9 	.word	0x080040a9
 8004000:	200001f8 	.word	0x200001f8

08004004 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8004004:	b580      	push	{r7, lr}
 8004006:	b084      	sub	sp, #16
 8004008:	af00      	add	r7, sp, #0
 800400a:	60f8      	str	r0, [r7, #12]
 800400c:	60b9      	str	r1, [r7, #8]
 800400e:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8004010:	e008      	b.n	8004024 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	699b      	ldr	r3, [r3, #24]
 8004016:	68ba      	ldr	r2, [r7, #8]
 8004018:	4413      	add	r3, r2
 800401a:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	6a1b      	ldr	r3, [r3, #32]
 8004020:	68f8      	ldr	r0, [r7, #12]
 8004022:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	699a      	ldr	r2, [r3, #24]
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	18d1      	adds	r1, r2, r3
 800402c:	68bb      	ldr	r3, [r7, #8]
 800402e:	687a      	ldr	r2, [r7, #4]
 8004030:	68f8      	ldr	r0, [r7, #12]
 8004032:	f000 f8d7 	bl	80041e4 <prvInsertTimerInActiveList>
 8004036:	4603      	mov	r3, r0
 8004038:	2b00      	cmp	r3, #0
 800403a:	d1ea      	bne.n	8004012 <prvReloadTimer+0xe>
        }
    }
 800403c:	bf00      	nop
 800403e:	bf00      	nop
 8004040:	3710      	adds	r7, #16
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}
	...

08004048 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8004048:	b580      	push	{r7, lr}
 800404a:	b084      	sub	sp, #16
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
 8004050:	6039      	str	r1, [r7, #0]
        /* MISRA Ref 11.5.3 [Void pointer assignment] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
        /* coverity[misra_c_2012_rule_11_5_violation] */
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004052:	4b14      	ldr	r3, [pc, #80]	@ (80040a4 <prvProcessExpiredTimer+0x5c>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	68db      	ldr	r3, [r3, #12]
 8004058:	68db      	ldr	r3, [r3, #12]
 800405a:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	3304      	adds	r3, #4
 8004060:	4618      	mov	r0, r3
 8004062:	f7fe fbc9 	bl	80027f8 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800406c:	f003 0304 	and.w	r3, r3, #4
 8004070:	2b00      	cmp	r3, #0
 8004072:	d005      	beq.n	8004080 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8004074:	683a      	ldr	r2, [r7, #0]
 8004076:	6879      	ldr	r1, [r7, #4]
 8004078:	68f8      	ldr	r0, [r7, #12]
 800407a:	f7ff ffc3 	bl	8004004 <prvReloadTimer>
 800407e:	e008      	b.n	8004092 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004086:	f023 0301 	bic.w	r3, r3, #1
 800408a:	b2da      	uxtb	r2, r3
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	6a1b      	ldr	r3, [r3, #32]
 8004096:	68f8      	ldr	r0, [r7, #12]
 8004098:	4798      	blx	r3
    }
 800409a:	bf00      	nop
 800409c:	3710      	adds	r7, #16
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}
 80040a2:	bf00      	nop
 80040a4:	200001ec 	.word	0x200001ec

080040a8 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b084      	sub	sp, #16
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]

        for( ; configCONTROL_INFINITE_LOOP(); )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80040b0:	f107 0308 	add.w	r3, r7, #8
 80040b4:	4618      	mov	r0, r3
 80040b6:	f000 f851 	bl	800415c <prvGetNextExpireTime>
 80040ba:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	4619      	mov	r1, r3
 80040c0:	68f8      	ldr	r0, [r7, #12]
 80040c2:	f000 f805 	bl	80040d0 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 80040c6:	f000 f8cf 	bl	8004268 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80040ca:	bf00      	nop
 80040cc:	e7f0      	b.n	80040b0 <prvTimerTask+0x8>
	...

080040d0 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b084      	sub	sp, #16
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
 80040d8:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 80040da:	f7ff f949 	bl	8003370 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80040de:	f107 0308 	add.w	r3, r7, #8
 80040e2:	4618      	mov	r0, r3
 80040e4:	f000 f85e 	bl	80041a4 <prvSampleTimeNow>
 80040e8:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 80040ea:	68bb      	ldr	r3, [r7, #8]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d12a      	bne.n	8004146 <prvProcessTimerOrBlockTask+0x76>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d10a      	bne.n	800410c <prvProcessTimerOrBlockTask+0x3c>
 80040f6:	687a      	ldr	r2, [r7, #4]
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	429a      	cmp	r2, r3
 80040fc:	d806      	bhi.n	800410c <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 80040fe:	f7ff f945 	bl	800338c <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004102:	68f9      	ldr	r1, [r7, #12]
 8004104:	6878      	ldr	r0, [r7, #4]
 8004106:	f7ff ff9f 	bl	8004048 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800410a:	e01e      	b.n	800414a <prvProcessTimerOrBlockTask+0x7a>
                    if( xListWasEmpty != pdFALSE )
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d008      	beq.n	8004124 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004112:	4b10      	ldr	r3, [pc, #64]	@ (8004154 <prvProcessTimerOrBlockTask+0x84>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d101      	bne.n	8004120 <prvProcessTimerOrBlockTask+0x50>
 800411c:	2301      	movs	r3, #1
 800411e:	e000      	b.n	8004122 <prvProcessTimerOrBlockTask+0x52>
 8004120:	2300      	movs	r3, #0
 8004122:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004124:	4b0c      	ldr	r3, [pc, #48]	@ (8004158 <prvProcessTimerOrBlockTask+0x88>)
 8004126:	6818      	ldr	r0, [r3, #0]
 8004128:	687a      	ldr	r2, [r7, #4]
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	1ad3      	subs	r3, r2, r3
 800412e:	683a      	ldr	r2, [r7, #0]
 8004130:	4619      	mov	r1, r3
 8004132:	f7fe fe77 	bl	8002e24 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8004136:	f7ff f929 	bl	800338c <xTaskResumeAll>
 800413a:	4603      	mov	r3, r0
 800413c:	2b00      	cmp	r3, #0
 800413e:	d104      	bne.n	800414a <prvProcessTimerOrBlockTask+0x7a>
                        taskYIELD_WITHIN_API();
 8004140:	f000 f9ea 	bl	8004518 <vPortYield>
    }
 8004144:	e001      	b.n	800414a <prvProcessTimerOrBlockTask+0x7a>
                ( void ) xTaskResumeAll();
 8004146:	f7ff f921 	bl	800338c <xTaskResumeAll>
    }
 800414a:	bf00      	nop
 800414c:	3710      	adds	r7, #16
 800414e:	46bd      	mov	sp, r7
 8004150:	bd80      	pop	{r7, pc}
 8004152:	bf00      	nop
 8004154:	200001f0 	.word	0x200001f0
 8004158:	200001f4 	.word	0x200001f4

0800415c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 800415c:	b480      	push	{r7}
 800415e:	b085      	sub	sp, #20
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004164:	4b0e      	ldr	r3, [pc, #56]	@ (80041a0 <prvGetNextExpireTime+0x44>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d101      	bne.n	8004172 <prvGetNextExpireTime+0x16>
 800416e:	2201      	movs	r2, #1
 8004170:	e000      	b.n	8004174 <prvGetNextExpireTime+0x18>
 8004172:	2200      	movs	r2, #0
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d105      	bne.n	800418c <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004180:	4b07      	ldr	r3, [pc, #28]	@ (80041a0 <prvGetNextExpireTime+0x44>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	68db      	ldr	r3, [r3, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	60fb      	str	r3, [r7, #12]
 800418a:	e001      	b.n	8004190 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 800418c:	2300      	movs	r3, #0
 800418e:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8004190:	68fb      	ldr	r3, [r7, #12]
    }
 8004192:	4618      	mov	r0, r3
 8004194:	3714      	adds	r7, #20
 8004196:	46bd      	mov	sp, r7
 8004198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419c:	4770      	bx	lr
 800419e:	bf00      	nop
 80041a0:	200001ec 	.word	0x200001ec

080041a4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b084      	sub	sp, #16
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U;

        xTimeNow = xTaskGetTickCount();
 80041ac:	f7ff f9e6 	bl	800357c <xTaskGetTickCount>
 80041b0:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 80041b2:	4b0b      	ldr	r3, [pc, #44]	@ (80041e0 <prvSampleTimeNow+0x3c>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	68fa      	ldr	r2, [r7, #12]
 80041b8:	429a      	cmp	r2, r3
 80041ba:	d205      	bcs.n	80041c8 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 80041bc:	f000 f906 	bl	80043cc <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2201      	movs	r2, #1
 80041c4:	601a      	str	r2, [r3, #0]
 80041c6:	e002      	b.n	80041ce <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2200      	movs	r2, #0
 80041cc:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 80041ce:	4a04      	ldr	r2, [pc, #16]	@ (80041e0 <prvSampleTimeNow+0x3c>)
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 80041d4:	68fb      	ldr	r3, [r7, #12]
    }
 80041d6:	4618      	mov	r0, r3
 80041d8:	3710      	adds	r7, #16
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}
 80041de:	bf00      	nop
 80041e0:	200001fc 	.word	0x200001fc

080041e4 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b086      	sub	sp, #24
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	60f8      	str	r0, [r7, #12]
 80041ec:	60b9      	str	r1, [r7, #8]
 80041ee:	607a      	str	r2, [r7, #4]
 80041f0:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 80041f2:	2300      	movs	r3, #0
 80041f4:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	68ba      	ldr	r2, [r7, #8]
 80041fa:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	68fa      	ldr	r2, [r7, #12]
 8004200:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8004202:	68ba      	ldr	r2, [r7, #8]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	429a      	cmp	r2, r3
 8004208:	d812      	bhi.n	8004230 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
 800420a:	687a      	ldr	r2, [r7, #4]
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	1ad2      	subs	r2, r2, r3
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	699b      	ldr	r3, [r3, #24]
 8004214:	429a      	cmp	r2, r3
 8004216:	d302      	bcc.n	800421e <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8004218:	2301      	movs	r3, #1
 800421a:	617b      	str	r3, [r7, #20]
 800421c:	e01b      	b.n	8004256 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800421e:	4b10      	ldr	r3, [pc, #64]	@ (8004260 <prvInsertTimerInActiveList+0x7c>)
 8004220:	681a      	ldr	r2, [r3, #0]
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	3304      	adds	r3, #4
 8004226:	4619      	mov	r1, r3
 8004228:	4610      	mov	r0, r2
 800422a:	f7fe faac 	bl	8002786 <vListInsert>
 800422e:	e012      	b.n	8004256 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004230:	687a      	ldr	r2, [r7, #4]
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	429a      	cmp	r2, r3
 8004236:	d206      	bcs.n	8004246 <prvInsertTimerInActiveList+0x62>
 8004238:	68ba      	ldr	r2, [r7, #8]
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	429a      	cmp	r2, r3
 800423e:	d302      	bcc.n	8004246 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8004240:	2301      	movs	r3, #1
 8004242:	617b      	str	r3, [r7, #20]
 8004244:	e007      	b.n	8004256 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004246:	4b07      	ldr	r3, [pc, #28]	@ (8004264 <prvInsertTimerInActiveList+0x80>)
 8004248:	681a      	ldr	r2, [r3, #0]
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	3304      	adds	r3, #4
 800424e:	4619      	mov	r1, r3
 8004250:	4610      	mov	r0, r2
 8004252:	f7fe fa98 	bl	8002786 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8004256:	697b      	ldr	r3, [r7, #20]
    }
 8004258:	4618      	mov	r0, r3
 800425a:	3718      	adds	r7, #24
 800425c:	46bd      	mov	sp, r7
 800425e:	bd80      	pop	{r7, pc}
 8004260:	200001f0 	.word	0x200001f0
 8004264:	200001ec 	.word	0x200001ec

08004268 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8004268:	b580      	push	{r7, lr}
 800426a:	b086      	sub	sp, #24
 800426c:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage = { 0 };
 800426e:	1d3b      	adds	r3, r7, #4
 8004270:	2200      	movs	r2, #0
 8004272:	601a      	str	r2, [r3, #0]
 8004274:	605a      	str	r2, [r3, #4]
 8004276:	609a      	str	r2, [r3, #8]
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 8004278:	e095      	b.n	80043a6 <prvProcessReceivedCommands+0x13e>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2b00      	cmp	r3, #0
 800427e:	f2c0 8092 	blt.w	80043a6 <prvProcessReceivedCommands+0x13e>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	617b      	str	r3, [r7, #20]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 8004286:	697b      	ldr	r3, [r7, #20]
 8004288:	695b      	ldr	r3, [r3, #20]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d004      	beq.n	8004298 <prvProcessReceivedCommands+0x30>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800428e:	697b      	ldr	r3, [r7, #20]
 8004290:	3304      	adds	r3, #4
 8004292:	4618      	mov	r0, r3
 8004294:	f7fe fab0 	bl	80027f8 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004298:	463b      	mov	r3, r7
 800429a:	4618      	mov	r0, r3
 800429c:	f7ff ff82 	bl	80041a4 <prvSampleTimeNow>
 80042a0:	6138      	str	r0, [r7, #16]

                switch( xMessage.xMessageID )
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	3b01      	subs	r3, #1
 80042a6:	2b08      	cmp	r3, #8
 80042a8:	d87a      	bhi.n	80043a0 <prvProcessReceivedCommands+0x138>
 80042aa:	a201      	add	r2, pc, #4	@ (adr r2, 80042b0 <prvProcessReceivedCommands+0x48>)
 80042ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042b0:	080042d5 	.word	0x080042d5
 80042b4:	080042d5 	.word	0x080042d5
 80042b8:	0800433d 	.word	0x0800433d
 80042bc:	08004351 	.word	0x08004351
 80042c0:	0800438d 	.word	0x0800438d
 80042c4:	080042d5 	.word	0x080042d5
 80042c8:	080042d5 	.word	0x080042d5
 80042cc:	0800433d 	.word	0x0800433d
 80042d0:	08004351 	.word	0x08004351
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 80042d4:	697b      	ldr	r3, [r7, #20]
 80042d6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80042da:	f043 0301 	orr.w	r3, r3, #1
 80042de:	b2da      	uxtb	r2, r3
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80042e6:	68ba      	ldr	r2, [r7, #8]
 80042e8:	697b      	ldr	r3, [r7, #20]
 80042ea:	699b      	ldr	r3, [r3, #24]
 80042ec:	18d1      	adds	r1, r2, r3
 80042ee:	68bb      	ldr	r3, [r7, #8]
 80042f0:	693a      	ldr	r2, [r7, #16]
 80042f2:	6978      	ldr	r0, [r7, #20]
 80042f4:	f7ff ff76 	bl	80041e4 <prvInsertTimerInActiveList>
 80042f8:	4603      	mov	r3, r0
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d052      	beq.n	80043a4 <prvProcessReceivedCommands+0x13c>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004304:	f003 0304 	and.w	r3, r3, #4
 8004308:	2b00      	cmp	r3, #0
 800430a:	d009      	beq.n	8004320 <prvProcessReceivedCommands+0xb8>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 800430c:	68ba      	ldr	r2, [r7, #8]
 800430e:	697b      	ldr	r3, [r7, #20]
 8004310:	699b      	ldr	r3, [r3, #24]
 8004312:	4413      	add	r3, r2
 8004314:	693a      	ldr	r2, [r7, #16]
 8004316:	4619      	mov	r1, r3
 8004318:	6978      	ldr	r0, [r7, #20]
 800431a:	f7ff fe73 	bl	8004004 <prvReloadTimer>
 800431e:	e008      	b.n	8004332 <prvProcessReceivedCommands+0xca>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004320:	697b      	ldr	r3, [r7, #20]
 8004322:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004326:	f023 0301 	bic.w	r3, r3, #1
 800432a:	b2da      	uxtb	r2, r3
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004332:	697b      	ldr	r3, [r7, #20]
 8004334:	6a1b      	ldr	r3, [r3, #32]
 8004336:	6978      	ldr	r0, [r7, #20]
 8004338:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 800433a:	e033      	b.n	80043a4 <prvProcessReceivedCommands+0x13c>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800433c:	697b      	ldr	r3, [r7, #20]
 800433e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004342:	f023 0301 	bic.w	r3, r3, #1
 8004346:	b2da      	uxtb	r2, r3
 8004348:	697b      	ldr	r3, [r7, #20]
 800434a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 800434e:	e02a      	b.n	80043a6 <prvProcessReceivedCommands+0x13e>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 8004350:	697b      	ldr	r3, [r7, #20]
 8004352:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004356:	f043 0301 	orr.w	r3, r3, #1
 800435a:	b2da      	uxtb	r2, r3
 800435c:	697b      	ldr	r3, [r7, #20]
 800435e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004362:	68ba      	ldr	r2, [r7, #8]
 8004364:	697b      	ldr	r3, [r7, #20]
 8004366:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004368:	697b      	ldr	r3, [r7, #20]
 800436a:	699b      	ldr	r3, [r3, #24]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d103      	bne.n	8004378 <prvProcessReceivedCommands+0x110>
 8004370:	f000 fa88 	bl	8004884 <ulSetInterruptMask>
 8004374:	bf00      	nop
 8004376:	e7fd      	b.n	8004374 <prvProcessReceivedCommands+0x10c>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	699a      	ldr	r2, [r3, #24]
 800437c:	693b      	ldr	r3, [r7, #16]
 800437e:	18d1      	adds	r1, r2, r3
 8004380:	693b      	ldr	r3, [r7, #16]
 8004382:	693a      	ldr	r2, [r7, #16]
 8004384:	6978      	ldr	r0, [r7, #20]
 8004386:	f7ff ff2d 	bl	80041e4 <prvInsertTimerInActiveList>
                        break;
 800438a:	e00c      	b.n	80043a6 <prvProcessReceivedCommands+0x13e>
                        {
                            /* If dynamic allocation is not enabled, the memory
                             * could not have been dynamically allocated. So there is
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800438c:	697b      	ldr	r3, [r7, #20]
 800438e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004392:	f023 0301 	bic.w	r3, r3, #1
 8004396:	b2da      	uxtb	r2, r3
 8004398:	697b      	ldr	r3, [r7, #20]
 800439a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 800439e:	e002      	b.n	80043a6 <prvProcessReceivedCommands+0x13e>

                    default:
                        /* Don't expect to get here. */
                        break;
 80043a0:	bf00      	nop
 80043a2:	e000      	b.n	80043a6 <prvProcessReceivedCommands+0x13e>
                        break;
 80043a4:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 80043a6:	4b08      	ldr	r3, [pc, #32]	@ (80043c8 <prvProcessReceivedCommands+0x160>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	1d39      	adds	r1, r7, #4
 80043ac:	2200      	movs	r2, #0
 80043ae:	4618      	mov	r0, r3
 80043b0:	f7fe fb30 	bl	8002a14 <xQueueReceive>
 80043b4:	4603      	mov	r3, r0
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	f47f af5f 	bne.w	800427a <prvProcessReceivedCommands+0x12>
                }
            }
        }
    }
 80043bc:	bf00      	nop
 80043be:	bf00      	nop
 80043c0:	3718      	adds	r7, #24
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bd80      	pop	{r7, pc}
 80043c6:	bf00      	nop
 80043c8:	200001f4 	.word	0x200001f4

080043cc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b082      	sub	sp, #8
 80043d0:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80043d2:	e009      	b.n	80043e8 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80043d4:	4b0e      	ldr	r3, [pc, #56]	@ (8004410 <prvSwitchTimerLists+0x44>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	68db      	ldr	r3, [r3, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 80043de:	f04f 31ff 	mov.w	r1, #4294967295
 80043e2:	6838      	ldr	r0, [r7, #0]
 80043e4:	f7ff fe30 	bl	8004048 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80043e8:	4b09      	ldr	r3, [pc, #36]	@ (8004410 <prvSwitchTimerLists+0x44>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d1f0      	bne.n	80043d4 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 80043f2:	4b07      	ldr	r3, [pc, #28]	@ (8004410 <prvSwitchTimerLists+0x44>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 80043f8:	4b06      	ldr	r3, [pc, #24]	@ (8004414 <prvSwitchTimerLists+0x48>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a04      	ldr	r2, [pc, #16]	@ (8004410 <prvSwitchTimerLists+0x44>)
 80043fe:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8004400:	4a04      	ldr	r2, [pc, #16]	@ (8004414 <prvSwitchTimerLists+0x48>)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6013      	str	r3, [r2, #0]
    }
 8004406:	bf00      	nop
 8004408:	3708      	adds	r7, #8
 800440a:	46bd      	mov	sp, r7
 800440c:	bd80      	pop	{r7, pc}
 800440e:	bf00      	nop
 8004410:	200001ec 	.word	0x200001ec
 8004414:	200001f0 	.word	0x200001f0

08004418 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8004418:	b580      	push	{r7, lr}
 800441a:	b082      	sub	sp, #8
 800441c:	af02      	add	r7, sp, #8
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 800441e:	f000 f88d 	bl	800453c <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8004422:	4b15      	ldr	r3, [pc, #84]	@ (8004478 <prvCheckForValidListAndQueue+0x60>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d120      	bne.n	800446c <prvCheckForValidListAndQueue+0x54>
            {
                vListInitialise( &xActiveTimerList1 );
 800442a:	4814      	ldr	r0, [pc, #80]	@ (800447c <prvCheckForValidListAndQueue+0x64>)
 800442c:	f7fe f97e 	bl	800272c <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8004430:	4813      	ldr	r0, [pc, #76]	@ (8004480 <prvCheckForValidListAndQueue+0x68>)
 8004432:	f7fe f97b 	bl	800272c <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8004436:	4b13      	ldr	r3, [pc, #76]	@ (8004484 <prvCheckForValidListAndQueue+0x6c>)
 8004438:	4a10      	ldr	r2, [pc, #64]	@ (800447c <prvCheckForValidListAndQueue+0x64>)
 800443a:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800443c:	4b12      	ldr	r3, [pc, #72]	@ (8004488 <prvCheckForValidListAndQueue+0x70>)
 800443e:	4a10      	ldr	r2, [pc, #64]	@ (8004480 <prvCheckForValidListAndQueue+0x68>)
 8004440:	601a      	str	r2, [r3, #0]
                    /* The timer queue is allocated statically in case
                     * configSUPPORT_DYNAMIC_ALLOCATION is 0. */
                    PRIVILEGED_DATA static StaticQueue_t xStaticTimerQueue;
                    PRIVILEGED_DATA static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ];

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004442:	2300      	movs	r3, #0
 8004444:	9300      	str	r3, [sp, #0]
 8004446:	4b11      	ldr	r3, [pc, #68]	@ (800448c <prvCheckForValidListAndQueue+0x74>)
 8004448:	4a11      	ldr	r2, [pc, #68]	@ (8004490 <prvCheckForValidListAndQueue+0x78>)
 800444a:	210c      	movs	r1, #12
 800444c:	200a      	movs	r0, #10
 800444e:	f7fe fa76 	bl	800293e <xQueueGenericCreateStatic>
 8004452:	4603      	mov	r3, r0
 8004454:	4a08      	ldr	r2, [pc, #32]	@ (8004478 <prvCheckForValidListAndQueue+0x60>)
 8004456:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8004458:	4b07      	ldr	r3, [pc, #28]	@ (8004478 <prvCheckForValidListAndQueue+0x60>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d005      	beq.n	800446c <prvCheckForValidListAndQueue+0x54>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004460:	4b05      	ldr	r3, [pc, #20]	@ (8004478 <prvCheckForValidListAndQueue+0x60>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	490b      	ldr	r1, [pc, #44]	@ (8004494 <prvCheckForValidListAndQueue+0x7c>)
 8004466:	4618      	mov	r0, r3
 8004468:	f7fe fc96 	bl	8002d98 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800446c:	f000 f878 	bl	8004560 <vPortExitCritical>
    }
 8004470:	bf00      	nop
 8004472:	46bd      	mov	sp, r7
 8004474:	bd80      	pop	{r7, pc}
 8004476:	bf00      	nop
 8004478:	200001f4 	.word	0x200001f4
 800447c:	200001c4 	.word	0x200001c4
 8004480:	200001d8 	.word	0x200001d8
 8004484:	200001ec 	.word	0x200001ec
 8004488:	200001f0 	.word	0x200001f0
 800448c:	20000278 	.word	0x20000278
 8004490:	20000200 	.word	0x20000200
 8004494:	08004aa8 	.word	0x08004aa8

08004498 <vPortSetupTimerInterrupt>:

#endif /* configUSE_TICKLESS_IDLE */
/*-----------------------------------------------------------*/

__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void ) /* PRIVILEGED_FUNCTION */
{
 8004498:	b480      	push	{r7}
 800449a:	af00      	add	r7, sp, #0
     * enable SysTick without first selecting a valid clock source. We trigger
     * the bug if we change clock sources from a clock with a zero clock period
     * to one with a nonzero clock period and enable Systick at the same time.
     * So we configure the CLKSOURCE bit here, prior to setting the ENABLE bit.
     * This workaround avoids the bug in QEMU versions older than 7.0.0. */
    portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT_CONFIG;
 800449c:	4b0b      	ldr	r3, [pc, #44]	@ (80044cc <vPortSetupTimerInterrupt+0x34>)
 800449e:	2204      	movs	r2, #4
 80044a0:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80044a2:	4b0b      	ldr	r3, [pc, #44]	@ (80044d0 <vPortSetupTimerInterrupt+0x38>)
 80044a4:	2200      	movs	r2, #0
 80044a6:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80044a8:	4b0a      	ldr	r3, [pc, #40]	@ (80044d4 <vPortSetupTimerInterrupt+0x3c>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a0a      	ldr	r2, [pc, #40]	@ (80044d8 <vPortSetupTimerInterrupt+0x40>)
 80044ae:	fba2 2303 	umull	r2, r3, r2, r3
 80044b2:	099b      	lsrs	r3, r3, #6
 80044b4:	4a09      	ldr	r2, [pc, #36]	@ (80044dc <vPortSetupTimerInterrupt+0x44>)
 80044b6:	3b01      	subs	r3, #1
 80044b8:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 80044ba:	4b04      	ldr	r3, [pc, #16]	@ (80044cc <vPortSetupTimerInterrupt+0x34>)
 80044bc:	2207      	movs	r2, #7
 80044be:	601a      	str	r2, [r3, #0]
}
 80044c0:	bf00      	nop
 80044c2:	46bd      	mov	sp, r7
 80044c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c8:	4770      	bx	lr
 80044ca:	bf00      	nop
 80044cc:	e000e010 	.word	0xe000e010
 80044d0:	e000e018 	.word	0xe000e018
 80044d4:	20000000 	.word	0x20000000
 80044d8:	10624dd3 	.word	0x10624dd3
 80044dc:	e000e014 	.word	0xe000e014

080044e0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b082      	sub	sp, #8
 80044e4:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0UL;
 80044e6:	2300      	movs	r3, #0
 80044e8:	607b      	str	r3, [r7, #4]
    /* A function that implements a task must not exit or attempt to return to
     * its caller as there is nothing to return to. If a task wants to exit it
     * should instead call vTaskDelete( NULL ). Artificially force an assert()
     * to be triggered if configASSERT() is defined, then stop here so
     * application writers can catch the error. */
    configASSERT( ulCriticalNesting == ~0UL );
 80044ea:	4b0a      	ldr	r3, [pc, #40]	@ (8004514 <prvTaskExitError+0x34>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044f2:	d003      	beq.n	80044fc <prvTaskExitError+0x1c>
 80044f4:	f000 f9c6 	bl	8004884 <ulSetInterruptMask>
 80044f8:	bf00      	nop
 80044fa:	e7fd      	b.n	80044f8 <prvTaskExitError+0x18>
    portDISABLE_INTERRUPTS();
 80044fc:	f000 f9c2 	bl	8004884 <ulSetInterruptMask>

    while( ulDummy == 0 )
 8004500:	bf00      	nop
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d0fc      	beq.n	8004502 <prvTaskExitError+0x22>
         * warnings about code appearing after this function is called - making
         * ulDummy volatile makes the compiler think the function could return
         * and therefore not output an 'unreachable code' warning for code that
         * appears after it. */
    }
}
 8004508:	bf00      	nop
 800450a:	bf00      	nop
 800450c:	3708      	adds	r7, #8
 800450e:	46bd      	mov	sp, r7
 8004510:	bd80      	pop	{r7, pc}
 8004512:	bf00      	nop
 8004514:	20000010 	.word	0x20000010

08004518 <vPortYield>:

#endif /* configENABLE_FPU */
/*-----------------------------------------------------------*/

void vPortYield( void ) /* PRIVILEGED_FUNCTION */
{
 8004518:	b480      	push	{r7}
 800451a:	af00      	add	r7, sp, #0
    /* Set a PendSV to request a context switch. */
    portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800451c:	4b06      	ldr	r3, [pc, #24]	@ (8004538 <vPortYield+0x20>)
 800451e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004522:	601a      	str	r2, [r3, #0]

    /* Barriers are normally not required but do ensure the code is
     * completely within the specified behaviour for the architecture. */
    __asm volatile ( "dsb" ::: "memory" );
 8004524:	f3bf 8f4f 	dsb	sy
    __asm volatile ( "isb" );
 8004528:	f3bf 8f6f 	isb	sy
}
 800452c:	bf00      	nop
 800452e:	46bd      	mov	sp, r7
 8004530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004534:	4770      	bx	lr
 8004536:	bf00      	nop
 8004538:	e000ed04 	.word	0xe000ed04

0800453c <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void ) /* PRIVILEGED_FUNCTION */
{
 800453c:	b580      	push	{r7, lr}
 800453e:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 8004540:	f000 f9a0 	bl	8004884 <ulSetInterruptMask>
    ulCriticalNesting++;
 8004544:	4b05      	ldr	r3, [pc, #20]	@ (800455c <vPortEnterCritical+0x20>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	3301      	adds	r3, #1
 800454a:	4a04      	ldr	r2, [pc, #16]	@ (800455c <vPortEnterCritical+0x20>)
 800454c:	6013      	str	r3, [r2, #0]

    /* Barriers are normally not required but do ensure the code is
     * completely within the specified behaviour for the architecture. */
    __asm volatile ( "dsb" ::: "memory" );
 800454e:	f3bf 8f4f 	dsb	sy
    __asm volatile ( "isb" );
 8004552:	f3bf 8f6f 	isb	sy
}
 8004556:	bf00      	nop
 8004558:	bd80      	pop	{r7, pc}
 800455a:	bf00      	nop
 800455c:	20000010 	.word	0x20000010

08004560 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void ) /* PRIVILEGED_FUNCTION */
{
 8004560:	b580      	push	{r7, lr}
 8004562:	af00      	add	r7, sp, #0
    configASSERT( ulCriticalNesting );
 8004564:	4b0a      	ldr	r3, [pc, #40]	@ (8004590 <vPortExitCritical+0x30>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d103      	bne.n	8004574 <vPortExitCritical+0x14>
 800456c:	f000 f98a 	bl	8004884 <ulSetInterruptMask>
 8004570:	bf00      	nop
 8004572:	e7fd      	b.n	8004570 <vPortExitCritical+0x10>
    ulCriticalNesting--;
 8004574:	4b06      	ldr	r3, [pc, #24]	@ (8004590 <vPortExitCritical+0x30>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	3b01      	subs	r3, #1
 800457a:	4a05      	ldr	r2, [pc, #20]	@ (8004590 <vPortExitCritical+0x30>)
 800457c:	6013      	str	r3, [r2, #0]

    if( ulCriticalNesting == 0 )
 800457e:	4b04      	ldr	r3, [pc, #16]	@ (8004590 <vPortExitCritical+0x30>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d102      	bne.n	800458c <vPortExitCritical+0x2c>
    {
        portENABLE_INTERRUPTS();
 8004586:	2000      	movs	r0, #0
 8004588:	f000 f989 	bl	800489e <vClearInterruptMask>
    }
}
 800458c:	bf00      	nop
 800458e:	bd80      	pop	{r7, pc}
 8004590:	20000010 	.word	0x20000010

08004594 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void SysTick_Handler( void ) /* PRIVILEGED_FUNCTION */
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b082      	sub	sp, #8
 8004598:	af00      	add	r7, sp, #0
    uint32_t ulPreviousMask;

    ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800459a:	f000 f973 	bl	8004884 <ulSetInterruptMask>
 800459e:	6078      	str	r0, [r7, #4]
    traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80045a0:	f7ff f808 	bl	80035b4 <xTaskIncrementTick>
 80045a4:	4603      	mov	r3, r0
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d003      	beq.n	80045b2 <SysTick_Handler+0x1e>
        {
            traceISR_EXIT_TO_SCHEDULER();
            /* Pend a context switch. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80045aa:	4b05      	ldr	r3, [pc, #20]	@ (80045c0 <SysTick_Handler+0x2c>)
 80045ac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80045b0:	601a      	str	r2, [r3, #0]
        else
        {
            traceISR_EXIT();
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 80045b2:	6878      	ldr	r0, [r7, #4]
 80045b4:	f000 f973 	bl	800489e <vClearInterruptMask>
}
 80045b8:	bf00      	nop
 80045ba:	3708      	adds	r7, #8
 80045bc:	46bd      	mov	sp, r7
 80045be:	bd80      	pop	{r7, pc}
 80045c0:	e000ed04 	.word	0xe000ed04

080045c4 <vPortSVCHandler_C>:
/*-----------------------------------------------------------*/

void vPortSVCHandler_C( uint32_t * pulCallerStackAddress ) /* PRIVILEGED_FUNCTION portDONT_DISCARD */
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b084      	sub	sp, #16
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
    #endif /* configENABLE_TRUSTZONE */
    uint8_t ucSVCNumber;

    /* Register are stored on the stack in the following order - R0, R1, R2, R3,
     * R12, LR, PC, xPSR. */
    ulPC = pulCallerStackAddress[ portOFFSET_TO_PC ];
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	699b      	ldr	r3, [r3, #24]
 80045d0:	60fb      	str	r3, [r7, #12]
    ucSVCNumber = ( ( uint8_t * ) ulPC )[ -2 ];
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	3b02      	subs	r3, #2
 80045d6:	781b      	ldrb	r3, [r3, #0]
 80045d8:	72fb      	strb	r3, [r7, #11]

    switch( ucSVCNumber )
 80045da:	7afb      	ldrb	r3, [r7, #11]
 80045dc:	2b66      	cmp	r3, #102	@ 0x66
 80045de:	d102      	bne.n	80045e6 <vPortSVCHandler_C+0x22>
            }
            #endif /* configENABLE_FPU */

            /* Setup the context of the first task so that the first task starts
             * executing. */
            vRestoreContextOfFirstTask();
 80045e0:	f000 f92a 	bl	8004838 <vRestoreContextOfFirstTask>
            break;
 80045e4:	e003      	b.n	80045ee <vPortSVCHandler_C+0x2a>
                    break;
            #endif /* configENABLE_MPU == 1 */

        default:
            /* Incorrect SVC call. */
            configASSERT( pdFALSE );
 80045e6:	f000 f94d 	bl	8004884 <ulSetInterruptMask>
 80045ea:	bf00      	nop
 80045ec:	e7fd      	b.n	80045ea <vPortSVCHandler_C+0x26>
    }
}
 80045ee:	bf00      	nop
 80045f0:	3710      	adds	r7, #16
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bd80      	pop	{r7, pc}
	...

080045f8 <pxPortInitialiseStack>:

    StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                         StackType_t * pxEndOfStack,
                                         TaskFunction_t pxCode,
                                         void * pvParameters ) /* PRIVILEGED_FUNCTION */
    {
 80045f8:	b480      	push	{r7}
 80045fa:	b085      	sub	sp, #20
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	60f8      	str	r0, [r7, #12]
 8004600:	60b9      	str	r1, [r7, #8]
 8004602:	607a      	str	r2, [r7, #4]
 8004604:	603b      	str	r3, [r7, #0]
            }
            #endif /* configENABLE_TRUSTZONE */
        }
        #else /* portPRELOAD_REGISTERS */
        {
            pxTopOfStack--;                                          /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	3b04      	subs	r3, #4
 800460a:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = portINITIAL_XPSR;                        /* xPSR. */
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004612:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	3b04      	subs	r3, #4
 8004618:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) pxCode;                  /* PC. */
 800461a:	687a      	ldr	r2, [r7, #4]
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	3b04      	subs	r3, #4
 8004624:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS; /* LR. */
 8004626:	4a38      	ldr	r2, [pc, #224]	@ (8004708 <pxPortInitialiseStack+0x110>)
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	3b04      	subs	r3, #4
 8004630:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x12121212UL;            /* R12. */
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	f04f 3212 	mov.w	r2, #303174162	@ 0x12121212
 8004638:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	3b04      	subs	r3, #4
 800463e:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x03030303UL;            /* R3. */
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	f04f 3203 	mov.w	r2, #50529027	@ 0x3030303
 8004646:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	3b04      	subs	r3, #4
 800464c:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x02020202UL;            /* R2. */
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	f04f 3202 	mov.w	r2, #33686018	@ 0x2020202
 8004654:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	3b04      	subs	r3, #4
 800465a:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x01010101UL;            /* R1. */
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	f04f 3201 	mov.w	r2, #16843009	@ 0x1010101
 8004662:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	3b04      	subs	r3, #4
 8004668:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) pvParameters;            /* R0. */
 800466a:	683a      	ldr	r2, [r7, #0]
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	3b04      	subs	r3, #4
 8004674:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x11111111UL;            /* R11. */
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	f04f 3211 	mov.w	r2, #286331153	@ 0x11111111
 800467c:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	3b04      	subs	r3, #4
 8004682:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x10101010UL;            /* R10. */
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	f04f 3210 	mov.w	r2, #269488144	@ 0x10101010
 800468a:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	3b04      	subs	r3, #4
 8004690:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x09090909UL;            /* R09. */
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	f04f 3209 	mov.w	r2, #151587081	@ 0x9090909
 8004698:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	3b04      	subs	r3, #4
 800469e:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x08080808UL;            /* R08. */
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	f04f 3208 	mov.w	r2, #134744072	@ 0x8080808
 80046a6:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	3b04      	subs	r3, #4
 80046ac:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x07070707UL;            /* R07. */
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	f04f 3207 	mov.w	r2, #117901063	@ 0x7070707
 80046b4:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	3b04      	subs	r3, #4
 80046ba:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x06060606UL;            /* R06. */
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	f04f 3206 	mov.w	r2, #101058054	@ 0x6060606
 80046c2:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	3b04      	subs	r3, #4
 80046c8:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x05050505UL;            /* R05. */
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	f04f 3205 	mov.w	r2, #84215045	@ 0x5050505
 80046d0:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	3b04      	subs	r3, #4
 80046d6:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x04040404UL;            /* R04. */
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	f04f 3204 	mov.w	r2, #67372036	@ 0x4040404
 80046de:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	3b04      	subs	r3, #4
 80046e4:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = portINITIAL_EXC_RETURN;                  /* EXC_RETURN. */
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	f06f 0243 	mvn.w	r2, #67	@ 0x43
 80046ec:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	3b04      	subs	r3, #4
 80046f2:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) pxEndOfStack;            /* Slot used to hold this task's PSPLIM value. */
 80046f4:	68ba      	ldr	r2, [r7, #8]
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	601a      	str	r2, [r3, #0]
            }
            #endif /* configENABLE_TRUSTZONE */
        }
        #endif /* portPRELOAD_REGISTERS */

        return pxTopOfStack;
 80046fa:	68fb      	ldr	r3, [r7, #12]
    }
 80046fc:	4618      	mov	r0, r3
 80046fe:	3714      	adds	r7, #20
 8004700:	46bd      	mov	sp, r7
 8004702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004706:	4770      	bx	lr
 8004708:	080044e1 	.word	0x080044e1

0800470c <xPortStartScheduler>:

#endif /* configENABLE_MPU */
/*-----------------------------------------------------------*/

BaseType_t xPortStartScheduler( void ) /* PRIVILEGED_FUNCTION */
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b084      	sub	sp, #16
 8004710:	af00      	add	r7, sp, #0
     * configCHECK_HANDLER_INSTALLATION to 0 in their FreeRTOSConfig.h. Direct
     * routing, which is validated here when configCHECK_HANDLER_INSTALLATION
     * is 1, should be preferred when possible. */
    #if ( configCHECK_HANDLER_INSTALLATION == 1 )
    {
        const portISR_t * const pxVectorTable = portSCB_VTOR_REG;
 8004712:	4b41      	ldr	r3, [pc, #260]	@ (8004818 <xPortStartScheduler+0x10c>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	60fb      	str	r3, [r7, #12]
         * https://www.FreeRTOS.org/FAQHelp.html.
         *
         * Systems with a configurable address for the interrupt vector table
         * can also encounter assertion failures or even system faults here if
         * VTOR is not set correctly to point to the application's vector table. */
        configASSERT( pxVectorTable[ portVECTOR_INDEX_SVC ] == SVC_Handler );
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	332c      	adds	r3, #44	@ 0x2c
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4a3f      	ldr	r2, [pc, #252]	@ (800481c <xPortStartScheduler+0x110>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d003      	beq.n	800472c <xPortStartScheduler+0x20>
 8004724:	f000 f8ae 	bl	8004884 <ulSetInterruptMask>
 8004728:	bf00      	nop
 800472a:	e7fd      	b.n	8004728 <xPortStartScheduler+0x1c>
        configASSERT( pxVectorTable[ portVECTOR_INDEX_PENDSV ] == PendSV_Handler );
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	3338      	adds	r3, #56	@ 0x38
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4a3b      	ldr	r2, [pc, #236]	@ (8004820 <xPortStartScheduler+0x114>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d003      	beq.n	8004740 <xPortStartScheduler+0x34>
 8004738:	f000 f8a4 	bl	8004884 <ulSetInterruptMask>
 800473c:	bf00      	nop
 800473e:	e7fd      	b.n	800473c <xPortStartScheduler+0x30>
    }
    #endif /* configCHECK_HANDLER_INSTALLATION */

    #if ( ( configASSERT_DEFINED == 1 ) && ( portHAS_ARMV8M_MAIN_EXTENSION == 1 ) )
    {
        volatile uint32_t ulImplementedPrioBits = 0;
 8004740:	2300      	movs	r3, #0
 8004742:	60bb      	str	r3, [r7, #8]
         * "FromISR". FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * First, determine the number of priority bits available. Write to all
         * possible bits in the priority setting for SVCall. */
        portNVIC_SHPR2_REG = 0xFF000000;
 8004744:	4b37      	ldr	r3, [pc, #220]	@ (8004824 <xPortStartScheduler+0x118>)
 8004746:	f04f 427f 	mov.w	r2, #4278190080	@ 0xff000000
 800474a:	601a      	str	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = ( uint8_t ) ( ( portNVIC_SHPR2_REG & 0xFF000000 ) >> 24 );
 800474c:	4b35      	ldr	r3, [pc, #212]	@ (8004824 <xPortStartScheduler+0x118>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	0e1b      	lsrs	r3, r3, #24
 8004752:	b2db      	uxtb	r3, r3
 8004754:	71fb      	strb	r3, [r7, #7]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004756:	79fb      	ldrb	r3, [r7, #7]
 8004758:	b2db      	uxtb	r3, r3
 800475a:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800475e:	b2da      	uxtb	r2, r3
 8004760:	4b31      	ldr	r3, [pc, #196]	@ (8004828 <xPortStartScheduler+0x11c>)
 8004762:	701a      	strb	r2, [r3, #0]
         * accounting for the number of priority bits supported by the
         * hardware. A priority of 0 is invalid because setting the BASEPRI
         * register to 0 unmasks all interrupts, and interrupts with priority 0
         * cannot be masked using BASEPRI.
         * See https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        configASSERT( ucMaxSysCallPriority );
 8004764:	4b30      	ldr	r3, [pc, #192]	@ (8004828 <xPortStartScheduler+0x11c>)
 8004766:	781b      	ldrb	r3, [r3, #0]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d103      	bne.n	8004774 <xPortStartScheduler+0x68>
 800476c:	f000 f88a 	bl	8004884 <ulSetInterruptMask>
 8004770:	bf00      	nop
 8004772:	e7fd      	b.n	8004770 <xPortStartScheduler+0x64>

        /* Check that the bits not implemented in hardware are zero in
         * configMAX_SYSCALL_INTERRUPT_PRIORITY. */
        configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & ( uint8_t ) ( ~( uint32_t ) ucMaxPriorityValue ) ) == 0U );
 8004774:	79fb      	ldrb	r3, [r7, #7]
 8004776:	b2db      	uxtb	r3, r3
 8004778:	43db      	mvns	r3, r3
 800477a:	b2db      	uxtb	r3, r3
 800477c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004780:	b2db      	uxtb	r3, r3
 8004782:	2b00      	cmp	r3, #0
 8004784:	d00b      	beq.n	800479e <xPortStartScheduler+0x92>
 8004786:	f000 f87d 	bl	8004884 <ulSetInterruptMask>
 800478a:	bf00      	nop
 800478c:	e7fd      	b.n	800478a <xPortStartScheduler+0x7e>

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
        {
            ulImplementedPrioBits++;
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	3301      	adds	r3, #1
 8004792:	60bb      	str	r3, [r7, #8]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004794:	79fb      	ldrb	r3, [r7, #7]
 8004796:	b2db      	uxtb	r3, r3
 8004798:	005b      	lsls	r3, r3, #1
 800479a:	b2db      	uxtb	r3, r3
 800479c:	71fb      	strb	r3, [r7, #7]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800479e:	79fb      	ldrb	r3, [r7, #7]
 80047a0:	b2db      	uxtb	r3, r3
 80047a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047a6:	2b80      	cmp	r3, #128	@ 0x80
 80047a8:	d0f1      	beq.n	800478e <xPortStartScheduler+0x82>
        }

        if( ulImplementedPrioBits == 8 )
 80047aa:	68bb      	ldr	r3, [r7, #8]
 80047ac:	2b08      	cmp	r3, #8
 80047ae:	d103      	bne.n	80047b8 <xPortStartScheduler+0xac>
             *
             * The following assert ensures that the sub-priority bit in the
             * configMAX_SYSCALL_INTERRUPT_PRIORITY is clear to avoid the above mentioned
             * confusion. */
            configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & 0x1U ) == 0U );
            ulMaxPRIGROUPValue = 0;
 80047b0:	4b1e      	ldr	r3, [pc, #120]	@ (800482c <xPortStartScheduler+0x120>)
 80047b2:	2200      	movs	r2, #0
 80047b4:	601a      	str	r2, [r3, #0]
 80047b6:	e004      	b.n	80047c2 <xPortStartScheduler+0xb6>
        }
        else
        {
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS - ulImplementedPrioBits;
 80047b8:	68bb      	ldr	r3, [r7, #8]
 80047ba:	f1c3 0307 	rsb	r3, r3, #7
 80047be:	4a1b      	ldr	r2, [pc, #108]	@ (800482c <xPortStartScheduler+0x120>)
 80047c0:	6013      	str	r3, [r2, #0]
        }

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80047c2:	4b1a      	ldr	r3, [pc, #104]	@ (800482c <xPortStartScheduler+0x120>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	021b      	lsls	r3, r3, #8
 80047c8:	4a18      	ldr	r2, [pc, #96]	@ (800482c <xPortStartScheduler+0x120>)
 80047ca:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80047cc:	4b17      	ldr	r3, [pc, #92]	@ (800482c <xPortStartScheduler+0x120>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80047d4:	4a15      	ldr	r2, [pc, #84]	@ (800482c <xPortStartScheduler+0x120>)
 80047d6:	6013      	str	r3, [r2, #0]
    }
    #endif /* #if ( ( configASSERT_DEFINED == 1 ) && ( portHAS_ARMV8M_MAIN_EXTENSION == 1 ) ) */

    /* Make PendSV and SysTick the lowest priority interrupts, and make SVCall
     * the highest priority. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80047d8:	4b15      	ldr	r3, [pc, #84]	@ (8004830 <xPortStartScheduler+0x124>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4a14      	ldr	r2, [pc, #80]	@ (8004830 <xPortStartScheduler+0x124>)
 80047de:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80047e2:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80047e4:	4b12      	ldr	r3, [pc, #72]	@ (8004830 <xPortStartScheduler+0x124>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a11      	ldr	r2, [pc, #68]	@ (8004830 <xPortStartScheduler+0x124>)
 80047ea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80047ee:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR2_REG = 0;
 80047f0:	4b0c      	ldr	r3, [pc, #48]	@ (8004824 <xPortStartScheduler+0x118>)
 80047f2:	2200      	movs	r2, #0
 80047f4:	601a      	str	r2, [r3, #0]
    }
    #endif /* configENABLE_MPU */

    /* Start the timer that generates the tick ISR. Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80047f6:	f7ff fe4f 	bl	8004498 <vPortSetupTimerInterrupt>

    /* Initialize the critical nesting count ready for the first task. */
    ulCriticalNesting = 0;
 80047fa:	4b0e      	ldr	r3, [pc, #56]	@ (8004834 <xPortStartScheduler+0x128>)
 80047fc:	2200      	movs	r2, #0
 80047fe:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
    }
    #endif /* ( ( configENABLE_MPU == 1 ) && ( configUSE_MPU_WRAPPERS_V1 == 0 ) ) */

    /* Start the first task. */
    vStartFirstTask();
 8004800:	f000 f830 	bl	8004864 <vStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS. Call
     * vTaskSwitchContext() so link time optimization does not remove the
     * symbol. */
    vTaskSwitchContext();
 8004804:	f7fe ffe8 	bl	80037d8 <vTaskSwitchContext>
    prvTaskExitError();
 8004808:	f7ff fe6a 	bl	80044e0 <prvTaskExitError>

    /* Should not get here. */
    return 0;
 800480c:	2300      	movs	r3, #0
}
 800480e:	4618      	mov	r0, r3
 8004810:	3710      	adds	r7, #16
 8004812:	46bd      	mov	sp, r7
 8004814:	bd80      	pop	{r7, pc}
 8004816:	bf00      	nop
 8004818:	e000ed08 	.word	0xe000ed08
 800481c:	080048fd 	.word	0x080048fd
 8004820:	080048b1 	.word	0x080048b1
 8004824:	e000ed1c 	.word	0xe000ed1c
 8004828:	200002cc 	.word	0x200002cc
 800482c:	200002d0 	.word	0x200002d0
 8004830:	e000ed20 	.word	0xe000ed20
 8004834:	20000010 	.word	0x20000010

08004838 <vRestoreContextOfFirstTask>:

#else /* configENABLE_MPU */

    void vRestoreContextOfFirstTask( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
    {
        __asm volatile
 8004838:	4a09      	ldr	r2, [pc, #36]	@ (8004860 <vRestoreContextOfFirstTask+0x28>)
 800483a:	6811      	ldr	r1, [r2, #0]
 800483c:	6808      	ldr	r0, [r1, #0]
 800483e:	c806      	ldmia	r0!, {r1, r2}
 8004840:	f381 880b 	msr	PSPLIM, r1
 8004844:	2102      	movs	r1, #2
 8004846:	f381 8814 	msr	CONTROL, r1
 800484a:	3020      	adds	r0, #32
 800484c:	f380 8809 	msr	PSP, r0
 8004850:	f3bf 8f6f 	isb	sy
 8004854:	f04f 0000 	mov.w	r0, #0
 8004858:	f380 8811 	msr	BASEPRI, r0
 800485c:	4710      	bx	r2
            "   isb                                             \n"
            "   mov  r0, #0                                     \n"
            "   msr  basepri, r0                                \n" /* Ensure that interrupts are enabled when the first task starts. */
            "   bx   r2                                         \n" /* Finally, branch to EXC_RETURN. */
        );
    }
 800485e:	bf00      	nop
 8004860:	200000c0 	.word	0x200000c0

08004864 <vStartFirstTask>:
}
/*-----------------------------------------------------------*/

void vStartFirstTask( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 8004864:	4806      	ldr	r0, [pc, #24]	@ (8004880 <vStartFirstTask+0x1c>)
 8004866:	6800      	ldr	r0, [r0, #0]
 8004868:	6800      	ldr	r0, [r0, #0]
 800486a:	f380 8808 	msr	MSP, r0
 800486e:	b662      	cpsie	i
 8004870:	b661      	cpsie	f
 8004872:	f3bf 8f4f 	dsb	sy
 8004876:	f3bf 8f6f 	isb	sy
 800487a:	df66      	svc	102	@ 0x66
 800487c:	bf00      	nop
        "   isb                                             \n"
        "   svc %0                                          \n" /* System call to start the first task. */
        "   nop                                             \n"
        ::"i" ( portSVC_START_SCHEDULER ) : "memory"
    );
}
 800487e:	bf00      	nop
 8004880:	e000ed08 	.word	0xe000ed08

08004884 <ulSetInterruptMask>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMask( void ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 8004884:	f3ef 8011 	mrs	r0, BASEPRI
 8004888:	f04f 0150 	mov.w	r1, #80	@ 0x50
 800488c:	f381 8811 	msr	BASEPRI, r1
 8004890:	f3bf 8f4f 	dsb	sy
 8004894:	f3bf 8f6f 	isb	sy
 8004898:	4770      	bx	lr
        "   dsb                                             \n"
        "   isb                                             \n"
        "   bx lr                                           \n" /* Return. */
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 800489a:	bf00      	nop
 800489c:	4618      	mov	r0, r3

0800489e <vClearInterruptMask>:
/*-----------------------------------------------------------*/

void vClearInterruptMask( __attribute__( ( unused ) ) uint32_t ulMask ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 800489e:	f380 8811 	msr	BASEPRI, r0
 80048a2:	f3bf 8f4f 	dsb	sy
 80048a6:	f3bf 8f6f 	isb	sy
 80048aa:	4770      	bx	lr
        "   dsb                                             \n"
        "   isb                                             \n"
        "   bx lr                                           \n" /* Return. */
        ::: "memory"
    );
}
 80048ac:	bf00      	nop
	...

080048b0 <PendSV_Handler>:

#else /* configENABLE_MPU */

    void PendSV_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
    {
        __asm volatile
 80048b0:	f3ef 8009 	mrs	r0, PSP
 80048b4:	f3ef 820b 	mrs	r2, PSPLIM
 80048b8:	4673      	mov	r3, lr
 80048ba:	e920 0ffc 	stmdb	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 80048be:	4a0e      	ldr	r2, [pc, #56]	@ (80048f8 <PendSV_Handler+0x48>)
 80048c0:	6811      	ldr	r1, [r2, #0]
 80048c2:	6008      	str	r0, [r1, #0]
 80048c4:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80048c8:	f380 8811 	msr	BASEPRI, r0
 80048cc:	f3bf 8f4f 	dsb	sy
 80048d0:	f3bf 8f6f 	isb	sy
 80048d4:	f7fe ff80 	bl	80037d8 <vTaskSwitchContext>
 80048d8:	f04f 0000 	mov.w	r0, #0
 80048dc:	f380 8811 	msr	BASEPRI, r0
 80048e0:	4a05      	ldr	r2, [pc, #20]	@ (80048f8 <PendSV_Handler+0x48>)
 80048e2:	6811      	ldr	r1, [r2, #0]
 80048e4:	6808      	ldr	r0, [r1, #0]
 80048e6:	e8b0 0ffc 	ldmia.w	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 80048ea:	f382 880b 	msr	PSPLIM, r2
 80048ee:	f380 8809 	msr	PSP, r0
 80048f2:	4718      	bx	r3
            "   msr psplim, r2                                  \n" /* Restore the PSPLIM register value for the task. */
            "   msr psp, r0                                     \n" /* Remember the new top of stack for the task. */
            "   bx r3                                           \n"
            ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
        );
    }
 80048f4:	bf00      	nop
 80048f6:	0000      	.short	0x0000
 80048f8:	200000c0 	.word	0x200000c0

080048fc <SVC_Handler>:

#else /* ( configENABLE_MPU == 1 ) && ( configUSE_MPU_WRAPPERS_V1 == 0 ) */

    void SVC_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
    {
        __asm volatile
 80048fc:	f01e 0f04 	tst.w	lr, #4
 8004900:	bf0c      	ite	eq
 8004902:	f3ef 8008 	mrseq	r0, MSP
 8004906:	f3ef 8009 	mrsne	r0, PSP
 800490a:	4901      	ldr	r1, [pc, #4]	@ (8004910 <SVC_Handler+0x14>)
 800490c:	4708      	bx	r1
            "   mrseq r0, msp                                   \n"
            "   mrsne r0, psp                                   \n"
            "   ldr r1, =vPortSVCHandler_C                      \n"
            "   bx r1                                           \n"
        );
    }
 800490e:	bf00      	nop
 8004910:	080045c5 	.word	0x080045c5

08004914 <app_system_configure>:

static void sys_control_task(void* p_params);


uint8_t app_system_configure(void)
{
 8004914:	b480      	push	{r7}
 8004916:	b083      	sub	sp, #12
 8004918:	af00      	add	r7, sp, #0
	uint8_t result = 0;
 800491a:	2300      	movs	r3, #0
 800491c:	71fb      	strb	r3, [r7, #7]



	return result;
 800491e:	79fb      	ldrb	r3, [r7, #7]
}
 8004920:	4618      	mov	r0, r3
 8004922:	370c      	adds	r7, #12
 8004924:	46bd      	mov	sp, r7
 8004926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492a:	4770      	bx	lr

0800492c <app_system_start>:

uint8_t app_system_start(void)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b086      	sub	sp, #24
 8004930:	af04      	add	r7, sp, #16
	uint8_t result = 0;
 8004932:	2300      	movs	r3, #0
 8004934:	71fb      	strb	r3, [r7, #7]

	sys_task = xTaskCreateStatic((TaskFunction_t)sys_control_task,
 8004936:	4b0f      	ldr	r3, [pc, #60]	@ (8004974 <app_system_start+0x48>)
 8004938:	9302      	str	r3, [sp, #8]
 800493a:	4b0f      	ldr	r3, [pc, #60]	@ (8004978 <app_system_start+0x4c>)
 800493c:	9301      	str	r3, [sp, #4]
 800493e:	2301      	movs	r3, #1
 8004940:	9300      	str	r3, [sp, #0]
 8004942:	2300      	movs	r3, #0
 8004944:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004948:	490c      	ldr	r1, [pc, #48]	@ (800497c <app_system_start+0x50>)
 800494a:	480d      	ldr	r0, [pc, #52]	@ (8004980 <app_system_start+0x54>)
 800494c:	f7fe fb3e 	bl	8002fcc <xTaskCreateStatic>
 8004950:	4603      	mov	r3, r0
 8004952:	4a0c      	ldr	r2, [pc, #48]	@ (8004984 <app_system_start+0x58>)
 8004954:	6013      	str	r3, [r2, #0]
										NULL,
										tskIDLE_PRIORITY + 1,
										sys_task_stack,
										&sys_task_buffer);

	configASSERT(sys_task != NULL);
 8004956:	4b0b      	ldr	r3, [pc, #44]	@ (8004984 <app_system_start+0x58>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d103      	bne.n	8004966 <app_system_start+0x3a>
 800495e:	f7ff ff91 	bl	8004884 <ulSetInterruptMask>
 8004962:	bf00      	nop
 8004964:	e7fd      	b.n	8004962 <app_system_start+0x36>

	// --- Start FreeRTOS scheduler
	vTaskStartScheduler(); // Never gets past here
 8004966:	f7fe fccf 	bl	8003308 <vTaskStartScheduler>

	return result;
 800496a:	79fb      	ldrb	r3, [r7, #7]
}
 800496c:	4618      	mov	r0, r3
 800496e:	3708      	adds	r7, #8
 8004970:	46bd      	mov	sp, r7
 8004972:	bd80      	pop	{r7, pc}
 8004974:	200002d8 	.word	0x200002d8
 8004978:	2000033c 	.word	0x2000033c
 800497c:	08004ab0 	.word	0x08004ab0
 8004980:	08004997 	.word	0x08004997
 8004984:	200002d4 	.word	0x200002d4

08004988 <vApplicationIdleHook>:

void vApplicationIdleHook( void )
{
 8004988:	b480      	push	{r7}
 800498a:	af00      	add	r7, sp, #0


	return;
 800498c:	bf00      	nop
}
 800498e:	46bd      	mov	sp, r7
 8004990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004994:	4770      	bx	lr

08004996 <sys_control_task>:

void sys_control_task(void* p_params)
{
 8004996:	b580      	push	{r7, lr}
 8004998:	b082      	sub	sp, #8
 800499a:	af00      	add	r7, sp, #0
 800499c:	6078      	str	r0, [r7, #4]
	for (;;)
	{
		// Run code here


		taskYIELD();
 800499e:	f7ff fdbb 	bl	8004518 <vPortYield>
 80049a2:	e7fc      	b.n	800499e <sys_control_task+0x8>

080049a4 <vApplicationGetIdleTaskMemory>:
	}
}

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80049a4:	b480      	push	{r7}
 80049a6:	b085      	sub	sp, #20
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	60f8      	str	r0, [r7, #12]
 80049ac:	60b9      	str	r1, [r7, #8]
 80049ae:	607a      	str	r2, [r7, #4]
static StaticTask_t xIdleTaskTCB;
static StackType_t uxIdleTaskStack[ configMINIMAL_STACK_SIZE ];

    /* Pass out a pointer to the StaticTask_t structure in which the Idle task's
    state will be stored. */
    *ppxIdleTaskTCBBuffer = &xIdleTaskTCB;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	4a07      	ldr	r2, [pc, #28]	@ (80049d0 <vApplicationGetIdleTaskMemory+0x2c>)
 80049b4:	601a      	str	r2, [r3, #0]

    /* Pass out the array that will be used as the Idle task's stack. */
    *ppxIdleTaskStackBuffer = uxIdleTaskStack;
 80049b6:	68bb      	ldr	r3, [r7, #8]
 80049b8:	4a06      	ldr	r2, [pc, #24]	@ (80049d4 <vApplicationGetIdleTaskMemory+0x30>)
 80049ba:	601a      	str	r2, [r3, #0]

    /* Pass out the size of the array pointed to by *ppxIdleTaskStackBuffer.
    Note that, as the array is necessarily of type StackType_t,
    configMINIMAL_STACK_SIZE is specified in words, not bytes. */
    *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80049c2:	601a      	str	r2, [r3, #0]
}
 80049c4:	bf00      	nop
 80049c6:	3714      	adds	r7, #20
 80049c8:	46bd      	mov	sp, r7
 80049ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ce:	4770      	bx	lr
 80049d0:	2000133c 	.word	0x2000133c
 80049d4:	200013a0 	.word	0x200013a0

080049d8 <vApplicationGetTimerTaskMemory>:


void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 80049d8:	b480      	push	{r7}
 80049da:	b085      	sub	sp, #20
 80049dc:	af00      	add	r7, sp, #0
 80049de:	60f8      	str	r0, [r7, #12]
 80049e0:	60b9      	str	r1, [r7, #8]
 80049e2:	607a      	str	r2, [r7, #4]
static StaticTask_t xTimerTaskTCB;
static StackType_t uxTimerTaskStack[ configTIMER_TASK_STACK_DEPTH ];

    /* Pass out a pointer to the StaticTask_t structure in which the Timer
    task's state will be stored. */
    *ppxTimerTaskTCBBuffer = &xTimerTaskTCB;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	4a07      	ldr	r2, [pc, #28]	@ (8004a04 <vApplicationGetTimerTaskMemory+0x2c>)
 80049e8:	601a      	str	r2, [r3, #0]

    /* Pass out the array that will be used as the Timer task's stack. */
    *ppxTimerTaskStackBuffer = uxTimerTaskStack;
 80049ea:	68bb      	ldr	r3, [r7, #8]
 80049ec:	4a06      	ldr	r2, [pc, #24]	@ (8004a08 <vApplicationGetTimerTaskMemory+0x30>)
 80049ee:	601a      	str	r2, [r3, #0]

    /* Pass out the size of the array pointed to by *ppxTimerTaskStackBuffer.
    Note that, as the array is necessarily of type StackType_t,
    configTIMER_TASK_STACK_DEPTH is specified in words, not bytes. */
    *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80049f6:	601a      	str	r2, [r3, #0]
}
 80049f8:	bf00      	nop
 80049fa:	3714      	adds	r7, #20
 80049fc:	46bd      	mov	sp, r7
 80049fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a02:	4770      	bx	lr
 8004a04:	200017a0 	.word	0x200017a0
 8004a08:	20001804 	.word	0x20001804

08004a0c <memset>:
 8004a0c:	4402      	add	r2, r0
 8004a0e:	4603      	mov	r3, r0
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d100      	bne.n	8004a16 <memset+0xa>
 8004a14:	4770      	bx	lr
 8004a16:	f803 1b01 	strb.w	r1, [r3], #1
 8004a1a:	e7f9      	b.n	8004a10 <memset+0x4>

08004a1c <__libc_init_array>:
 8004a1c:	b570      	push	{r4, r5, r6, lr}
 8004a1e:	4d0d      	ldr	r5, [pc, #52]	@ (8004a54 <__libc_init_array+0x38>)
 8004a20:	2600      	movs	r6, #0
 8004a22:	4c0d      	ldr	r4, [pc, #52]	@ (8004a58 <__libc_init_array+0x3c>)
 8004a24:	1b64      	subs	r4, r4, r5
 8004a26:	10a4      	asrs	r4, r4, #2
 8004a28:	42a6      	cmp	r6, r4
 8004a2a:	d109      	bne.n	8004a40 <__libc_init_array+0x24>
 8004a2c:	4d0b      	ldr	r5, [pc, #44]	@ (8004a5c <__libc_init_array+0x40>)
 8004a2e:	2600      	movs	r6, #0
 8004a30:	4c0b      	ldr	r4, [pc, #44]	@ (8004a60 <__libc_init_array+0x44>)
 8004a32:	f000 f825 	bl	8004a80 <_init>
 8004a36:	1b64      	subs	r4, r4, r5
 8004a38:	10a4      	asrs	r4, r4, #2
 8004a3a:	42a6      	cmp	r6, r4
 8004a3c:	d105      	bne.n	8004a4a <__libc_init_array+0x2e>
 8004a3e:	bd70      	pop	{r4, r5, r6, pc}
 8004a40:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a44:	3601      	adds	r6, #1
 8004a46:	4798      	blx	r3
 8004a48:	e7ee      	b.n	8004a28 <__libc_init_array+0xc>
 8004a4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a4e:	3601      	adds	r6, #1
 8004a50:	4798      	blx	r3
 8004a52:	e7f2      	b.n	8004a3a <__libc_init_array+0x1e>
 8004a54:	08004b14 	.word	0x08004b14
 8004a58:	08004b14 	.word	0x08004b14
 8004a5c:	08004b14 	.word	0x08004b14
 8004a60:	08004b18 	.word	0x08004b18

08004a64 <memcpy>:
 8004a64:	440a      	add	r2, r1
 8004a66:	1e43      	subs	r3, r0, #1
 8004a68:	4291      	cmp	r1, r2
 8004a6a:	d100      	bne.n	8004a6e <memcpy+0xa>
 8004a6c:	4770      	bx	lr
 8004a6e:	b510      	push	{r4, lr}
 8004a70:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004a74:	4291      	cmp	r1, r2
 8004a76:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004a7a:	d1f9      	bne.n	8004a70 <memcpy+0xc>
 8004a7c:	bd10      	pop	{r4, pc}
	...

08004a80 <_init>:
 8004a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a82:	bf00      	nop
 8004a84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a86:	bc08      	pop	{r3}
 8004a88:	469e      	mov	lr, r3
 8004a8a:	4770      	bx	lr

08004a8c <_fini>:
 8004a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a8e:	bf00      	nop
 8004a90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a92:	bc08      	pop	{r3}
 8004a94:	469e      	mov	lr, r3
 8004a96:	4770      	bx	lr
